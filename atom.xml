<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XibHe&#39;s Blog</title>
  <subtitle>It is never too late，Just do it better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://XibHe.github.io/"/>
  <updated>2017-06-22T12:28:19.000Z</updated>
  <id>http://XibHe.github.io/</id>
  
  <author>
    <name>XibHe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一个父亲节</title>
    <link href="http://XibHe.github.io/2017/06/18/First-father&#39;s-day/"/>
    <id>http://XibHe.github.io/2017/06/18/First-father&#39;s-day/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2017-06-22T12:28:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>我和妻子是大学同学，在恋爱长跑五年后结了婚。妻子老家不是我们那边的，但是在同一个省，最开始的地域原因，造成了我家人对她的偏见。我们俩克服了种种阻碍，在15年情人节那天领了证。</p>
<p>我们的小孩比计划来的早，妻子一直很期待在猴年能生一个聪明伶俐的猴宝宝。当得知自己要作父亲的那一天，内心感受是复杂的，有期待，也有忐忑。觉得自己没有做好成为一个父亲的准备。伴随着孩子快要出生，我的这种焦虑感越发的明显了。在妻子待产期间，没有全身心的去照顾她，总是把工作中的压力和不快带到家里。终于，在一个周三的早上爆发了…… 最后，还是妻子在妻子的安慰下，我才渐渐平复了自己的心情。</p>
<p>由于老家人和妻子之间的矛盾，再加上我父母都不在老家，不能照顾快要临产的妻子。最终选择在我妻子老家待产。孩子出生那天的凌晨十二点多，那时我并不在妻子身边，电话那头当妻子告诉我小家伙出生了，是个男孩时，我就再也控制不住自己的激动，惊喜，幸福的感情了。当得知妻子由于羊水不足而剖腹产时，听着电话一头，妻子有气无力的声音。当时真想给自己一巴掌，我没有尽到作丈夫的责任，在妻子临盆时不能陪在她身边，给她鼓励，让她安心。还让我岳母，一个50多岁，腿脚不便利的老人家为我妻子跑前跑后，楼上楼下的张罗妻子生产的一切事宜。</p>
<p>像我这样的渣男竟然还有女人给我生孩子，把自己的终身幸福托付给我。我上辈子一定是积了什么大功德了！无法忘记第一次见到小家伙的场景，他紧握着一双小手，眼睛半闭半睁，好奇的打量着周围的一切。虽然我嘴上一直在埋怨小家伙让他妈妈挨了一刀，但心里还是对他充满了怜爱。唯一遗憾的是，陪在她们母子身边的时间太短，不等小家伙满月我就不得不离开她们母子俩，带着不舍与留恋重新投入到工作中。</p>
<p>这次端午节回家，小家伙给了我一个大大的惊喜。刚一见面，盯着看了我半天，然后就用一双小手抚摸我的脸，最后，嘿嘿一笑，扑到我的怀里。那一刻，时间仿佛静止，而我又找到了初恋的感觉[害羞]。这不禁又让我感慨了一番：不能时刻陪在你身边，经历你的成长，听到你第一次喊爸爸。终究是我无法弥补的遗憾。这里不奢望能得到你的原谅，只希望将来的某一天你能理解。成年人的生活里没有容易二字。爱❤你我的小宝贝！            </p>
<p>再过一个多月我们家宝宝就一岁了，这一年来我经历了很多，也成长了很多。感谢妻子的宽容和奉献，她总是迁就我的时不时就发作的小情绪，安慰我，鼓励我，支持我。尽她最大的力量来爱我和儿子。爱❤你我的大宝贝！你和儿子就是我的一切，我的天下无双。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我和妻子是大学同学，在恋爱长跑五年后结了婚。妻子老家不是我们那边的，但是在同一个省，最开始的地域原因，造成了我家人对她的偏见。我们俩克服了种种阻碍，在15年情人节那天领了证。&lt;/p&gt;
&lt;p&gt;我们的小孩比计划来的早，妻子一直很期待在猴年能生一个聪明伶俐的猴宝宝。当得知自己要作
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="父亲节" scheme="http://XibHe.github.io/tags/%E7%88%B6%E4%BA%B2%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>《黑客与画家》小记</title>
    <link href="http://XibHe.github.io/2017/05/31/hacker-and-artist/"/>
    <id>http://XibHe.github.io/2017/05/31/hacker-and-artist/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2017-06-30T14:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imciel.com" target="_blank" rel="external">郭一刀</a>推荐的一本书，一本关于创业经历，软件开发，个人品味的书。也许是书中的章节相互独立，给我的感觉像是集合了众多的tips。而这些闪光点，或是忠告，或是建议，或者结合了很多事实而形成的结论。读后给我一种醍醐灌顶的感觉，Paul结合自己的创业和开发经历，将计算机编程的本质娓娓道来。全书大致分成三个部分:</p>
<ul>
<li>解释了什么是黑客，黑客是如何看待这个世界的。</li>
<li>黑客去的成果，这些成果对世界的影响，如何创造财富？用黑客的方法防止垃圾邮件。</li>
<li>黑客心目中完美的编程语言是什么样的，为什么黑客如此执着于设计新的编程语言。</li>
</ul>
<p>Paul是世界上首个互联网应用程序Viaweb的开发者之一。创建的Viaweb公司后来被雅虎收购，改名为Yahoo!Store。后来Paul成为一名资深的投资人，作为一名成功的创业者同时也是一名熟练使用Lisp语言的专家。他的经历很生动，完美诠释黑客文化的基础和核心。其中是我印象深刻的是一段关于如何促成潜在的买方掏钱收购自己创业公司的论述:</p>
<blockquote>
<font size="3" face="黑体"> 大多数时候，促成买方掏钱的最好办法不是让买方看到有获利的可能，二手让他们感到失去机会的恐惧。对于买家来说，最强的收购动机就是看到竞争对手可能收购你。我们发现这会使得CEO们连夜行动。次强的动机则是让他们担心如果现在不买你，你的高速成长将使得未来的收购耗资巨大，甚至你本身可能变成一个他们的竞争对手。 </font>

</blockquote>
<p>Paul曾经学习过绘画，绘画是一门艺术性很强，同时需要欣赏者有着相应的鉴赏和审美能力的创作方式。Paul总是能将自己的编程和创业经历与之结合起来，切中要害的指出二者之间的联系。</p>
<p>关于设计者的品味，只要你开始思考这个问题，你就会发现不同的领域对于“美”的理解有着惊人的相似度。优秀设计的原则是许多学科的共同原则，一再反复地出现。</p>
<blockquote>
<ul>
<li>好设计是简单的设计</li>
<li>好设计是永不过时的设计</li>
<li>好设计是解决主要问题的设计</li>
<li>好设计是启发性的设计</li>
<li>好设计通常是有点趣味性的设计</li>
<li>好设计是艰苦的设计</li>
<li>好设计是看似容易的设计</li>
<li>好设计是对称的设计</li>
<li>好设计是模仿大自然的设计</li>
<li>好设计是一种再设计</li>
<li>好设计是能够复制的设计</li>
<li>好设计常常是奇特的设计</li>
<li>好设计是成批出现的</li>
<li>好设计常常是大胆的设计</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://imciel.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;郭一刀&lt;/a&gt;推荐的一本书，一本关于创业经历，软件开发，个人品味的书。也许是书中的章节相互独立，给我的感觉像是集合了众多的tips。而这些闪光点，或是忠告
    
    </summary>
    
      <category term="阅读" scheme="http://XibHe.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="《黑客与画家》" scheme="http://XibHe.github.io/tags/%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用JSExport进行JS交互时遇到的一个问题</title>
    <link href="http://XibHe.github.io/2017/05/04/%E4%BD%BF%E7%94%A8JSExport%E8%BF%9B%E8%A1%8CJS%E4%BA%A4%E4%BA%92%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://XibHe.github.io/2017/05/04/使用JSExport进行JS交互时遇到的一个问题/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-06-25T07:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用JSExport与OC和JS进行通信，遇到一个问题，无法调用JS传递的最新购物车商品数量的交互方法。</p>
<h2 id="u89E3_u51B3_u65B9_u6CD5"><a href="#u89E3_u51B3_u65B9_u6CD5" class="headerlink" title="解决方法"></a>解决方法</h2><p>将之前的放在VC里的JS交互方法抽离到单独的一个类中，这个类继承NSObject。不做任何特别的处理，将  </p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br><span class="line">context[<span class="string">@"jsObject"</span>] = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>
<p>这句代码，从</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView</span><br></pre></td></tr></table></figure>
<p>移到，</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType</span><br></pre></td></tr></table></figure>
<p>该代理方法中，就能每次都调用JS与OC的交互方法。</p>
<h2 id="JavaScriptCore_u4F7F_u7528_u6CE8_u610F"><a href="#JavaScriptCore_u4F7F_u7528_u6CE8_u610F" class="headerlink" title="JavaScriptCore使用注意"></a>JavaScriptCore使用注意</h2><p>JavaStript调用本地方法是在子线程中执行的，这里要根据实际情况考虑线程之间的切换，而在回调JavaScript方法的时候最好是<font color="#FA8072">在刚开始调用此方法的线程中去执行那段JavaStript方法的代码。</font></p>
<h2 id="u53C2_u8003_u6587_u732E"><a href="#u53C2_u8003_u6587_u732E" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.csdn.net/lwjok2007/article/details/47058795" target="_blank" rel="external">iOS js oc相互调用（JavaScriptCore）（二）</a><br><a href="http://blog.csdn.net/si392950818/article/details/51646996" target="_blank" rel="external">ios 与 js交互一点心得</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/XibHe/JSExportTest" target="_blank" rel="external">点击下载</a></p>
<h2 id="u9057_u7559_u95EE_u9898"><a href="#u9057_u7559_u95EE_u9898" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>这里只有获取购物车最新商品数量时，无法调用JS交互方法，其他的JS交互方法仍然可以调用。那么<font color="#FA8072">获取JSContext的时机是什么</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用JSExport与OC和JS进行通信，遇到一个问题，无法调用JS传递的最新购物车商品数量的交互方法。&lt;/p&gt;
&lt;h2 id=&quot;u89E3_u51B3_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u89E3_u51B3_u65B9_u6CD5&quot; class=&quot;head
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="JSExport" scheme="http://XibHe.github.io/tags/JSExport/"/>
    
      <category term="JS里通过对象调用方法" scheme="http://XibHe.github.io/tags/JS%E9%87%8C%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>(译)HTTPS的工作原理</title>
    <link href="http://XibHe.github.io/2017/04/27/HTTPS/"/>
    <id>http://XibHe.github.io/2017/04/27/HTTPS/</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-06-30T14:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS只是标准HTTP协议涂上一层美味的SSL/TLS加密信息。 除非出现严重错误,它可以防止人们因<a href="https://en.wikipedia.org/wiki/Alice_and_Bob" target="_blank" rel="external">infamous Eve</a>查看或修改那些构成你浏览中产生的请求；让你可以安全的在你的电脑和服务器之间发送密码、通信和信用卡信息等数据。当绿色小挂锁和字母“https”出在你的地址栏时，并不意味你所访问的网站仍是之前的，而不是已经被篡改过的，当你打开网页时这些标识至少帮助你安全地访问网页。</p>
<h2 id="1-_u4EC0_u4E48_u662FHTTPS_u4EE5_u53CA_u5B83_u505A_u4E86_u4EC0_u4E48_3F"><a href="#1-_u4EC0_u4E48_u662FHTTPS_u4EE5_u53CA_u5B83_u505A_u4E86_u4EC0_u4E48_3F" class="headerlink" title="1.什么是HTTPS以及它做了什么?"></a>1.什么是HTTPS以及它做了什么?</h2><p>HTTPS是著名的HTTP协议，是在SSL / TLS(以下简称为“SSL”)加密层之上。服务器和客户端仍然通过完全相同的HTTP协议进行通信，但二者的通信是建立在一个安全的SSL连接,加密和解密请求和响应体系之上的。SSL有两个主要目的:</p>
<ul>
<li>验证你所访问的服务器的正确性</li>
<li>确保你与服务器之间的数据通信，无论是你发送给服务器的还是服务器返回给你的信息不被篡改</li>
</ul>
<p>真正非常聪明的部分是任何人都可以拦截您与服务器交换的每一个消息，包括您同意使用密钥和加密策略的消息，仍然无法读取任何实际发送的数据。</p>
<h2 id="2-_u5982_u4F55_u5EFA_u7ACBSSL_u8FDE_u63A5"><a href="#2-_u5982_u4F55_u5EFA_u7ACBSSL_u8FDE_u63A5" class="headerlink" title="2.如何建立SSL连接"></a>2.如何建立SSL连接</h2><p>通过握手建立客户端和服务器之间的SSL连接，其目的是:</p>
<ul>
<li>为了确实与客户端通信服务器的正确性</li>
<li>双方已经同意一个“密码套件”，其中包括二者将用于交换数据的加密算法</li>
<li>双方已就此算法达成任何必要的密钥</li>
</ul>
<p>一旦连接建立，双方可以使用约定的算法和密钥来安全地发送消息给彼此。我们将把握手分为3个主要阶段 - 发送Client Hello报文，证书交换和密钥交换。</p>
<p>1.客户端发送Client Hello报文 — 握手开始于客户端发送Client Hello报文。这包含服务器通过SSL连接到客户端所需的所有信息，包括各种密码套件及其支持的最大SSL版本。服务器使用Server Hello报文进行响应，报文中包含客户端所需的类似信息，包括根据客户端的偏好决定将使用哪个加密套件和SSL版本。</p>
<p>2.证书交换 — 现在连接已经建立起来了，服务器必须向客户端证明其身份。这是使用SSL证书来实现的，这是一个很小的类似于护照的东西。SSL证书包含各种数据，包括所有者的名称，附加的属性（例如域），证书的公钥，数字签名和有关证书有效期的信息。客户端检查隐式信任该证书，或者它被隐式信任的几个证书颁发机构（CA）之一被验证和信任。更多关于证书的要求。注意服务器还可以要求通过证书证明客户端的身份，但这通常只发生在非常敏感的应用程序中。</p>
<p>3.密钥交换 — 客户端和服务器交换的实际消息数据的加密将使用一种对称算法来完成，该算法在发送Client Hello报文阶段已被认可。对称算法使用单个密钥进行加密和解密，与需要公钥/私钥对的不对称算法相反。双方需要就此单一的对称密钥达成一致，即使用非对称加密和服务器的公钥/私钥可以安全地实现这一过程。</p>
<p>客户端生成用于主对称算法的随机密钥。它使用在发送Client Hello报文阶段中同意的算法和服务器的公钥（在其SSL证书上找到）对其进行加密。它将此加密密钥发送到服务器，使用服务器的私钥对其进行解密，握手会话中有趣部分就这样完成了。双方都充满乐意，如同他们正在和正确的人交谈，并且秘密地同意对对方加密他们即将发送的数据的密钥。HTTP请求和响应现在可以通过对明文消息进行加密后发送。</p>
<h2 id="3-_u8BC1_u4E66"><a href="#3-_u8BC1_u4E66" class="headerlink" title="3.证书"></a>3.证书</h2><h3 id="3-1_u4FE1_u4EFB"><a href="#3-1_u4FE1_u4EFB" class="headerlink" title="3.1信任"></a>3.1信任</h3><p>在最基本的层次上，SSL证书只是一个文本文件，任何具有文本编辑器的人都可以创建一个。实际上，您可以创建一个证书，声称您是Google Inc.，并且你掌握域名gmail.com。如果这是事实，SSL就是一个笑话;身份验证基本上是客户端询问服务器“你是Google吗？”，服务器回复“呃，是的，这是一张纸，’我是Google’写的”，客户说“好，这是我所有的数据”。阻止这场闹剧的魔法是在数字签名中，允许一方验证另一方的纸张是否合法。<br>为什么你可能信任证书有两个明智的原因：</p>
<ul>
<li>如果它在你隐含信任证书的列表上</li>
<li>如果能够证明它是被上述列表中的一个证书的控制器所信任</li>
</ul>
<p>第一个标准很容易检查。您的浏览器具有可从其中查看，添加和删除证书颁发机构(CA)可信SSL证书预先安装的列表。这些证书由一个集中的（在理论上，一般在实践中）组织来控制，这些组织非常安全，可靠和值得信赖，如Symantec，Comodo和GoDaddy。如果服务器从该列表中提供证书，那么您可以信任它。</p>
<p>第二个标准很难。服务器很容易说：“er，我的名字是er，来自微软，你信任Symantec和er，他们完全相信我，所以很酷。”一个有点聪明的客户端可能会去问Symantec“我有一个来自微软的服务请求，说你相信他们，这是真的吗？”但即使Symantec说“是的，我们知道他们，微软是合法的”，您仍然不知道声称是Microsoft的服务器实际上真的是微软还是某些入侵者。这时候数字签名该登场了。</p>
<h3 id="3-2_u6570_u5B57_u7B7E_u540D"><a href="#3-2_u6570_u5B57_u7B7E_u540D" class="headerlink" title="3.2数字签名"></a>3.2数字签名</h3><p>如前所述，SSL证书具有关联的公钥/私钥对。公钥作为证书的一部分分发，私钥被保密。这对非对称密钥用于SSL握手，以交换另一个密钥，供双方对数据加密和解密。客户端使用服务器的公钥加密对称密钥，并将其安全地发送到服务器，服务器使用其私钥对其进行解密。任何人都可以使用公钥加密，但只有服务器可以使用私钥进行解密。</p>
<p>数字签名的情况恰恰相反。证书可以由另一个机构“签署”，从而有效地记录在案，“我们已经证实该证书的控制人也控制证书上列出的属性（域名）”。在这种情况下，权限使用其私钥（广义地说）加密证书的内容，并且该密文作为数字签名附加到证书中。任何人都拥有权限使用公钥对该签名进行解密，并验证其是否为预期的解密值。但只有证书的所有者才能使用私钥加密内容，所以只有所有者才能实际创建一个有效的签名。</p>
<p>因此，如果服务器声称拥有由Symantec（或其他CA）签署的Microsoft.com的证书，那么您的浏览器不需要为此签名。如果是合法的，Symantec将使用（超秘密）私钥来生成服务器的SSL证书的数字签名，因此您的浏览器使用可以使用（超公共）公钥来检查该签名是否有效。Symantec将采取措施确保他们正在签署的组织真正拥有Microsoft.com，因此，鉴于您的客户信任Symantec，可以确定它真的在与微软公司对话。</p>
<h3 id="3-3_u81EA_u7B7E_u540D"><a href="#3-3_u81EA_u7B7E_u540D" class="headerlink" title="3.3自签名"></a>3.3自签名</h3><p>请注意，所有根CA证书都是“自签名”，这意味着使用自己的私钥生成数字签名的证书。根CA证书没有什么特别之处 — 你可以生成自己的自签名证书，并使用它来签署其他证书。 但是，由于您的随机证书不会作为CA预先加载到任何浏览器的任何地方，所以他们都不会相信你所签署的自己的或他人的证书。你是有效地说“呃，我真的是微软，这里是我自己签发并签署的身份证件”，所有正常运行的浏览器都会弹出一个非常严重的错误信息，以回应你的诡计。</p>
<p>这给所有浏览器和操作系统发行商带来了巨大的负担，只能信任干净的根CAs，因为他们的用户最终信任vet网站并保持证书安全的组织。<a href="http://security.stackexchange.com/questions/11464/getting-a-root-ca-accepted-in-systems-and-browsers" target="_blank" rel="external">这不是一件容易的事</a>。</p>
<h3 id="3-4_u4F60_u76F8_u4FE1_u4EC0_u4E48_uFF1F"><a href="#3-4_u4F60_u76F8_u4FE1_u4EC0_u4E48_uFF1F" class="headerlink" title="3.4你相信什么？"></a>3.4你相信什么？</h3><p>有趣的是，你的客户在技术上并不试图验证是否应该信任发送证书的一方，而是应该信任证书中包含的公开密钥。SSL证书是完全公开和公共的，因此任何攻击者都可以获取Microsoft的证书，拦截客户端对Microsoft.com的请求，并向其提供合法的证书。客户端会接受这一点，并开始愉快地握手。 但是，当客户端加密将用于实际数据加密的密钥时，它将使用该真实证书中的真实的Microsoft公钥进行此操作。由于攻击者没有Microsoft私钥来解密，所以他们现在被终止了。即使握手完成，它们仍然无法解密密钥，因此无法解密客户端向其发送的任何数据。只要攻击者不控制受信任的证书的私钥，正常的秩序就会顺利进行下去。如果客户骗取了受信任的证书，攻击者控制了证书和公钥，那么麻烦就开始了。</p>
<h2 id="4-_u771F_u7684_u5F88_u6709_u8DA3_u7684_u4E8B_u5B9E"><a href="#4-_u771F_u7684_u5F88_u6709_u8DA3_u7684_u4E8B_u5B9E" class="headerlink" title="4.真的很有趣的事实"></a>4.真的很有趣的事实</h2><h3 id="4-1_u5496_u5561_u5E97_u53EF_u4EE5_u901A_u8FC7_u7F51_u7EDC_u76D1_u63A7_u6211_u7684HTTPS_u6D41_u91CF_u5417_3F"><a href="#4-1_u5496_u5561_u5E97_u53EF_u4EE5_u901A_u8FC7_u7F51_u7EDC_u76D1_u63A7_u6211_u7684HTTPS_u6D41_u91CF_u5417_3F" class="headerlink" title="4.1咖啡店可以通过网络监控我的HTTPS流量吗?"></a>4.1咖啡店可以通过网络监控我的HTTPS流量吗?</h3><p>不。公钥密码使用方法的魔力意味着攻击者可以观察客户端和服务器之间交换的每一个字节数据，并且仍然不知道你们之间所说的话大致等于多少交换的数据量。然而，你的正常HTTP流量在不安全的Wi-Fi网络上仍然非常脆弱，而且脆弱的网站可能会成为任何数量的解决方案的受害者，这些方法可能会欺骗您通过纯HTTP或在完全错误的地方发送HTTPS流量。例如，即使登录表单通过HTTPS提交用户名/密码组合，如果表单本身通过HTTP安全地加载，那么攻击者可能会在到达您的计算机的途中拦截表单的HTML，在修改后将登录详细信息发送到他们自己的服务器。</p>
<h3 id="4-2_u6211_u7684_u516C_u53F8_u53EF_u4EE5_u901A_u8FC7_u7F51_u7EDC_u76D1_u63A7_u6211_u7684HTTPS_u6D41_u91CF_u5417_uFF1F"><a href="#4-2_u6211_u7684_u516C_u53F8_u53EF_u4EE5_u901A_u8FC7_u7F51_u7EDC_u76D1_u63A7_u6211_u7684HTTPS_u6D41_u91CF_u5417_uFF1F" class="headerlink" title="4.2我的公司可以通过网络监控我的HTTPS流量吗？"></a>4.2我的公司可以通过网络监控我的HTTPS流量吗？</h3><p>如果使用由自己公司控制的机器，那么是可以监控的。请记住，在每个信任链的根源都是一个隐含信任的CA，并且这些权限的列表存储在您的浏览器中。您的公司可以使用他们的机器访问权限，将自己的自签名证书添加到这个CA列表中。然后他们可以拦截您的所有HTTPS请求，提供声称代表相应网站的证书，由他们的假CA签名，因此毫无疑问，您的浏览器信任这些CA签名。由于使用其狡猾的证书的公钥对所有HTTPS请求进行加密，所以可以使用相应的私钥来解密和检查（甚至修改）您的请求，然后将其发送到其预期位置。他们可能不会这样做。但他们可以。<br>顺便提一句，这也是你如何使用代理来检查和修改<a href="http://nickfishman.com/post/50557873036/reverse-engineering-native-apps-by-intercepting-network" target="_blank" rel="external">iPhone应用程序所提供的</a>其他无法访问的HTTPS请求。</p>
<h3 id="4-3_u90A3_u4E48Lavabit_u548C_u8054_u90A6_u8C03_u67E5_u5C40_u600E_u4E48_u4E86_uFF1F"><a href="#4-3_u90A3_u4E48Lavabit_u548C_u8054_u90A6_u8C03_u67E5_u5C40_u600E_u4E48_u4E86_uFF1F" class="headerlink" title="4.3那么Lavabit和联邦调查局怎么了？"></a>4.3那么Lavabit和联邦调查局怎么了？</h3><p>Lavabit是2013年NSA泄漏疯狂期间爱德华·斯诺登（Edward Snowden）的超级安全的电子邮件提供商。正如我们所看到的，无数标准黑客可以允许联邦调查局看到Lavabit和其客户之间的任何数据。没有Lavabit SSL证书的私人密钥，黑客们是不可能监听到这些数据的。然而，一位有益的美国法官告诉Lavaff创始人Ladar Levison，他不得不交出这个钥匙，有效地让联邦调查局自由地监视核心的内容。Levison通过在4点类型的11个硬拷贝页面上交出2,560个字符的键，试图停下来，但是被要求执行一个命令，必须以有用的格式交出私钥，否则将会面对每天5000美元的罚款。<br>一旦他遵守了这个命令，Lavad的CA证书颁发机构GoDaddy就会认为证书被破坏了，就撤销了证书。这将Lavabit证书添加到证书吊销列表（CRL）中，该证书撤销列表（CRL）是客户端不再信任以提供安全连接的可信证书的列表。妥协的结果，自签名或其他不可信任的证书导致浏览器显示一个大的红色错误消息，并且阻止或彻底禁止用户进一步的操作。不幸的是，浏览器将继续信任破坏的证书，直到它们将最新的更新提交给CRL，这个过程在实践中显然是<a href="https://news.netcraft.com/archives/2013/05/13/how-certificate-revocation-doesnt-work-in-practice.html" target="_blank" rel="external">不完美的</a>。</p>
<h2 id="5-_u7ED3_u8BBA"><a href="#5-_u7ED3_u8BBA" class="headerlink" title="5.结论"></a>5.结论</h2><p>HTTPS不是不可破解的，SSL协议必须不断发展，因为对其的新攻击一直在快速的<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Attacks_against_TLS.2FSSL" target="_blank" rel="external">发展演化</a>。但是，如果看不到您的消息，那么传输秘密数据的方式仍然是令人印象深刻的方式。当然，这里没有提及许多实现细节，例如握手消息的确切格式和顺序，缩短的握手来接收最近的会话而不必重新协商密钥和密码套件，以及每个阶段可用的许多不同的加密选项。要记住的关键是，尽管HTTPS将数据安全地保护到目的地，但绝对不会对您（作为用户或开发人员），保护您免受XSS或数据库泄漏或任何其他事情造成的严重影响。时刻保持警惕。 在威尔·史密斯的不朽言辞中，“在黑暗中行走，要时刻注意，防止突发的暴力。”。<br>如果你喜欢这片文章，你可能会喜欢我的另一篇文章<a href="http://robertheaton.com/2015/04/06/the-ssl-freak-vulnerability/" target="_blank" rel="external">解释SSL2015年FREAK漏洞的细节</a>。</p>
<h2 id="u539F_u6587_u5730_u5740"><a href="#u539F_u6587_u5730_u5740" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="http://robertheaton.com/2014/03/27/how-does-https-actually-work/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=ios" target="_blank" rel="external">How does HTTPS actually work?</a></p>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><font size="4" face="黑体"> 《图解HTTP》 </font>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS只是标准HTTP协议涂上一层美味的SSL/TLS加密信息。 除非出现严重错误,它可以防止人们因&lt;a href=&quot;https://en.wikipedia.org/wiki/Alice_and_Bob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="HTTPS" scheme="http://XibHe.github.io/tags/HTTPS/"/>
    
      <category term="HTTPS的工作原理" scheme="http://XibHe.github.io/tags/HTTPS%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>iOS下的图形绘制</title>
    <link href="http://XibHe.github.io/2017/04/24/Graphics-rendering/"/>
    <id>http://XibHe.github.io/2017/04/24/Graphics-rendering/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2017-06-22T12:47:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u56FE_u5F62_u7ED8_u5236"><a href="#u56FE_u5F62_u7ED8_u5236" class="headerlink" title="图形绘制"></a>图形绘制</h2><p>iOS系统本身提供了两套绘图的框架，即<font color="#FA8072">UIBezierPath</font> 和<font color="#FA8072"> Core Graphics</font>。而前者所属UIKit，其实是对Core Graphics框架关于path的进一步封装，所以使用起来比较简单。但是毕竟Core Graphics更接近底层，所以它更加强大。</p>
<h3 id="UIBezierPath"><a href="#UIBezierPath" class="headerlink" title="UIBezierPath"></a>UIBezierPath</h3><p>UIKit中的UIBezierPath是Core Graphics框架关于path的一个封装。可以创建基于矢量的路径，例如椭圆或者矩形，或者有多个直线和曲线段组成的形状。我们可以用moveToPoint: 和 addLineToPoint:方法去构建。moveToPoint:设置我们想要创建形状的起点。从这点开始，我们可以用方法addLineToPoint:去创建一个形状的线段。我们可以连续的创建line，每一个line的起点都是先前的终点，终点就是指定的点。closePath可以在最后一个点和第一个点之间画一条线段。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(CGRect)rect</span><br><span class="line">&#123;</span><br><span class="line">    UIColor *color = [UIColor colorWithRed:<span class="number">0</span> green:<span class="number">0.7</span> blue:<span class="number">0</span> alpha:<span class="number">1</span>];</span><br><span class="line">    [color <span class="built_in">set</span>];</span><br><span class="line"></span><br><span class="line">    UIBezierPath* aPath = [UIBezierPath bezierPath];</span><br><span class="line">    aPath.lineWidth = <span class="number">5.0</span>;</span><br><span class="line"></span><br><span class="line">    aPath.lineCapStyle = kCGLineCapRound;</span><br><span class="line">    aPath.lineJoinStyle = kCGLineCapRound;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    [aPath moveToPoint:CGPointMake(<span class="number">100.0</span>, <span class="number">0.0</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制线条</span></span><br><span class="line">    [aPath addLineToPoint:CGPointMake(<span class="number">200.0</span>, <span class="number">40.0</span>)];</span><br><span class="line">    [aPath addLineToPoint:CGPointMake(<span class="number">160</span>, <span class="number">140</span>)];</span><br><span class="line">    [aPath addLineToPoint:CGPointMake(<span class="number">40.0</span>, <span class="number">140</span>)];</span><br><span class="line">    [aPath addLineToPoint:CGPointMake(<span class="number">0.0</span>, <span class="number">40.0</span>)];</span><br><span class="line">    [aPath closePath];<span class="comment">//第五条线通过调用closePath方法得到的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据坐标点连线</span></span><br><span class="line">    [aPath stroke];</span><br><span class="line">    [aPath fill];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="UIBezierPath+CAShapeLayer"><a href="#UIBezierPath+CAShapeLayer" class="headerlink" title="UIBezierPath+CAShapeLayer"></a>UIBezierPath+CAShapeLayer</h3><p>CAShapeLayer 继承自 CALayer ，因此，可使用 CALayer 的所有属性。但是， CAShapeLayer 需要和贝塞尔曲线配合使用才有意义。<br>查看官网说明:</p>
<blockquote>
<p>/* The shape layer draws a cubic Bezier spline in its coordinate space.</p>
<ul>
<li>The spline is described using a CGPath object and may have both fill</li>
<li>and stroke components (in which case the stroke is composited over</li>
<li>the fill). The shape as a whole is composited between the layer’s</li>
<li>contents and its first sublayer.<br>*/</li>
</ul>
</blockquote>
<p>这里是说 CAShapeLayer 是在其坐标系统内绘制贝塞尔曲线的。因此，使用 CAShapeLayer 需要与 UIBezierPath 一起使用。它有一个 path 属性，而 UIBezierPath 就是对 CGPathRef 类型的封装，因此这两者要配合起来用。</p>
<h3 id="CAShapeLayer_u4E0EdrawRect_u7684_u5173_u7CFB"><a href="#CAShapeLayer_u4E0EdrawRect_u7684_u5173_u7CFB" class="headerlink" title="CAShapeLayer与drawRect的关系"></a>CAShapeLayer与drawRect的关系</h3><ul>
<li>drawRect ：属于 CoreGraphics 框架，占用 CPU ，性能消耗大，不建议重写</li>
<li>CAShapeLayer ：属于 CoreAnimation 框架，通过 GPU 来渲染图形，节省性能。动画渲染直接提交给手机 GPU ，不消耗内存<br>这两者各有各的用途，而不是说有了 CAShapeLayer 就不需要 drawRect。<br>温馨提示：drawRect只是一个方法而已，是 UIView 的方法，重写此方法可以完成我们的绘制图形功能。</li>
</ul>
<h3 id="CAShapeLayer_u4E0EUIBezierPath_u7684_u5173_u7CFB"><a href="#CAShapeLayer_u4E0EUIBezierPath_u7684_u5173_u7CFB" class="headerlink" title="CAShapeLayer与UIBezierPath的关系"></a>CAShapeLayer与UIBezierPath的关系</h3><ul>
<li>CAShapeLayer中shape代表形状的意思，所以需要形状才能生效</li>
<li>贝塞尔曲线可以创建基于矢量的路径，而UIBezierPath类是对CGPathRef的封装</li>
<li>贝塞尔曲线给CAShapeLayer提供路径,CAShapeLayer在提供的路径中进行渲染。路径会闭环,所以绘制出了Shape</li>
<li>用于CAShapeLayer的贝塞尔曲线作为path，其path是一个首尾相接的闭环的曲线，即使该贝塞尔曲线不是一个闭环的曲线</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    _triangleView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(screenWidth / <span class="number">4</span>, <span class="number">200</span>, screenWidth / <span class="number">2</span>, screenHeight / <span class="number">2</span>)];</span><br><span class="line">    _triangleView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:_triangleView];</span><br><span class="line">    _triangleView<span class="variable">.layer</span><span class="variable">.mask</span> = [<span class="keyword">self</span> createMaskLayerWithView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CALayer</span> *)createMaskLayerWithView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> viewWidth = <span class="built_in">CGRectGetWidth</span>(_triangleView<span class="variable">.frame</span>);</span><br><span class="line">    <span class="built_in">CGFloat</span> viewHeight = <span class="built_in">CGRectGetHeight</span>(_triangleView<span class="variable">.frame</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> rightSpace = <span class="number">10.</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> topSpace = <span class="number">15.</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    <span class="built_in">CGPoint</span> point1 = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绘制线条</span></span><br><span class="line">    <span class="built_in">CGPoint</span> point2 = <span class="built_in">CGPointMake</span>(viewWidth-rightSpace, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">CGPoint</span> point3 = <span class="built_in">CGPointMake</span>(viewWidth-rightSpace, topSpace);</span><br><span class="line">    <span class="built_in">CGPoint</span> point4 = <span class="built_in">CGPointMake</span>(viewWidth, topSpace);</span><br><span class="line">    <span class="built_in">CGPoint</span> point5 = <span class="built_in">CGPointMake</span>(viewWidth-rightSpace, topSpace+<span class="number">10.</span>);</span><br><span class="line">    <span class="built_in">CGPoint</span> point6 = <span class="built_in">CGPointMake</span>(viewWidth-rightSpace, viewHeight);</span><br><span class="line">    <span class="built_in">CGPoint</span> point7 = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, viewHeight);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path moveToPoint:point1];</span><br><span class="line">    [path addLineToPoint:point2];</span><br><span class="line">    [path addLineToPoint:point3];</span><br><span class="line">    [path addLineToPoint:point4];</span><br><span class="line">    [path addLineToPoint:point5];</span><br><span class="line">    [path addLineToPoint:point6];</span><br><span class="line">    [path addLineToPoint:point7];</span><br><span class="line">    [path closePath];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    layer<span class="variable">.path</span> = path<span class="variable">.CGPath</span>;</span><br><span class="line">    <span class="keyword">return</span> layer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CoreGraphics"><a href="#CoreGraphics" class="headerlink" title="CoreGraphics"></a>CoreGraphics</h2><p>这是一个绘图专用的API族，它经常被称为QuartZ或QuartZ 2D。Core Graphics是iOS上所有绘图功能的基石，包括UIKit，Core Graphics是高度集成于UIView和其他UIKit部分，Core Graphics数据结构和函数可以通过前缀CG来识别。</p>
<p>步骤:</p>
<ul>
<li>1.先在drawRect方法中获得上下文context；</li>
<li>2.绘制图形（线，图形，图片等）；</li>
<li>3.设置一些修饰属性；</li>
<li>4.渲染到上下文，完成绘图。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGContextRef</span> c = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextSetRGBStrokeColor</span>(c, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);	<span class="comment">// black</span></span><br><span class="line">    <span class="built_in">CGContextSetLineWidth</span>(c, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">CGMutablePathRef</span> bubblePath = <span class="built_in">CGPathCreateMutable</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里的点是三角形的尖尖</span></span><br><span class="line">    <span class="built_in">CGPathMoveToPoint</span>(bubblePath, <span class="literal">NULL</span>, <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.x</span> / <span class="number">2</span>, <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.origin</span><span class="variable">.y</span>);</span><br><span class="line">    <span class="comment">// 其中的一条边的终点</span></span><br><span class="line">    <span class="built_in">CGPathAddLineToPoint</span>(bubblePath, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.height</span> / <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 另一条边的终点</span></span><br><span class="line">    <span class="built_in">CGPathAddLineToPoint</span>(bubblePath, <span class="literal">NULL</span>, <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.height</span> / <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGPathCloseSubpath</span>(bubblePath);</span><br><span class="line">    <span class="built_in">CGContextSaveGState</span>(c);</span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(c, bubblePath);</span><br><span class="line">    <span class="built_in">CGContextClip</span>(c);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(c, [[<span class="built_in">UIColor</span> blueColor] <span class="built_in">CGColor</span>]);</span><br><span class="line">    <span class="built_in">CGContextFillRect</span>(c, <span class="keyword">self</span><span class="variable">.bounds</span>);</span><br><span class="line">    <span class="built_in">CGPathRelease</span>(bubblePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意事项:</p>
<ul>
<li>1.绘图需要 CGContextRef,CGContextRef即图形上下文。可以这么理解，我们绘图是需要一个载体或者说输出目标，它用来显示绘图信息，并且决定绘制的东西输出到哪个地方。可以形象的比喻context就像一个“画板”，我们得把图形绘制到这个画板上。所以，绘图必须要先有context;</li>
<li>2.并不是说一提到绘图，就一定得重写drawRect方法，只是因为通常情况下我们一般采用在drawRect方法里获取context这种方式。</li>
<li>drawRect方法什么时候触发?当view第一次显示到屏幕上时;当调用view的setNeedsDisplay或者setNeedsDisplayInRect:方法时。</li>
</ul>
<h3 id="CGContextAddArcToPoint__26amp_3B_26amp_3B_CGPathAddArcToPoint"><a href="#CGContextAddArcToPoint__26amp_3B_26amp_3B_CGPathAddArcToPoint" class="headerlink" title="CGContextAddArcToPoint &amp;&amp; CGPathAddArcToPoint"></a>CGContextAddArcToPoint &amp;&amp; CGPathAddArcToPoint</h3><p>CGContextAddArcToPoint与CGPathAddArcToPoint这两函数是根据两切线及角度来画弧度,设置弧度CGFloat radius。</p>
<p>画一个四个角都是圆角的矩形,<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    [<span class="keyword">self</span> drawArcToPoint2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawArcToPoint2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建CGContextRef</span></span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span><span class="variable">.view</span><span class="variable">.bounds</span><span class="variable">.size</span>);</span><br><span class="line">    <span class="built_in">CGContextRef</span> gc = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//===绘画逻辑 ===</span></span><br><span class="line">    <span class="comment">//创建用于转移坐标的Transform,如许我们不消遵守实际显示做坐标策画</span></span><br><span class="line">    <span class="built_in">CGAffineTransform</span> transform = <span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//创建CGMutablePathRef</span></span><br><span class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</span><br><span class="line">    <span class="comment">//半径为10</span></span><br><span class="line">    <span class="built_in">CGFloat</span> radius = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始点为(10, 0),起点要从10开始，否则，在左上角会出现线条</span></span><br><span class="line">    <span class="built_in">CGPathMoveToPoint</span>(path, &amp;transform, <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//右上角和右下角两个点,画出半个圆角</span></span><br><span class="line">    <span class="built_in">CGPathAddArcToPoint</span>(path, &amp;transform,<span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>, radius);</span><br><span class="line">    <span class="comment">//右下角,画出别的半个圆角</span></span><br><span class="line">    <span class="built_in">CGPathAddArcToPoint</span>(path, &amp;transform,<span class="number">200</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, radius);</span><br><span class="line">    <span class="comment">//左下角</span></span><br><span class="line">    <span class="built_in">CGPathAddArcToPoint</span>(path, &amp;transform,<span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>,<span class="number">0</span>, radius);</span><br><span class="line">    <span class="comment">//左上角</span></span><br><span class="line">    <span class="built_in">CGPathAddArcToPoint</span>(path, &amp;transform,<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, radius);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将CGMutablePathRef添加到当前Context内</span></span><br><span class="line">    <span class="built_in">CGContextAddPath</span>(gc, path);</span><br><span class="line">    [[<span class="built_in">UIColor</span> grayColor] setFill];</span><br><span class="line">    [[<span class="built_in">UIColor</span> blueColor] setStroke];</span><br><span class="line">    <span class="built_in">CGContextSetLineWidth</span>(gc,<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//履行绘画</span></span><br><span class="line">    <span class="built_in">CGContextDrawPath</span>(gc,k<span class="built_in">CGPathFillStroke</span>);</span><br><span class="line">    <span class="comment">//从Context中获取图像,并显示在界面上</span></span><br><span class="line">    <span class="built_in">UIImage</span> *img = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="built_in">UIImageView</span> *imgView = [[<span class="built_in">UIImageView</span> alloc] initWithImage:img];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:imgView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="CAShapedLayer_u5904_u7406"><a href="#CAShapedLayer_u5904_u7406" class="headerlink" title="CAShapedLayer处理"></a>CAShapedLayer处理</h3><p>理论上我们可以构造出任意想要的形状，但是有些形状如果你不熟悉几何知识的话是构造不出正确path的，从代码上我们可以看到我们可以通过设置CALayer的contents属性来设置显示的内容，那我们是不是可以通过设置CAShapedLayer的contents来设maskLayer呢？答案是肯定的，代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setup4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CAShapeLayer</span> *maskLayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    maskLayer<span class="variable">.fillColor</span> = [<span class="built_in">UIColor</span> blackColor]<span class="variable">.CGColor</span>;</span><br><span class="line">    maskLayer<span class="variable">.strokeColor</span> = [<span class="built_in">UIColor</span> clearColor]<span class="variable">.CGColor</span>;</span><br><span class="line">    maskLayer<span class="variable">.frame</span> = <span class="keyword">self</span><span class="variable">.bounds</span>;</span><br><span class="line">    maskLayer<span class="variable">.contentsCenter</span> = <span class="built_in">CGRectMake</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">0.1</span>);</span><br><span class="line">    maskLayer<span class="variable">.contentsScale</span> = [<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.scale</span>;                 <span class="comment">//非常关键设置自动拉伸的效果且不变形</span></span><br><span class="line">    maskLayer<span class="variable">.contents</span> = (<span class="keyword">id</span>)[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"gray_bubble_right@2x.png"</span>]<span class="variable">.CGImage</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CALayer</span> *contentLayer = [<span class="built_in">CALayer</span> layer];</span><br><span class="line">    contentLayer<span class="variable">.mask</span> = _maskLayer;</span><br><span class="line">    contentLayer<span class="variable">.frame</span> = <span class="keyword">self</span><span class="variable">.bounds</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.layer</span> addSublayer:_contentLayer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u9057_u7559_u95EE_u9898"><a href="#u9057_u7559_u95EE_u9898" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>使用CGPathAddArcToPoint绘制带有箭头的弹窗菜单,如图，<br><img src="http://odchyrav4.bkt.clouddn.com/814765ED-432C-4614-87DF-4A275E136BF8.png" alt="弹窗菜单"></p>
<p>在绘制四个边的圆角时，无法对应到特定的四个角的位置，导致绘制不出该效果的图片。</p>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.jianshu.com/p/bbb2cc485a45" target="_blank" rel="external">绘图</a></li>
<li><a href="http://www.tuicool.com/articles/ZrimEnA" target="_blank" rel="external">iOS CAShapeLayer精讲</a></li>
<li><a href="http://www.jianshu.com/p/8e6e960eea7d" target="_blank" rel="external">iOS绘图—— UIBezierPath 和 Core Graphics</a></li>
<li><a href="http://blog.csdn.net/leochang130731/article/details/25566329" target="_blank" rel="external">CGPathAddArc vs CGPathAddArcToPoint</a></li>
<li><a href="http://blog.csdn.net/u012160319/article/details/44835353" target="_blank" rel="external">CGContextAddArcToPoint与CGPathAddArcToPoint</a></li>
<li><a href="http://www.tuicool.com/articles/32mU7fj" target="_blank" rel="external">iOS 不规则的ImageView</a></li>
<li><a href="http://stackoverflow.com/questions/78127/cgpathaddarc-vs-cgpathaddarctopoint" target="_blank" rel="external">CGPathAddArc vs CGPathAddArcToPoint
</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u56FE_u5F62_u7ED8_u5236&quot;&gt;&lt;a href=&quot;#u56FE_u5F62_u7ED8_u5236&quot; class=&quot;headerlink&quot; title=&quot;图形绘制&quot;&gt;&lt;/a&gt;图形绘制&lt;/h2&gt;&lt;p&gt;iOS系统本身提供了两套绘图的框架，即&lt;font
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="CGPathAddArcToPoint" scheme="http://XibHe.github.io/tags/CGPathAddArcToPoint/"/>
    
      <category term="CGPathAddLineToPoint" scheme="http://XibHe.github.io/tags/CGPathAddLineToPoint/"/>
    
      <category term="UIBezierPath" scheme="http://XibHe.github.io/tags/UIBezierPath/"/>
    
      <category term="图形绘制" scheme="http://XibHe.github.io/tags/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Harden your mind</title>
    <link href="http://XibHe.github.io/2017/03/31/Harden-your-mind/"/>
    <id>http://XibHe.github.io/2017/03/31/Harden-your-mind/</id>
    <published>2017-03-30T16:00:00.000Z</published>
    <updated>2017-06-22T12:48:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间看了casa的直播《闲话iOS架构》，收看直播时，很多人在聊天里发言询问<font color="#FA8072">迅速提高技术有什么捷径</font>?而casa的回答是<font color="#FA8072">多想多练</font>。casa直播背景是一个书架，书架上摆满了书，中途一直有人发消息询问大神背后的书架都有什么书？给我最直观的感觉是大家很浮躁，总是想通过一种事半功倍的方式快速摘取成功果实，却忽略了平时的积累，正是这些小的积累，造就大的爆发。</p>
<p>《闲话iOS架构》提到的内容如下:</p>
<blockquote>
<ul>
<li>1.《批判性思维》</li>
<li>2.高效烧脑，低效伤身.</li>
<li>3.protocol,categary</li>
<li>4.注释一般写在垃圾代码那里。剩下的都是代码自注释</li>
<li>5.极致了，怎么保证扩展性?并不矛盾</li>
<li>6.框架ctmater?</li>
<li>7.reactive cocoa</li>
<li>8.APImanager</li>
<li>9.组件化</li>
<li>10.class template</li>
<li>12.OCLink 可以部分review</li>
<li>13.有if就要有else,逻辑上的，思维考虑的对称，不是强制代码必须要这样做</li>
<li>14.以前一直用shell  现在用swift REPL </li>
<li>15.架构的限制是指规范</li>
<li>16.组件化和模块化到底怎么区分，一个东东的不同叫法，实际上应该叫模块化</li>
<li>17.《Cocoa设计模式》</li>
<li>18.如何看待新技术, mvvm，Reactive cocoa，rac</li>
<li>19.没有最全面的技术，只有最合适的技术。</li>
<li>20.CTMediator组件化方案</li>
<li>21.CTNetwokring和YTKNetworking，离散型，集约型</li>
<li>22.codeReview</li>
<li>23.继承的缺点，破坏了代码结构</li>
<li>24.RN,weex</li>
<li>25.复用的东西拆成组件</li>
<li>26.《The Art of Capacity Planning》</li>
<li>27.腾讯开源的Mars,引出大一统和多元化，</li>
<li>28.网易，无埋点打log，网易乐得无埋点数据收集sdk</li>
</ul>
</blockquote>
<p>casa所讲的内容多是通过平时代码积累得来的方法论，如果没有一定的代码积累和长期的项目实践是很难彻底理解这些内容的。iOS应用架构看着很高大上，但需要在牢固的基础之上一层层堆砌成高楼。忽视这些必要的步骤，一味粉饰自己，到头来也只是黄粱一梦一场空。再回过头来看目前国内知识付费现象，觉得是一个泡沫。正如知乎上所说，<font color="#FA8072">知识付费，抓的不是人的求知欲，抓的是人的焦虑感</font>。人们焦虑，希望有人告诉他们捷径，如何更快的获得成功。<font color="#FA8072">这里莫名的想到成功学，成功的永远是成功学的讲师。当代知识产品最大的痛点就是:不看书。</font></p>
<p>我们急切的接受别人输出的价值观，却选择性的忽略掉自己的内心真正的诉求。书上得来总觉浅，听人道出方觉深，互补的只是不愿意努力看书或是去实践的懒惰。知识经济本质上就是粉丝经济的另一种表现形式。最后，还是想强调一下，作为一名攻城狮通过解决日常遇到的问题，或由浅而深，或发散思维都可以一步步引导至问题的核心。切忌自以为是，舍本逐末。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间看了casa的直播《闲话iOS架构》，收看直播时，很多人在聊天里发言询问&lt;font color=&quot;#FA8072&quot;&gt;迅速提高技术有什么捷径&lt;/font&gt;?而casa的回答是&lt;font color=&quot;#FA8072&quot;&gt;多想多练&lt;/font&gt;。casa直播背景是一个书架
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Harden your mind" scheme="http://XibHe.github.io/tags/Harden-your-mind/"/>
    
      <category term="知识付费" scheme="http://XibHe.github.io/tags/%E7%9F%A5%E8%AF%86%E4%BB%98%E8%B4%B9/"/>
    
  </entry>
  
  <entry>
    <title>待办事项提醒功能开发(二)</title>
    <link href="http://XibHe.github.io/2017/03/15/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91(%E4%BA%8C)/"/>
    <id>http://XibHe.github.io/2017/03/15/待办事项提醒功能开发(二)/</id>
    <published>2017-03-15T09:01:00.000Z</published>
    <updated>2017-06-22T12:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u65B0_u5EFA_u6570_u636E_u5E93"><a href="#u65B0_u5EFA_u6570_u636E_u5E93" class="headerlink" title="新建数据库"></a>新建数据库</h2><h2 id="u5165_u5E93_u64CD_u4F5C"><a href="#u5165_u5E93_u64CD_u4F5C" class="headerlink" title="入库操作"></a>入库操作</h2><h2 id="u754C_u9762_u7ED8_u5236"><a href="#u754C_u9762_u7ED8_u5236" class="headerlink" title="界面绘制"></a>界面绘制</h2><h2 id="u901A_u77E5log_u8868"><a href="#u901A_u77E5log_u8868" class="headerlink" title="通知log表"></a>通知log表</h2><h2 id="u6CE8_u610F_u4E8B_u9879"><a href="#u6CE8_u610F_u4E8B_u9879" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>时间转化的时区设置</li>
<li>最近的本地通知最多只能有64个(待测试)</li>
<li>过期通知的移除(不做移除，通过通知的自有机制去处理的可行性)</li>
<li>生产日期，到期日，保质期天数的交互</li>
<li>奇妙清单的到期提醒只与提醒时间和频率有关，与是否到期无关</li>
<li>iOS 10之后的推送</li>
</ul>
<h1 id="Demo_u5730_u5740"><a href="#Demo_u5730_u5740" class="headerlink" title="Demo地址"></a>Demo地址</h1><p><a href="https://github.com/XibHe/ToDoList" target="_blank" rel="external">点击下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u65B0_u5EFA_u6570_u636E_u5E93&quot;&gt;&lt;a href=&quot;#u65B0_u5EFA_u6570_u636E_u5E93&quot; class=&quot;headerlink&quot; title=&quot;新建数据库&quot;&gt;&lt;/a&gt;新建数据库&lt;/h2&gt;&lt;h2 id=&quot;u5165
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="开源" scheme="http://XibHe.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="待办事项提醒" scheme="http://XibHe.github.io/tags/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92/"/>
    
  </entry>
  
  <entry>
    <title>待办事项提醒功能开发(一)</title>
    <link href="http://XibHe.github.io/2017/03/13/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91(%E4%B8%80)/"/>
    <id>http://XibHe.github.io/2017/03/13/待办事项提醒功能开发(一)/</id>
    <published>2017-03-13T14:50:06.000Z</published>
    <updated>2017-06-22T13:56:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="u4E1A_u52A1_u9700_u6C42"><a href="#u4E1A_u52A1_u9700_u6C42" class="headerlink" title="业务需求"></a>业务需求</h1><p>根据用户所添加某件商品的生产日期和保质期天数计算商品的过期日期，在过期前的时间内，用户可以设置提醒的具体时间点和提醒频次，系统根据用户设置的提醒时间和提醒频次通知用户某某商品该使用了。具体操作步骤如下:</p>
<ul>
<li>新增一个提醒事项的名称，这个名称将作为待完成事项显示在任务列表中，可以快速勾选完成；</li>
<li>在保质期限一栏，点击生产日期一栏，弹出年月日的日期选择器用于日期的选择；</li>
<li>点击保质期天数一栏，弹出用于输入保质期天数的输入控件，保质期单位可以是天，月，年；</li>
<li>如果保质期为30天以内，默认开启智能保质期提醒；如果超过30天，则关闭智能提醒，需要有手动设置结束提醒的具体时间及提醒频率；</li>
<li>在提醒设置一栏，根据生产日期和保质期天数自动计算出到期的具体日期，用户点击时间一栏，弹出时间的选择控件用于选择触发提醒的时间点，用户也可以设置提醒频次；</li>
</ul>
<h1 id="u9700_u8981_u8003_u8651_u7684_u6280_u672F_u70B9"><a href="#u9700_u8981_u8003_u8651_u7684_u6280_u672F_u70B9" class="headerlink" title="需要考虑的技术点"></a>需要考虑的技术点</h1><p>结合需求需要考虑如下几个问题:</p>
<ul>
<li>本地通知的运行机制是什么？</li>
<li>如何自定义通知的频率？</li>
<li>如何移除到期的通知提醒？</li>
<li>当用户编辑一个已经存在的提醒任务时，如何根据用户修改后的日期，频率等参数，更新现有的通知提醒频次，触发时间，日期等属性？</li>
<li>当切换用户或者用户退出登录后，如何操作之前已经添加的通知提醒？</li>
<li>通知提醒数据的持久化？</li>
</ul>
<h1 id="u672C_u5730_u901A_u77E5_u76F8_u5173_u70B9"><a href="#u672C_u5730_u901A_u77E5_u76F8_u5173_u70B9" class="headerlink" title="本地通知相关点"></a>本地通知相关点</h1><p>使用本地通知提醒用户，而本地通知有些地方在使用时需要注意,如下:</p>
<blockquote>
<p>1.本地通知是有操作系统统一调度的，只有在应用退出到后台或者关闭才能收到通知；<br>2.本地通知的数量是有限制的，最近的本地通知最多只能有64个，超过这个数量将被系统忽略；<br>3.如果想要移除本地通知可以调用UIApplication的cancelLocalNotification:或cancelAllLocalNotifications移除指定通知或所有通知；<br>4.通知对应的NScalendarunit属性，可以通过该属性操作提醒的频率；</p>
</blockquote>
<p>NScalendarunit的具体属性如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NS_OPTIONS</span><span class="params">(NSUInteger, NSCalendarUnit)</span> </span>&#123;</span><br><span class="line">        NSCalendarUnitEra                = kCFCalendarUnitEra,</span><br><span class="line">        NSCalendarUnitYear               = kCFCalendarUnitYear,</span><br><span class="line">        NSCalendarUnitMonth              = kCFCalendarUnitMonth,</span><br><span class="line">        NSCalendarUnitDay                = kCFCalendarUnitDay,</span><br><span class="line">        NSCalendarUnitHour               = kCFCalendarUnitHour,</span><br><span class="line">        NSCalendarUnitMinute             = kCFCalendarUnitMinute,</span><br><span class="line">        NSCalendarUnitSecond             = kCFCalendarUnitSecond,</span><br><span class="line">        NSCalendarUnitWeekday            = kCFCalendarUnitWeekday,</span><br><span class="line">        NSCalendarUnitWeekdayOrdinal     = kCFCalendarUnitWeekdayOrdinal,</span><br><span class="line">        <span class="function">NSCalendarUnitQuarter            <span class="title">NS_ENUM_AVAILABLE</span><span class="params">(<span class="number">10</span>_6, <span class="number">4</span>_0)</span> </span>= kCFCalendarUnitQuarter,</span><br><span class="line">        <span class="function">NSCalendarUnitWeekOfMonth        <span class="title">NS_ENUM_AVAILABLE</span><span class="params">(<span class="number">10</span>_7, <span class="number">5</span>_0)</span> </span>= kCFCalendarUnitWeekOfMonth,</span><br><span class="line">        <span class="function">NSCalendarUnitWeekOfYear         <span class="title">NS_ENUM_AVAILABLE</span><span class="params">(<span class="number">10</span>_7, <span class="number">5</span>_0)</span> </span>= kCFCalendarUnitWeekOfYear,</span><br><span class="line">        <span class="function">NSCalendarUnitYearForWeekOfYear  <span class="title">NS_ENUM_AVAILABLE</span><span class="params">(<span class="number">10</span>_7, <span class="number">5</span>_0)</span> </span>= kCFCalendarUnitYearForWeekOfYear,</span><br><span class="line">        <span class="function">NSCalendarUnitNanosecond         <span class="title">NS_ENUM_AVAILABLE</span><span class="params">(<span class="number">10</span>_7, <span class="number">5</span>_0)</span> </span>= (<span class="number">1</span> &lt;&lt; <span class="number">15</span>),</span><br><span class="line">        <span class="function">NSCalendarUnitCalendar           <span class="title">NS_ENUM_AVAILABLE</span><span class="params">(<span class="number">10</span>_7, <span class="number">4</span>_0)</span> </span>= (<span class="number">1</span> &lt;&lt; <span class="number">20</span>),</span><br><span class="line">        <span class="function">NSCalendarUnitTimeZone           <span class="title">NS_ENUM_AVAILABLE</span><span class="params">(<span class="number">10</span>_7, <span class="number">4</span>_0)</span> </span>= (<span class="number">1</span> &lt;&lt; <span class="number">21</span>),</span><br><span class="line"></span><br><span class="line">	<span class="function">NSEraCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitEra instead"</span>)</span> </span>= NSCalendarUnitEra,</span><br><span class="line">	<span class="function">NSYearCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitYear instead"</span>)</span> </span>= NSCalendarUnitYear,</span><br><span class="line">	<span class="function">NSMonthCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitMonth instead"</span>)</span> </span>= NSCalendarUnitMonth,</span><br><span class="line">	<span class="function">NSDayCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitDay instead"</span>)</span> </span>= NSCalendarUnitDay,</span><br><span class="line">	<span class="function">NSHourCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitHour instead"</span>)</span> </span>= NSCalendarUnitHour,</span><br><span class="line">	<span class="function">NSMinuteCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitMinute instead"</span>)</span> </span>= NSCalendarUnitMinute,</span><br><span class="line">	<span class="function">NSSecondCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitSecond instead"</span>)</span> </span>= NSCalendarUnitSecond,</span><br><span class="line">	<span class="function">NSWeekCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitWeekOfMonth or NSCalendarUnitWeekOfYear, depending on which you mean"</span>)</span> </span>= kCFCalendarUnitWeek,</span><br><span class="line">	<span class="function">NSWeekdayCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitWeekday instead"</span>)</span> </span>= NSCalendarUnitWeekday,</span><br><span class="line">	<span class="function">NSWeekdayOrdinalCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_4, <span class="number">10</span>_10, <span class="number">2</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitWeekdayOrdinal instead"</span>)</span> </span>= NSCalendarUnitWeekdayOrdinal,</span><br><span class="line">	<span class="function">NSQuarterCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_6, <span class="number">10</span>_10, <span class="number">4</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitQuarter instead"</span>)</span> </span>= NSCalendarUnitQuarter,</span><br><span class="line">	<span class="function">NSWeekOfMonthCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_7, <span class="number">10</span>_10, <span class="number">5</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitWeekOfMonth instead"</span>)</span> </span>= NSCalendarUnitWeekOfMonth,</span><br><span class="line">	<span class="function">NSWeekOfYearCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_7, <span class="number">10</span>_10, <span class="number">5</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitWeekOfYear instead"</span>)</span> </span>= NSCalendarUnitWeekOfYear,</span><br><span class="line">	<span class="function">NSYearForWeekOfYearCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_7, <span class="number">10</span>_10, <span class="number">5</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitYearForWeekOfYear instead"</span>)</span> </span>= NSCalendarUnitYearForWeekOfYear,</span><br><span class="line">	<span class="function">NSCalendarCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_7, <span class="number">10</span>_10, <span class="number">4</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitCalendar instead"</span>)</span> </span>= NSCalendarUnitCalendar,</span><br><span class="line">	<span class="function">NSTimeZoneCalendarUnit <span class="title">NS_CALENDAR_ENUM_DEPRECATED</span><span class="params">(<span class="number">10</span>_7, <span class="number">10</span>_10, <span class="number">4</span>_0, <span class="number">8</span>_0, <span class="string">"Use NSCalendarUnitTimeZone instead"</span>)</span> </span>= NSCalendarUnitTimeZone,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="u6B65_u9AA4_u8BF4_u660E"><a href="#u6B65_u9AA4_u8BF4_u660E" class="headerlink" title="步骤说明"></a>步骤说明</h1><p>使用sqlite3进行通知提醒相关数据的持久化。大概的思路如下：</p>
<p>新增提醒任务:</p>
<blockquote>
<p>1.插入保质期提醒任务表<br>2.插入通知表<br>3.插入通知log表<br>4.上传服务器通知提醒数据</p>
</blockquote>
<p>编辑提醒任务：</p>
<blockquote>
<p>1.更新保质期提醒任务表<br>2.更新通知表<br>3.更新通知log表<br>4.上传服务器编辑后的通知提醒数据</p>
</blockquote>
<p><font color="#FA8072"> 需要注意本地通知的官方文档是否有最近的跟新 </font>，待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;u4E1A_u52A1_u9700_u6C42&quot;&gt;&lt;a href=&quot;#u4E1A_u52A1_u9700_u6C42&quot; class=&quot;headerlink&quot; title=&quot;业务需求&quot;&gt;&lt;/a&gt;业务需求&lt;/h1&gt;&lt;p&gt;根据用户所添加某件商品的生产日期和保质期天数计算
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="开源" scheme="http://XibHe.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="待办事项" scheme="http://XibHe.github.io/tags/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>第一次面试别人是怎样的体会</title>
    <link href="http://XibHe.github.io/2017/02/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%88%AB%E4%BA%BA%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E4%BC%9A/"/>
    <id>http://XibHe.github.io/2017/02/26/第一次面试别人是怎样的体会/</id>
    <published>2017-02-25T16:00:00.000Z</published>
    <updated>2017-06-22T12:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u4E0D_u5B89_u7684_u5F00_u59CB"><a href="#u4E0D_u5B89_u7684_u5F00_u59CB" class="headerlink" title="不安的开始"></a>不安的开始</h2><p><img src="http://odchyrav4.bkt.clouddn.com/6KKS~QKHI1B3G_5%7BK09%7DW%7DE.jpg" alt="iOS开发没人要了"><br>自从去年后半年以来，iOS开发相关工作就被唱衰。很多人抱怨裸辞后找不到工作，可谓是哀鸿遍野。看到了太多这样的帖子，身边也有相识的人遭遇了公司解散，失业后迟迟找不到工作的窘境。这也直接导致了我内心的忐忑和不安，不禁要问，iOS从业者的未来在哪里？我又该何去何从呢？这样的疑问，这样的不安，一直伴随着我。在结合别人的现实的遭遇后，分析了一下造成现阶段初级，中级iOS从业者找工作难的原因:</p>
<blockquote>
<ul>
<li>市场过度饱和，培训机构追求自身利益，在iOS开发人员相对稀缺阶段，培训了大量的从业人员，扰乱了市场正常的供需关系，导致从业人员供大于需；</li>
<li>鱼龙混杂的从业者，很多开发者并不是科班出身，只是听说iOS开发者的薪资待遇高，才决定去培训机构学习，经过四五个月左右的强制灌输和培训机构的包装后，摇身一变成了具有两年开发经验的iOS开发者,其本身不具备计算机专业相关的基础知识；</li>
<li>资本市场资金的收紧，导致流向互联网领域的热钱迅速减少，相比前几年互联网行业的创业潮，很多创业者张口闭口我们是颠覆者，一定会替代某某某，只要嘴炮一番就能忽悠到投资人的钱，今年的资本市场回归了理性。那些没有清晰盈利模式的初创公司迅速倒闭，相关中小互联网公司的用人需求在萎缩；</li>
<li>市场需求的理性回归，很多培训班出身，或者工作年限不足三年，或者是一年工作经验用了三年的初中级开发者满足不了市场上很多公司对于中高级开发者相关的技术要求，于是，被市场无情的淘汰；</li>
<li>行业内薪资待遇的降低，iOS开发已经结束了早期因从业者稀少而造成的市场红利时期，进入到了一个稳步发展的相对稳定时期。因此，薪资待遇回归到了一个正常的水准。那些早期享受到这种红利的开发者，一时间接受不了薪资待遇的降低；</li>
<li>技术层面方面，iOS开发依托苹果提供的平台，该平台的封闭性决定了开发者所接触的技术面比较狭窄，脱离了苹果，不能完全胜任其他技术工作；</li>
</ul>
</blockquote>
<h2 id="u6211_u6240_u9047_u5230_u7684_u4E00_u4E2A_u4F8B_u5B50"><a href="#u6211_u6240_u9047_u5230_u7684_u4E00_u4E2A_u4F8B_u5B50" class="headerlink" title="我所遇到的一个例子"></a>我所遇到的一个例子</h2><p>带着这些不安，对于已经结束的16年，我做了一份<a href="http://xibhe.com/2017/01/15/再见！2016/" target="_blank" rel="external">总结</a>，也包括17年的一些计划。或许是心志不坚，或许是颓废太久，这种不安仍旧存在，直到上周面试了一个来公司应聘iOS开发的应聘者……</p>
<p>周五下午，人事和我说能不能帮忙面试一下，本来是另一个项目组需要的人，但恰巧他们的负责人不在，就让我去面了。第一次面试别人还是有些紧张，好像自己第一次被别人面试一样紧张。但左等右等还是等不到人事通知我去面试，后来大概半小时后被人事告知那个来面试的人已经走了，据她说面试题只做了一半，人就走了，可能是被我们的面试题吓走了。但面试题我也看过，是四十道很基础的面试题呀！表示不解啊！本以为这次安排的面试就这样结束了，后来人事通知还有一个已经写完了面试题，在沙发区等着，于是我就开始了这次面试之旅。</p>
<p>短暂的两分钟的沉默，我简单看了一下他的简历，上面工作经验写着三年。心里便盘算着从哪些知识点入手可以探出对方是不是真的有三年工作经验。先是让对方做了一个简单的自我介绍，然后开始对着简历问一些问题，简历上写了四个项目，每个项目所用到的技术都是一些大众化的技术，比如，网络请求库AFNetworking，图片加载库SDWebImage，数据库FMDB，刷新库MJRefresh，适配库Masonry等各种三方库的使用。于是我便问了以下的问题:</p>
<blockquote>
<ul>
<li>NSOperation与GCD的区别</li>
<li>GCD中如何避免死锁和数据竞争</li>
<li>Block的使用及如何避免循环引用</li>
<li>使用过哪些设计模式</li>
<li>单例，什么是单例，单例的作用</li>
<li>内存管理</li>
<li>网络请求库的使用</li>
<li>JS与原生应用是如何交互的</li>
<li>了解过RunTime吗</li>
<li>通知是异步还是同步</li>
<li>该如何对tableView进行优化，实现滑动的流畅性，以及如何避免tableView代理方法中冗长的代码</li>
<li>SDWebImage的运行机制</li>
<li>App中的多用户逻辑</li>
<li>如何实现一个可以循环滚动的轮播图(类似于京东，淘宝首页顶部效果)</li>
<li>给你一个新项目你会怎么做</li>
<li>是否能看一下你的技术博客或是GitHub上的开源项目</li>
</ul>
</blockquote>
<p>对方对上述问题的回答模棱两可，十分的模糊。其中涉及到GCD那块的问题，只说了用过，GCD的如何避免数据竞争和死锁，以及它与NSOperation的区别只是把什么是NSOperation用名词解释了一下，而对于Block的循环引用问题，支支吾吾想了半天回答的文不对题。设计模式是典型的MVC，倒是提到了MVVM，但这里也只是简单的提到，就没有什么下文了。单例的使用，边想边说，整了半天也没有将声明单例的具体方法说明白。内存管理这块，据他说，学iOS开发时MRC已经没人用了，他就直接用的ARC。JS与原生应用交互这块说没有用过。那么RunTime呢?说是底层的东西没有怎么了解过。tableView的优化方面，说是用的原生API的代理方法，这个还需要优化吗?<br>SDWebImage的运行机制，把它的使用方法说了一遍。App中的多用户逻辑，说是服务器的事，客户端不需要考虑。轮播图功能的实现，说的是使用NSTimer。给你一个新项目你会怎么做，说的是先花一周进行需求分析，再新建工程，使用CocoaPods把那些要用到的三方库引入到工程中。问完了这些问题，我还是抱有一丝幻想的，心想也许是太过紧张了，再看看他做的项目吧！</p>
<p>看了下对方手机上他参与开发的项目，是一些与美食推荐相关的项目，有一个已经停止维护，拉取不到任何数据了。剩下的都是一些数据使用tableView展示的普通项目，没有什么逻辑特别复杂或是需要使用很高明技术的功能。自此，我仍然没有放弃，心想或许对方还研究过其他的技术点，于是就问对方，是否能看一下你的技术博客或是GitHub上的开源项目。对方回答说，没有。此刻，我也只能道了两声谢谢，说有结果人事会通知你。心里想着，本来还想问有没有使用过Swift，可是现在看来，已经没有问的必要了。</p>
<h2 id="u7ED3_u675F"><a href="#u7ED3_u675F" class="headerlink" title="结束"></a>结束</h2><p><img src="http://odchyrav4.bkt.clouddn.com/839AC9B0-9D80-47AB-9C9F-5CC1FFB8D0ED.png" alt="v2ex"></p>
<p>红利已经结束了，那个只要会使用tableView等常用控件就能找到工作的时代结束了。<br>曾听一位前辈说过，</p>
<blockquote>
<p>“感觉每个做技术的一开始都是一粒沙子，不断修炼学习吸收营养变成大颗粒的沙子。 再学习其他东西把自己变成土块儿，时间是一把大筛子，每次过滤掉小沙粒，只留大块儿在上面，在你被筛掉之前要么变的比网眼大留下来，要么赶紧被筛掉转行吧!”</p>
</blockquote>
<p>最后来个总结吧！猥琐发育，别浪！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u4E0D_u5B89_u7684_u5F00_u59CB&quot;&gt;&lt;a href=&quot;#u4E0D_u5B89_u7684_u5F00_u59CB&quot; class=&quot;headerlink&quot; title=&quot;不安的开始&quot;&gt;&lt;/a&gt;不安的开始&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="iOS开发没人要了" scheme="http://XibHe.github.io/tags/iOS%E5%BC%80%E5%8F%91%E6%B2%A1%E4%BA%BA%E8%A6%81%E4%BA%86/"/>
    
      <category term="心得体会" scheme="http://XibHe.github.io/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
      <category term="面试" scheme="http://XibHe.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式初探</title>
    <link href="http://XibHe.github.io/2017/02/19/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%88%9D%E6%8E%A2/"/>
    <id>http://XibHe.github.io/2017/02/19/适配器模式初探/</id>
    <published>2017-02-18T20:23:06.000Z</published>
    <updated>2017-07-05T12:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="u521D_u8877"><a href="#u521D_u8877" class="headerlink" title="初衷"></a>初衷</h1><p>解决ViewConctroller里冗余代码过多的问题，将公用模块抽离出来。这里将项目中用到的拍照，调用相册，录像，定位等功能单独抽离出来放在一起。</p>
<h1 id="u4F7F_u7528_u6B65_u9AA4"><a href="#u4F7F_u7528_u6B65_u9AA4" class="headerlink" title="使用步骤"></a>使用步骤</h1><ul>
<li>第一步: 定义一个delegate，用来返回一个遵守该协议的数据，不管传过来的数据是什么类型，只要服从这个协议，实现协议里的方法，就处理这个数据。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">MediaHandleDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)returnMedidaData:(<span class="keyword">id</span>)mediaData;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二步: 创建继承于NSObject的根适配器类MediaHandleAct，该类遵守第一步中的协议，并实现该协议的方法，但只是空实现。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MediaHandleAct.h</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MediaHandleDelegate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MediaHandleAct</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">id</span> &lt;MediaHandleDelegate&gt; _delegate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MediaHandleAct.m</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MediaHandleAct.h"</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)returnMedidaData:(<span class="built_in">NSString</span> *)data&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第三步: 构建根适配器类MediaHandleAct中注册特定Action的方法，并获取注册的Action。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MediaHandleDelegate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MediaHandleAct</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">id</span> &lt;MediaHandleDelegate&gt; _delegate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 动态注册新的Action</span></span><br><span class="line">+ (<span class="keyword">void</span>)registerMediaHandleAction:(MediaHandleAct *)mediaHandleAct andKey:(<span class="built_in">NSString</span> *) actKey;</span><br><span class="line"><span class="comment">// 获取注册的Action</span></span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)mediaHandleActions;</span><br><span class="line"><span class="comment">// 传递Action的具体执行方法</span></span><br><span class="line">- (<span class="keyword">void</span>)performActionWichController:(<span class="built_in">UIViewController</span> *)controller callbackClass:(<span class="built_in">NSObject</span> *)callbackClass;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MediaHandleAct.m</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MediaHandleAct.h"</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSMutableDictionary</span> * mediaHandleActs = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MediaHandleAct</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)registerMediaHandleAction:(MediaHandleAct *)mediaHandleAct andKey:(<span class="built_in">NSString</span> *)actKey</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mediaHandleActs)</span><br><span class="line">        &#123;</span><br><span class="line">            mediaHandleActs = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">            [MediaHandleAct registerCommonAction];</span><br><span class="line">        &#125;</span><br><span class="line">        [mediaHandleActs setObject:mediaHandleAct forKey:actKey];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)mediaHandleActions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> * acts = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mediaHandleActs)</span><br><span class="line">        &#123;</span><br><span class="line">            mediaHandleActs = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">            [MediaHandleAct registerCommonAction];</span><br><span class="line">        &#125;</span><br><span class="line">        acts = mediaHandleActs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> acts;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体的执行方法</span></span><br><span class="line">- (<span class="keyword">void</span>)performActionWichController:(<span class="built_in">UIViewController</span> *)controller callbackClass:(<span class="built_in">NSObject</span> *)callbackClass&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>synchronized   这个主要是考虑多线程的程序，这个指令可以将{ } 内的代码限制在一个线程执行，如果某个线程没有执行完，其他的线程如果需要执行就得等着。@synchronized 的作用是创建一个互斥锁，保证此时没有其它线程对self对象进行修改。这种机制确保了同一时刻对于每一个类，至多只有一个处于可执行状态，从而有效避免了类成员变量的访问冲突。一般在公用变量的时候使用，如单例模式或者操作类的static变量中使用。</p>
<ul>
<li>第四步: 针对不同功能的类，创建继承于MediaHandleAct的类适配器。<br>使用适配器的时候，分为类适配器和对象适配器。类适配器针对每一个数据类型或某个功能模块创建一个适配器，并继承于根适配器。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用相册功能</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MediaHandleAct.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MediaHandleAlbum</span> : <span class="title">MediaHandleAct</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> maxCount;   <span class="comment">// 最多可添加照片数</span></span><br><span class="line"><span class="comment">// 注册Action</span></span><br><span class="line">+ (<span class="keyword">void</span>)load;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MediaHandleAlbum.m</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MediaHandleAlbum.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"JKImagePickerController.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MediaHandleAlbum</span> ()&lt;<span class="title">JKImagePickerControllerDelegate</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIViewController</span> * _parentController;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MediaHandleAlbum</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    [MediaHandleAct registerMediaHandleAction:[[MediaHandleAlbum alloc] init] andKey:<span class="string">@"album"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - 拍照和调用相册功能</span></span><br><span class="line">- (<span class="keyword">void</span>)performActionWichController:(<span class="built_in">UIViewController</span> *)controller callbackClass:(<span class="built_in">NSObject</span> *)callbackClass</span><br><span class="line">&#123;</span><br><span class="line">    _parentController = controller;</span><br><span class="line">    _delegate = (<span class="keyword">id</span>)callbackClass;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIActionSheet</span> *actionSheet = [[<span class="built_in">UIActionSheet</span> alloc] initWithTitle:<span class="literal">nil</span> delegate:(<span class="keyword">id</span>)<span class="keyword">self</span> cancelButtonTitle:<span class="literal">nil</span> destructiveButtonTitle:<span class="literal">nil</span> otherButtonTitles:<span class="string">@"拍照"</span>,<span class="string">@"从相册选择"</span>,<span class="string">@"取消"</span>,<span class="literal">nil</span>];</span><br><span class="line">    [actionSheet showInView:_parentController<span class="variable">.view</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - ActionSheetDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)actionSheet:(<span class="built_in">UIActionSheet</span> *)actionSheet clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (buttonIndex) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 拍照</span></span><br><span class="line">            <span class="built_in">UIImagePickerController</span> *picker = [[<span class="built_in">UIImagePickerController</span> alloc] init];</span><br><span class="line">            picker<span class="variable">.sourceType</span> = <span class="built_in">UIImagePickerControllerSourceTypeCamera</span>;</span><br><span class="line">            picker<span class="variable">.editing</span> = <span class="literal">YES</span>;</span><br><span class="line">            picker<span class="variable">.allowsEditing</span> = <span class="literal">YES</span>;</span><br><span class="line">            picker<span class="variable">.delegate</span> = (<span class="keyword">id</span>)<span class="keyword">self</span>;</span><br><span class="line">            [_parentController presentViewController:picker animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 调用相册</span></span><br><span class="line">            JKImagePickerController *imagePickerController = [[JKImagePickerController alloc] init];</span><br><span class="line">            imagePickerController<span class="variable">.delegate</span> = (<span class="keyword">id</span>)<span class="keyword">self</span>;</span><br><span class="line">            imagePickerController<span class="variable">.showsCancelButton</span> = <span class="literal">YES</span>;</span><br><span class="line">            imagePickerController<span class="variable">.allowsMultipleSelection</span> = <span class="literal">YES</span>;</span><br><span class="line">            imagePickerController<span class="variable">.minimumNumberOfSelection</span> = <span class="number">1</span>;</span><br><span class="line">            imagePickerController<span class="variable">.maximumNumberOfSelection</span> = <span class="keyword">self</span><span class="variable">.maxCount</span>;</span><br><span class="line">            <span class="comment">//imagePickerController.selectedAssetArray = self.photosView.assetsArray;</span></span><br><span class="line">            <span class="built_in">UINavigationController</span> *navigationController = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:imagePickerController];</span><br><span class="line">            [_parentController presentViewController:navigationController animated:<span class="literal">YES</span> completion:<span class="literal">NULL</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - UIImagePickerControllerDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>) imagePickerController: (<span class="built_in">UIImagePickerController</span>*)picker didFinishPickingMediaWithInfo: (<span class="built_in">NSDictionary</span>*) info</span><br><span class="line">&#123;</span><br><span class="line">    [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *edit = [info objectForKey:<span class="string">@"UIImagePickerControllerEditedImage"</span>];</span><br><span class="line">    <span class="built_in">UIImage</span> *originalImage = [info objectForKey:<span class="string">@"UIImagePickerControllerOriginalImage"</span>];</span><br><span class="line">    CLog(<span class="string">@" EditedImage %@ "</span>,<span class="built_in">NSStringFromCGSize</span>(edit<span class="variable">.size</span>));</span><br><span class="line">    CLog(<span class="string">@" OriginalImage %@ "</span>,<span class="built_in">NSStringFromCGSize</span>(originalImage<span class="variable">.size</span>));</span><br><span class="line">    <span class="built_in">UIImage</span> *aImage = edit;</span><br><span class="line">    <span class="built_in">NSData</span> * imageData = <span class="built_in">UIImageJPEGRepresentation</span>(aImage,<span class="number">0.5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_delegate &amp;&amp; [_delegate respondsToSelector:<span class="keyword">@selector</span>(returnMedidaData:)])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> * photos = @[imageData];</span><br><span class="line">        [_delegate returnMedidaData:photos];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)imagePickerControllerDidCancel:(<span class="built_in">UIImagePickerController</span> *)picker</span><br><span class="line">&#123;</span><br><span class="line">    [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - JKImagePickerControllerDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)imagePickerController:(JKImagePickerController *)imagePicker didSelectAsset:(JKAssets *)asset isSource:(<span class="built_in">BOOL</span>)source</span><br><span class="line">&#123;</span><br><span class="line">    [imagePicker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)imagePickerController:(JKImagePickerController *)imagePicker didSelectAssets:(<span class="built_in">NSArray</span> *)assets isSource:(<span class="built_in">BOOL</span>)source</span><br><span class="line">&#123;</span><br><span class="line">    [imagePicker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    CLog(<span class="string">@"assets == %@"</span>,assets);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> * photos = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (JKAssets * jkAssets <span class="keyword">in</span> assets)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSData</span> * photoData = <span class="built_in">UIImageJPEGRepresentation</span>(jkAssets<span class="variable">.photo</span>, <span class="number">0.5</span>);</span><br><span class="line">        [photos addObject:photoData];</span><br><span class="line">        CLog(<span class="string">@"groupPropertyID = %@, groupPropertyURL = %@, assetPropertyURL = %@, photo = %@"</span>,jkAssets<span class="variable">.groupPropertyID</span>,jkAssets<span class="variable">.groupPropertyURL</span>,jkAssets<span class="variable">.assetPropertyURL</span>,jkAssets<span class="variable">.photo</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_delegate &amp;&amp; [_delegate respondsToSelector:<span class="keyword">@selector</span>(returnMedidaData:)])</span><br><span class="line">    &#123;</span><br><span class="line">        [_delegate returnMedidaData:photos];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第五步: 调用适配器。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MediaHandleAlbum * album = [[MediaHandleAct mediaHandleActions] objectForKey:<span class="string">@"album"</span>];</span><br><span class="line">album<span class="variable">.maxCount</span> = imageCount;</span><br><span class="line">[album performActionWichController:<span class="keyword">self</span> callbackClass:<span class="keyword">self</span>];</span><br></pre></td></tr></table></figure>
<h1 id="u9002_u914D_u5668_u6A21_u5F0F_u7684_u4F18_u7F3A_u70B9"><a href="#u9002_u914D_u5668_u6A21_u5F0F_u7684_u4F18_u7F3A_u70B9" class="headerlink" title="适配器模式的优缺点"></a>适配器模式的优缺点</h1><p>优点: 耦合度低，可以扩展多种不同功能的适配样式。<br>缺点: 代码量相应增多，文件增多。</p>
<p><a href="https://github.com/XibHe/AdapterPatternTest" target="_blank" rel="external"><font color="#FA8072"> 源码下载地址 </font></a></p>
<h1 id="u6CE8_u610F"><a href="#u6CE8_u610F" class="headerlink" title="注意"></a>注意</h1><p>该Demo中使用调用相机，相册，录制视频的功能，当系统为iOS 10以上访问权限的设置有所不同，需要在工程中的plist文件中添加对应的描述。Demo中的plist，<br>如图，<br><img src="http://odchyrav4.bkt.clouddn.com/QQ20170313-0@2x.png" alt="工程截图"></p>
<p>其他功能访问权限设置，<br><a href="http://stackoverflow.com/questions/38498275/ios-10-changes-in-asking-permissions-of-camera-microphone-and-photo-library-c" target="_blank" rel="external"><font color="#FA8072"> iOS 10 - Changes in asking permissions of Camera, microphone and Photo Library causing application to crash </font></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;u521D_u8877&quot;&gt;&lt;a href=&quot;#u521D_u8877&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h1&gt;&lt;p&gt;解决ViewConctroller里冗余代码过多的问题，将公用模块抽离出来。这里将项目中用到的拍照，调用
    
    </summary>
    
      <category term="设计模式" scheme="http://XibHe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="iOS" scheme="http://XibHe.github.io/tags/iOS/"/>
    
      <category term="设计模式" scheme="http://XibHe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器" scheme="http://XibHe.github.io/tags/%E9%80%82%E9%85%8D%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>再见! 2016!</title>
    <link href="http://XibHe.github.io/2017/01/15/%E5%86%8D%E8%A7%81%EF%BC%812016/"/>
    <id>http://XibHe.github.io/2017/01/15/再见！2016/</id>
    <published>2017-01-15T13:25:10.000Z</published>
    <updated>2017-06-23T07:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u7ED3_u5A5A"><a href="#u7ED3_u5A5A" class="headerlink" title="结婚"></a>结婚</h2><p>2016年注定是不平凡的一年，我和花花（我媳妇的外号）在2月14日领的结婚证，这天也是西方的情人节。从这天起我要履行法律赋予我作为一个丈夫的责任和义务。我和花花是大学同学，相识六年，经历了种种磨难和阻力，最终走到了一起。她是我的福星，我的天使，没有花花的鼓励和支持我不敢想象我会变成什么样子。谢谢你包容我的时不时的坏脾气，容忍我的懒散，不思进取，选择和我在一起。承担起本不该属于你的忧愁和压力。<font size="4" face="黑体">我的挚爱，我的血肉。</font>谢谢你一路的陪伴。</p>
<h2 id="u751F_u5B50"><a href="#u751F_u5B50" class="headerlink" title="生子"></a>生子</h2><p>16年，给了我太多的惊喜和感动。我又办成了人生的另外一件大事—孕育下一代。我们家小宝贝的出生好似给我注入了一剂强心剂，让我感到内心无比的强大。前期的彷徨无措，以及不知该如何适应父亲这个新角色的焦躁不安随着我们家小宝贝的降生，被一扫而空。又是一个给我带来好运的小天使，每每想到小家伙那粉嫩的面庞，心中就为之躁动起来。他的一举一动都牵动着我，同时，也感到肩上的责任越来越重了。我会更加努力<font size="4" face="黑体">为你打下一片大大的疆土。</font>我的小宝贝。</p>
<h2 id="u65B0_u5DE5_u4F5C"><a href="#u65B0_u5DE5_u4F5C" class="headerlink" title="新工作"></a>新工作</h2><p>因为种种原因，之前的公司主营业务出现了问题，于是，树倒猢狲散，我又开始了漫长的面试生涯。经过近一个月数十家公司的面试，最终入职了现在的公司。面试时也遇到很多自己之前没有深入去考录的问题，被打了几次脸之后，让我认识到自己的基础并不牢固，很多问题只有肤浅的认知。关于面试这一块的具体内容，需要整理成具体的内容，再发布到博客上，就当给自己提个醒，告诫自己前方还有一段很长的路要走。</p>
<p>新的工作，给我最大的感受就是流程上的统一与协调。在开发新版本前，会走一个<font color="#DC143C">需求分析-&gt;原型设计-&gt;需求评审-&gt;UI设计评审-&gt;制定开发计划-&gt;开发计划评审</font>的流程。虽然起初感到繁琐，但对流程的把控可以形成有效的开发计划，掌握开发过程中不同的产出环节，随着对流程的适应以及团队磨合，最终这个流程的时间也会缩短。最重要的是当项目延期或是需求出现问题，可以追溯到流程中那个环节出现了问题。</p>
<p>刚接手现在正在做的这个项目时，觉得很烫手。不仅要面对开发进度的滞后，还要提防项目中随时可能出现的一些无以名状的Bug。觉得自己一个人有些力不从心，但又不得不咬牙顶上去。最终，通过不断加班加点的赶进度，不断的理解产品需求，迈过了这个坎。反而很享受这样解决问题的畅快，为自己以后填更大的坑积累的初始的经验。经过这五个多月的不断历练，最大的收货是：自己慢慢能把控好一个项目了。由最初的慌张，苦闷，到现在可以坦然的面对这些问题。在项目中对自己的要求更加严格了，对产品性能方面，有了一个基本的认识，并开始着手做一些性能上的优化工作。</p>
<h2 id="u5BB6_u5EAD"><a href="#u5BB6_u5EAD" class="headerlink" title="家庭"></a>家庭</h2><p>这半年时间，加班比较多，这就导致了陪在家人身边的时间少了很多。起初，我觉得我是在履行我养家糊口的责任，从这一点出发是无可厚非的。但事实上，我的家人更需要我的陪伴，我不能陪伴小家伙一天天的成长，是我作为父亲最大的遗憾；我不能换位思考，体谅我妻子带孩子的艰辛，是我作为丈夫的不称职。曾听说过一句话：<font size="4" face="黑体">把家当做事业来经营，把事业当做家来爱。</font>如果真正做到了这句话所说的那样，那么家庭与工作二者之间就会找到平衡点，一切的矛盾将会迎刃而解。同时，沟通的不及时也会加剧这种矛盾，所以，今年无论工作再忙也要抽出时间关心下我的妻子和儿子，让她们能感受到我对她们的爱。</p>
<h2 id="u8BFB_u4E66"><a href="#u8BFB_u4E66" class="headerlink" title="读书"></a>读书</h2><p>16年初，1月份读了<a href="https://imciel.com" target="_blank" rel="external">一刀</a>推荐的<font size="4" face="黑体"> 《把时间当做朋友》 </font>，尝试从心智层面上控制自己，告别拖延症。开始尝试制定每个月的工作学习计划。4月初读了<a href="https://imciel.com" target="_blank" rel="external">一刀</a>推荐的<font size="4" face="黑体"> 《Effective Objective-C 2.0:编写高质量iOS与OS X代码的52个高效方法》</font>和<font size="4" face="黑体"> 《Objective-C高级编程:iOS与OS X多线程和内存管理》 </font>对编写高质量的代码，提高代码质量有了初步的了解，对线程底层实现的原理有了一个大概的轮廓。但看这两本书时，太着急了些，未能将书中的精髓全部掌握，同时，也遗留了很多一知半解的问题。今年计划再拿出半个月的时间回顾一下这两本书中未搞懂的内容。五月中旬看了<font size="4" face="黑体"> 《GitHub入门与实践》 </font>一书，书的内容很简单，浅显的讲了一下GitHub的原理和流程，如果想进一步了解Git的详细使用及具体操作，可以看<a href="https://www.gitbook.com/book/bingohuang/progit2/details" target="_blank" rel="external">Pro Git</a>，GitBook上已经有第二版简体中文的翻译了。六月份还看了<font size="4" face="黑体"> &lt;<ios编程实战>&gt; </ios编程实战></font>一书，不过是跳着看的，跳过了那些自己已经掌握的内容，看后，对现有知识进行了一些拓展。双十一的时候，在网上买了几本书，如下：</p>
<ul>
<li><font size="4" face="黑体"> 《传习录》 </font></li>
<li><font size="4" face="黑体"> 《编程珠玑》 </font></li>
<li><font size="4" face="黑体"> 《人类简史》 </font></li>
<li><font size="4" face="黑体"> 《软技能:代码之外的生存指南》 </font></li>
<li><font size="4" face="黑体"> 《Head First设计模式(中文版)》 </font></li>
<li><font size="4" face="黑体"> 《啊哈!算法》 </font></li>
<li><font size="4" face="黑体"> 《图解HTTP》 </font></li>
<li><font size="4" face="黑体"> 《黑客与画家》 </font>

</li>
</ul>
<p>这几本书里有之前听别人说起过的，也有<a href="https://imciel.com" target="_blank" rel="external">一刀</a>推荐的。这几本书中<font size="4" face="黑体"> 《软技能:代码之外的生存指南》，</font><font size="4" face="黑体"> 《啊哈!算法》，</font> <font size="4" face="黑体"> 《图解HTTP》</font>这三本书已经看了有些日子了。这些书有些是对现有知识的拓展和升华，打破我固有的思维，有的是个人喜好。读书的时间，开始时是早上在公交车上看，有时看某一本书看得厌烦了，就换另一本书看。个人觉得看纯技术书籍时，可以根据自己的口味搭配一本非技术的书籍来一起读，这样可以缓解因长期看一本书而造成的疲劳和厌烦。</p>
<p>以前认为读书的时间是千方百计的挤出来的，现在看来这样的想法有失偏颇。当我想偷懒，放松下来时，或是想玩手机时，就在心里告诫自己用这些时间来看书，反复这样几次后，竟然发现在这些时间内，比我千方百计挤出来的时间看的书还多。看来平时的时间都被浪费在了这些琐碎，无意义的事情上了。</p>
<h2 id="u535A_u5BA2"><a href="#u535A_u5BA2" class="headerlink" title="博客"></a>博客</h2><p>关于博客，16年初开始写，一直到7月份才写了第二篇文章，全年只写了7篇文章。很多想写的东西，都只是被记录下来，并没有梳理成一篇文章，最后，都化作了尘埃，消失不见了。最开始时，想着什么都往博客上写，但那样纯粹是为了凑字数，可读性并不强。浪费了自己的时间，也对读这篇博客的人造成了困扰。到后来，太过于浅显东西没有写的必要，未经深入研究的东西，或是从别处直接复制粘贴别人的观点。这些都不是在写博客，而是在记流水账。因此，给自己定下了一个三不写的要求:</p>
<blockquote>
<font size="4" face="黑体"> 所描述的内容，逻辑不清，不写 </font><br><font size="4" face="黑体"> 没有经过自己验证过的内容，不写 </font><br> <font size="4" face="黑体"> 对别人没有帮助，只是在记流水账的内容，不写 </font>

</blockquote>
<p>2017年会继续坚持写博客，写那些真正经过自己深入研究过的东西，写那些日常项目中真正遇到并最终解决的问题，写对自己对别人有用的东西。只有这样才能提高文章的质量，付出的时间才能得到最大化的利用。</p>
<h2 id="u65B0_u6280_u672F"><a href="#u65B0_u6280_u672F" class="headerlink" title="新技术"></a>新技术</h2><p>16年8月初，学习了最新的Swift 3.0，当然，现在最新的是Swift 3.01。从官网下了<a href="https://developer.apple.com/swift/resources/" target="_blank" rel="external">The Swift Programming Language(Swift 3.01)</a>，通过官网下载时会跳转到iBooks，但由于一些众所周知的原因，iBooks中国区是无法下载的，需要使用美区账号登录iBooks。可以结合<a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="external">极客学院Wiki</a>简体中文翻译看。目前，自己只看到了<font size="4" face="黑体"> Functions </font>这章，17年还需要继续学习剩下的部分，再使用Swift编写一个具体的项目。17年计划学习一些热更新的技术，并计划在自己做的项目中使用一种热更新技术，实现动态化的修改项目中的代码。17年，希望自己能在iOS之外，能入门一种新的技术，拓宽自己的视野，达到自己心中设定的新的高度，看到之前看不到风景。</p>
<h2 id="u6311_u6218"><a href="#u6311_u6218" class="headerlink" title="挑战"></a>挑战</h2><p>17年是公司发展历程中重要的一年，也是我所在项目组所开发的项目大范围推广的一年，我们将迎来更多的用户，更大的并发量，会根据市场反应快速迭代产品。我们渴望在项目中使用新的技术，不断的提高用户体验，同时，又能不影响项目上线时间。希望我们产品被更多的人使用，得到大家的认可。同时，希望我们团队<font size="4" face="黑体"> 永远年轻，永远热泪盈眶。</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u7ED3_u5A5A&quot;&gt;&lt;a href=&quot;#u7ED3_u5A5A&quot; class=&quot;headerlink&quot; title=&quot;结婚&quot;&gt;&lt;/a&gt;结婚&lt;/h2&gt;&lt;p&gt;2016年注定是不平凡的一年，我和花花（我媳妇的外号）在2月14日领的结婚证，这天也是西方的情人节。从这
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="2016" scheme="http://XibHe.github.io/tags/2016/"/>
    
      <category term="年终总结" scheme="http://XibHe.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>调试蓝牙扫码枪遇到的问题</title>
    <link href="http://XibHe.github.io/2016/12/06/iOS%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B%20%20/"/>
    <id>http://XibHe.github.io/2016/12/06/iOS蓝牙开发简介  /</id>
    <published>2016-12-06T10:31:54.000Z</published>
    <updated>2017-06-22T12:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS_u84DD_u7259_u5F00_u53D1_u7B80_u4ECB"><a href="#iOS_u84DD_u7259_u5F00_u53D1_u7B80_u4ECB" class="headerlink" title="iOS蓝牙开发简介"></a>iOS蓝牙开发简介</h1><p>蓝牙 4.0出现之前，蓝牙 2.0时只有iOS设备和苹果认证的MFI设备才可以被iOS设备检索到。蓝牙 4.0之后（硬件要4S，系统要iOS6以上才支持蓝牙 4.0），苹果开放了BLE(蓝牙4.0以低功耗著称，所以一般被称为BLE（bluetooth low energy））通道，没有MFI认证的蓝牙设备也可以连接非越狱的iOS设备了。</p>
<p>总结了一下，一共有五种方式可以实现蓝牙通信:</p>
<ol>
<li>使用MFI认证的蓝牙模块的蓝牙产品 —— 开发使用ExternalAccessory框架，如果你的蓝牙模块还没设计，打算在AppStore上发布，打算使用蓝牙4.0以下（IOS设备都兼容），那你就抓紧找MFI认证的蓝牙模块吧。</li>
<li>使用苹果提供的CoreBluetooth framework框架 —— 只适用于支持蓝牙4.0的设备，无需越狱，无需使用MFI，可以发布在AppStore上。</li>
<li>GameKit framework —— 只能在iOS设备之间同一个应用内连接，从iOS7开始过期了，通过蓝牙可以实现文件的共享（仅限设备沙盒中的文件），此框架一般用于游戏开发（比如五子棋对战）。</li>
<li>Private API —— 使用私有API的应用程序不被允许在AppStore上发布。</li>
<li>Jailbreak</li>
</ol>
<p>这里我使用的是第二种方式 —— CoreBluetooth。</p>
<h1 id="u6838_u5FC3_u6982_u5FF5"><a href="#u6838_u5FC3_u6982_u5FF5" class="headerlink" title="核心概念"></a>核心概念</h1><p>CoreBluetooth框架的核心其实是两个东西，peripheral和central, 可以理解成外设和中心。对应他们分别有一组相关的API和类。</p>
<ul>
<li>CBCentralManager：中心设备（用来连接到外部设备的管家）</li>
<li>CBPeripheralManager：外部设备（第三方的蓝牙4.0设备）</li>
</ul>
<p><img src="http://odchyrav4.bkt.clouddn.com/BLE.jpeg" alt="BLE"></p>
<ul>
<li>这两组api分别对应不同的业务场景，左侧叫做中心模式，就是以你的app作为中心，连接其他的外设的场景，而右侧称为外设模式，使用手机作为外设别其他中心设备操作的场景。</li>
<li>服务和特征，特征的属性(service and characteristic):<br>每个设备都会有一些服务，每个服务里面都会有一些特征，特征就是具体键值对，提供数据的地方。每个特征属性分为这么几种：读，写，通知这么几种方式。</li>
</ul>
<p>外设、服务、特征间的关系</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/1442301743869760.png" alt="关系图"></p>
<h1 id="u8FDE_u63A5_u6D4B_u8BD5"><a href="#u8FDE_u63A5_u6D4B_u8BD5" class="headerlink" title="连接测试"></a>连接测试</h1><p>检测蓝牙设备的连接强度，查询一定范围内的蓝牙设备列表。可以通过一款名为LightBlue的手机端软件来确定。在开启蓝牙的状态下，打开LightBlue搜索到当前范围内的设备列表，可以点击查看当前设备的UUID以及特征和服务的UUID，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/IMG_0254.PNG?imageView/4/w/300" alt="系统蓝牙"></p>
<p><img src="http://odchyrav4.bkt.clouddn.com/IMG_0252.PNG?imageView/4/w/300" alt="设备列表"></p>
<p><img src="http://odchyrav4.bkt.clouddn.com/IMG_0253.PNG?imageView/4/w/300" alt="特征和服务的UUID"></p>
<h1 id="u8FDE_u63A5_u84DD_u7259_u626B_u7801_u67AA"><a href="#u8FDE_u63A5_u84DD_u7259_u626B_u7801_u67AA" class="headerlink" title="连接蓝牙扫码枪"></a>连接蓝牙扫码枪</h1><p>项目中需要连接蓝牙扫码枪，通过扫码枪扫描商品的条码，将得到的条码值传给终端设备。终端设备根据该条码值搜索该商品的全部信息。iPad开启蓝牙，通过设置蓝牙扫描枪，连接上iPad，但发现在调试状态下，并没有调用CBCentralManager的代理方法。使用LightBlue搜索当前范围内的蓝牙设备，无法找到当前连接到iPad上的蓝牙扫描枪。蓝牙扫描枪使用的是富立叶（cilico）ci6800这款。最后，看了产品说明，发现它的蓝牙模块是蓝牙2.0 + EDR。而不是最新的蓝牙4.0。在未做任何处理的情况下，iPad端任然可以所接收到扫码枪扫描条码后的到的码值。原来是扫码枪默认开启了HID模式，在该模式下iPad默认当前通过蓝牙连接的扫码枪为一个外接键盘，因此扫描后得到码值相当于通过敲击键盘输入。</p>
<p>这样也造成了一个问题，iPad上所有带有输入功能的操作，都无法通过点击输入框弹出软键盘。因为系统会将扫码枪当做键盘，所有软键盘的弹出或者隐藏都是通过扫码枪做操作。但事实上扫码枪并不能控制键盘的弹出。通过google找到了一种据说是可以解决该问题的方法<a href="http://stackoverflow.com/questions/3326189/show-iphone-soft-keyboard-even-though-a-hardware-keyboard-is-connected/3837131#3837131" target="_blank" rel="external">点击查看</a>。但该方法极不稳定，当扫码枪的连接状态在休眠/唤醒两种状态下来回切换时就会失效。偶尔会成功弹出键盘。</p>
<p>最后，在联系厂家需求帮助无果的情况下，不得不停止了该款扫码枪的适配。</p>
<h1 id="u8FDE_u63A5_u84DD_u7259_u8840_u538B_u8BA1"><a href="#u8FDE_u63A5_u84DD_u7259_u8840_u538B_u8BA1" class="headerlink" title="连接蓝牙血压计"></a>连接蓝牙血压计</h1><p>为了验证自己的代码没有问题，是由于蓝牙扫码枪的蓝牙模块版本过低不支持CoreBluetooth。我又找来了一台据说支持蓝牙4.0的蓝牙血压计做测试。</p>
<h1 id="u4EE3_u7801_u5B9E_u73B0_u7684_u6B65_u9AA4"><a href="#u4EE3_u7801_u5B9E_u73B0_u7684_u6B65_u9AA4" class="headerlink" title="代码实现的步骤"></a>代码实现的步骤</h1><blockquote>
<p>第一步，创建CBCentralManager。<br>第二步，扫描可连接的蓝牙外设（必须在蓝牙模块打开的前提下）。<br>第三步，连接目标蓝牙外设。<br>第四步，查询目标蓝牙外设下的服务。<br>第五步，遍历服务中的特性，获取特性中的数据或者保存某些可写的特性，或者设置某些特性值改变时，通知主动获取。<br>第六步，在通知更新特性中值的方法中读取特性中的数据（再设置特性的通知为YES的情况下）。<br>第七步，读取特性中的值。<br>第八步，如果有可写特性，并且需要向蓝牙外设写入数据时，写入数据发送给蓝牙外设。</p>
</blockquote>
<ol>
<li>引入 CoreBluetooth头文件</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;CoreBluetooth/CoreBluetooth.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>声明属性</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CBCentralManager *manager;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CBPeripheral *peripheral;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span> ,<span class="keyword">nonatomic</span>) CBCharacteristic *writeCharacteristic;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>,<span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *nDevices;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>,<span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *nServices;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>,<span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *nCharacteristics;</span><br></pre></td></tr></table></figure>
<ol>
<li>遵守协议</li>
</ol>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="class"><span class="keyword">interface</span> <span class="title">ViewController</span> () &lt;<span class="title">CBCentralManagerDelegate</span>, <span class="title">CBPeripheralDelegate</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>初始化数据</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad </span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.manager</span> = [[CBCentralManager alloc] initWithDelegate:<span class="keyword">self</span> queue:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    _cbReady = <span class="literal">false</span>;</span><br><span class="line">    _nDevices = [[<span class="built_in">NSMutableArray</span> alloc]init];</span><br><span class="line">    _nServices = [[<span class="built_in">NSMutableArray</span> alloc]init];</span><br><span class="line">    _nCharacteristics = [[<span class="built_in">NSMutableArray</span> alloc]init];</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>实现蓝牙的协议方法</li>
</ol>
<ul>
<li>(1)检查蓝牙状态</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="typename">void</span>)<span class="string">centralManagerDidUpdateState:</span>(CBCentralManager *)central</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (central.state) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">CBCentralManagerStatePoweredOn:</span></span><br><span class="line">        &#123;</span><br><span class="line">            [self <span class="string">updateLog:</span>@<span class="string">"蓝牙已打开,请扫描外设"</span>];</span><br><span class="line">            [_activity startAnimating];</span><br><span class="line">            [_manager <span class="string">scanForPeripheralsWithServices:</span>@[[CBUUID <span class="string">UUIDWithString:</span>@<span class="string">"FFF0"</span>]]  <span class="string">options:</span>@&#123;<span class="string">CBCentralManagerScanOptionAllowDuplicatesKey :</span> <span class="annotation">@YES</span> &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">CBCentralManagerStatePoweredOff:</span></span><br><span class="line">            [self <span class="string">updateLog:</span>@<span class="string">"蓝牙没有打开,请先打开蓝牙"</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="label">        default:</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color="#DC143C"> 注：[_manager scanForPeripheralsWithServices:@[[CBUUID UUIDWithString:@”FF15”]] options:@{CBCentralManagerScanOptionAllowDuplicatesKey : @YES }];中间的@[[CBUUID UUIDWithString:@”FFF0”]]是为了过滤掉其他设备，可以搜索特定标示的设备。<br> </font> 

<ul>
<li>（2）检测到外设后，停止扫描，连接设备</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查到外设后，停止扫描，连接设备</span></span><br><span class="line">-(<span class="typename">void</span>)<span class="string">centralManager:</span>(CBCentralManager *)central <span class="string">didDiscoverPeripheral:</span>(CBPeripheral *)peripheral <span class="string">advertisementData:</span>(NSDictionary *)advertisementData <span class="string">RSSI:</span>(NSNumber *)RSSI</span><br><span class="line">&#123;</span><br><span class="line">    [self <span class="string">updateLog:</span>[NSString <span class="string">stringWithFormat:</span>@<span class="string">"已发现 peripheral: %@ rssi: %@, UUID: %@ advertisementData: %@ "</span>, peripheral, RSSI, peripheral.identifier, advertisementData]];</span><br><span class="line">    </span><br><span class="line">    _peripheral = peripheral;</span><br><span class="line">    [_manager <span class="string">connectPeripheral:</span>_peripheral <span class="string">options:</span>nil];</span><br><span class="line">    </span><br><span class="line">    [self.manager stopScan];</span><br><span class="line">    [_activity stopAnimating];</span><br><span class="line">    </span><br><span class="line">    BOOL replace = NO;</span><br><span class="line">    <span class="comment">// Match if we have this device from before</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="typename">int</span> i=<span class="number">0</span>; i &lt; _nDevices.count; i++) &#123;</span><br><span class="line">        CBPeripheral *p = [_nDevices <span class="string">objectAtIndex:</span>i];</span><br><span class="line">        <span class="keyword">if</span> ([p <span class="string">isEqual:</span>peripheral]) &#123;</span><br><span class="line">            [_nDevices <span class="string">replaceObjectAtIndex:</span>i <span class="string">withObject:</span>peripheral];</span><br><span class="line">            replace = YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!replace) &#123;</span><br><span class="line">        [_nDevices <span class="string">addObject:</span>peripheral];</span><br><span class="line">        [_bluetoothTable reloadData];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>（3）连接外设后的处理</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接外设成功，开始发现服务</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"成功连接 peripheral: %@ with UUID: %@"</span>,peripheral,peripheral<span class="variable">.identifier</span>]);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> updateLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"成功连接 peripheral: %@ with UUID: %@"</span>,peripheral,peripheral<span class="variable">.identifier</span>]];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.peripheral</span> setDelegate:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.peripheral</span> discoverServices:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="keyword">self</span> updateLog:<span class="string">@"扫描服务"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//连接外设失败</span></span><br><span class="line">-(<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didFailToConnectPeripheral:(CBPeripheral *)peripheral error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)peripheralDidUpdateRSSI:(CBPeripheral *)peripheral error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s,%@"</span>,__PRETTY_FUNCTION__,peripheral);</span><br><span class="line">    <span class="keyword">int</span> rssi = abs([peripheral<span class="variable">.RSSI</span> intValue]);</span><br><span class="line">    <span class="built_in">CGFloat</span> ci = (rssi - <span class="number">49</span>) / (<span class="number">10</span> * <span class="number">4.</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *length = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"发现BLT4.0热点:%@,距离:%.1fm"</span>,_peripheral,pow(<span class="number">10</span>,ci)];</span><br><span class="line">    [<span class="keyword">self</span> updateLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"距离：%@"</span>, length]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>（4）发现服务和搜索到的Characteristice</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已发现服务</span></span><br><span class="line">-(<span class="typename">void</span>) <span class="string">peripheral:</span>(CBPeripheral *)peripheral <span class="string">didDiscoverServices:</span>(NSError *)error&#123;</span><br><span class="line">    </span><br><span class="line">    [self <span class="string">updateLog:</span>@<span class="string">"发现服务."</span>];</span><br><span class="line">    <span class="typename">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (CBService *s <span class="keyword">in</span> peripheral.services) &#123;</span><br><span class="line">        [self.nServices <span class="string">addObject:</span>s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (CBService *s <span class="keyword">in</span> peripheral.services) &#123;</span><br><span class="line">        [self <span class="string">updateLog:</span>[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%d :服务 UUID: %@(%@)"</span>,i,s.UUID.data,s.UUID]];</span><br><span class="line">        i++;</span><br><span class="line">        [peripheral <span class="string">discoverCharacteristics:</span>nil <span class="string">forService:</span>s];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([s.UUID <span class="string">isEqual:</span>[CBUUID <span class="string">UUIDWithString:</span>@<span class="string">"FFF0"</span>]]) &#123;</span><br><span class="line">            BOOL replace = NO;</span><br><span class="line">            <span class="comment">// Match if we have this device from before</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="typename">int</span> i=<span class="number">0</span>; i &lt; _nDevices.count; i++) &#123;</span><br><span class="line">                CBPeripheral *p = [_nDevices <span class="string">objectAtIndex:</span>i];</span><br><span class="line">                <span class="keyword">if</span> ([p <span class="string">isEqual:</span>peripheral]) &#123;</span><br><span class="line">                    [_nDevices <span class="string">replaceObjectAtIndex:</span>i <span class="string">withObject:</span>peripheral];</span><br><span class="line">                    replace = YES;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!replace) &#123;</span><br><span class="line">                [_nDevices <span class="string">addObject:</span>peripheral];</span><br><span class="line">                [_bluetoothTable reloadData];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已搜索到Characteristics</span></span><br><span class="line">-(<span class="typename">void</span>) <span class="string">peripheral:</span>(CBPeripheral *)peripheral <span class="string">didDiscoverCharacteristicsForService:</span>(CBService *)service <span class="string">error:</span>(NSError *)error&#123;</span><br><span class="line">    [self <span class="string">updateLog:</span>[NSString <span class="string">stringWithFormat:</span>@<span class="string">"发现特征的服务:%@ (%@)"</span>,service.UUID.data ,service.UUID]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (CBCharacteristic *c <span class="keyword">in</span> service.characteristics) &#123;</span><br><span class="line">        [self <span class="string">updateLog:</span>[NSString <span class="string">stringWithFormat:</span>@<span class="string">"特征 UUID: %@ (%@)"</span>,c.UUID.data,c.UUID]];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([c.UUID <span class="string">isEqual:</span>[CBUUID <span class="string">UUIDWithString:</span>@<span class="string">"FF01"</span>]]) &#123;</span><br><span class="line">            _writeCharacteristic = c;</span><br><span class="line"> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([c.UUID <span class="string">isEqual:</span>[CBUUID <span class="string">UUIDWithString:</span>@<span class="string">"FF02"</span>]])     &#123;</span><br><span class="line">            [_peripheral <span class="string">readValueForCharacteristic:</span>c];</span><br><span class="line">            [_peripheral <span class="string">setNotifyValue:</span>YES <span class="string">forCharacteristic:</span>c];</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;   </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="typename">void</span>)<span class="string">centralManager:</span>(CBCentralManager *)central <span class="string">didDisconnectPeripheral:</span>(CBPeripheral *)peripheral <span class="string">error:</span>(NSError *)error &#123;</span><br><span class="line">    [self <span class="string">updateLog:</span>[NSString <span class="string">stringWithFormat:</span>@<span class="string">"已断开与设备:[%@]的连接"</span>, peripheral.name]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>（5）获取外设发来的数据</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取外设发来的数据，不论是read和notify,获取数据都是从这个方法中读取。</span></span><br><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([characteristic<span class="variable">.UUID</span> isEqual:[CBU<span class="built_in">UID</span> U<span class="built_in">UIDWithString</span>:<span class="string">@"FF02"</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSData</span> * data = characteristic<span class="variable">.value</span>;</span><br><span class="line">        Byte * resultByte = (Byte *)[data bytes];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[data length];i++)</span><br><span class="line">            printf(<span class="string">"testByteFF02[%d] = %d\n"</span>,i,resultByte[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (resultByte[<span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (resultByte[<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            [<span class="keyword">self</span> updateLog:<span class="string">@"未知错误"</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (resultByte[<span class="number">1</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            [<span class="keyword">self</span> updateLog:<span class="string">@"鉴权失败"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([characteristic<span class="variable">.UUID</span> isEqual:[CBU<span class="built_in">UID</span> U<span class="built_in">UIDWithString</span>:<span class="string">@"FF04"</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSData</span> * data = characteristic<span class="variable">.value</span>;</span><br><span class="line">        Byte * resultByte = (Byte *)[data bytes];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[data length];i++)</span><br><span class="line">            printf(<span class="string">"testByteFF04[%d] = %d\n"</span>,i,resultByte[i]);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([characteristic<span class="variable">.UUID</span> isEqual:[CBU<span class="built_in">UID</span> U<span class="built_in">UIDWithString</span>:<span class="string">@"FF05"</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSData</span> * data = characteristic<span class="variable">.value</span>;</span><br><span class="line">        Byte * resultByte = (Byte *)[data bytes];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;[data length];i++)</span><br><span class="line">            printf(<span class="string">"testByteFF05[%d] = %d\n"</span>,i,resultByte[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (resultByte[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 设备加解锁状态 0 撤防     1 设防</span></span><br><span class="line">            [<span class="keyword">self</span> updateLog:<span class="string">@"当前车辆撤防状态"</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (resultByte[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 设备加解锁状态 0 撤防     1 设防</span></span><br><span class="line">            [<span class="keyword">self</span> updateLog:<span class="string">@"当前车辆设防状态"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中心读取外设实时数据</span></span><br><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic error:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error changing notification state: %@"</span>, error<span class="variable">.localizedDescription</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Notification has started</span></span><br><span class="line">    <span class="keyword">if</span> (characteristic<span class="variable">.isNotifying</span>) &#123;</span><br><span class="line">        [peripheral readValueForCharacteristic:characteristic];</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// Notification has stopped</span></span><br><span class="line">        <span class="comment">// so disconnect from the peripheral</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Notification stopped on %@.  Disconnecting"</span>, characteristic);</span><br><span class="line">        [<span class="keyword">self</span> updateLog:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Notification stopped on %@.  Disconnecting"</span>, characteristic]];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.manager</span> cancelPeripheralConnection:<span class="keyword">self</span><span class="variable">.peripheral</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于检测中心向外设写数据是否成功</span></span><br><span class="line">-(<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didWriteValueForCharacteristic:(CBCharacteristic *)characteristic error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"=======%@"</span>,error<span class="variable">.userInfo</span>);</span><br><span class="line">        [<span class="keyword">self</span> updateLog:[error<span class="variable">.userInfo</span> JSO<span class="built_in">NString</span>]];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"发送数据成功"</span>);</span><br><span class="line">        [<span class="keyword">self</span> updateLog:<span class="string">@"发送数据成功"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* When a write occurs, need to set off a re-read of the local CBCharacteristic to update its value */</span></span><br><span class="line">    [peripheral readValueForCharacteristic:characteristic];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="u540E_u8BB0"><a href="#u540E_u8BB0" class="headerlink" title="后记"></a>后记</h1><p>厂商一般会提供一份<font color="#DC143C">蓝牙血压计通信指令控制数据格式(通讯协议) </font> 可根据该协议中定义的返回的十六进制数据，定义当前外设发送的不同数据的意义。<br>最主要是用UUID来确定你要干的事情，特征和服务的UUID都是外设定义好的。我们只需要读取，确定你要读取什么的时候，就去判断UUID是否相符。 一般来说我们使用的iPhone都是做centralManager的，蓝牙模块是peripheral的，所以我们是want datas，需要接受数据。</p>
<ol>
<li>判断状态为powerOn，然后执行扫描</li>
<li>停止扫描，连接外设</li>
<li>连接成功，寻找服务</li>
<li>在服务里寻找特征</li>
<li>为特征添加通知</li>
<li>通知添加成功，那么就可以实时的读取value[也就是说只要外设发送数据[一般外设的频率为10Hz]，代理就会调用此方法]。</li>
<li>处理接收到的value，[hex值，得转换] 之后就自由发挥了，在这期间都是通过代理来实现的，也就是说你只需要处理你想要做的事情，代理会帮你调用方法。[别忘了添加代理]</li>
</ol>
<h1 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://liuyanwei.jumppo.com/2015/07/17/ios-BLE-1.html" target="_blank" rel="external">蓝牙相关基础知识</a></p>
<p><a href="https://www.engadget.com/2010/06/02/hacksugar-bringing-back-the-on-screen-keyboard/" target="_blank" rel="external">hacksugar: Bringing back the on-screen keyboard</a></p>
<p><a href="https://missajj.gitbooks.io/missajj_iosdevelopment_gitbook/content/蓝牙交互CoreBlueTooth/iff09_lan_ya_jiaohu_corebluetooth.html" target="_blank" rel="external">蓝牙交互CoreBlueTooth</a></p>
<p><a href="http://stackoverflow.com/questions/16839400/ios-and-bluetooth" target="_blank" rel="external">iOS and bluetooth</a></p>
<p><a href="http://lynchwong.com/2014/12/15/iOS蓝牙，CoreBluetooth框架简介及入门使用/" target="_blank" rel="external">iOS蓝牙，CoreBluetooth框架简介及入门使用</a></p>
<p><a href="http://thinkingiot.blogspot.com/2015/11/bluetooth-mfi.html" target="_blank" rel="external">想做iOS Bluetooth產品但又不想過MFI的討論</a></p>
<p><a href="http://stackoverflow.com/questions/19998078/corebluetooth-cannot-find-devices-but-ios-can" target="_blank" rel="external">CoreBluetooth cannot find devices but iOS can</a></p>
<p><a href="https://www.v2ex.com/t/179481" target="_blank" rel="external">请教熟悉iOS的朋友一个问题</a></p>
<p><a href="http://www.jianshu.com/p/760f042a1d81" target="_blank" rel="external">【译】iOS蓝牙编程指南 – 核心蓝牙概述</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS_u84DD_u7259_u5F00_u53D1_u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#iOS_u84DD_u7259_u5F00_u53D1_u7B80_u4ECB&quot; class=&quot;headerlink&quot; title=&quot;iOS蓝牙开发简介&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="iOS BLE 开发" scheme="http://XibHe.github.io/tags/iOS-BLE-%E5%BC%80%E5%8F%91/"/>
    
      <category term="蓝牙开发" scheme="http://XibHe.github.io/tags/%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>记一个在使用Masonry时遇到的问题</title>
    <link href="http://XibHe.github.io/2016/09/18/%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%9C%A8%E4%BD%BF%E7%94%A8Masonry%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://XibHe.github.io/2016/09/18/记一个在使用Masonry时遇到的问题/</id>
    <published>2016-09-18T12:35:34.000Z</published>
    <updated>2017-06-22T12:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="u4F7F_u7528Masonry_u7684_u573A_u666F"><a href="#u4F7F_u7528Masonry_u7684_u573A_u666F" class="headerlink" title="使用Masonry的场景"></a>使用Masonry的场景</h1><p>在“我的”界面顶部区域用来展示用户的登录信息，顶部有两种样式的变换，即，由未登录—-&gt;已登录。<br>如图所示，<br><img src="http://odchyrav4.bkt.clouddn.com/mine1.PNG?imageView/4/w/200/q/45" alt="IMG_3210"></p>
<p>其中头像区域是UIImageView，”登录/注册”是UILabel。登录成功后，头像区域会显示由服务器返回的头像地址生成的图片，并且其位置发生变化，不在居中显示，显示”登录/注册”的UILabel变为显示用户昵称，并且坐标位置发生改变。<br>如图所示，<br><img src="http://odchyrav4.bkt.clouddn.com/mine2.PNG?imageView/4/w/200/q/45" alt="已登录"></p>
<p>我的问题来了，在设置头像和标题位置时使用<strong>mas_remakeConstraints</strong>设置二者的约束，<br>代码如图，<br><img src="http://odchyrav4.bkt.clouddn.com/2016-09-18-QQ20160918-0@2x.png" alt="代码"></p>
<p>当从未登录切换到已登录时，已登录的头像位置会发生改变，变得特别大，不受约束控制。<br>控制台会报如下错误，<br><img src="http://odchyrav4.bkt.clouddn.com/2016-09-18-QQ20160918-1@2x.png" alt="报错"></p>
<p>刚开始没有意识到改变UIImageView的约束导致的新旧两种约束冲突造成的问题。在一个小时未解决该问题后，放弃了使用Masonry，改为使用代码做布局。今天，再回头看看这个问题，联想到忽略了什么东西，就打开Masonry文档从头开始仔细往下看，结果就看到了这句话，</p>
<blockquote>
<p>Sometimes you need modify existing constraints in order to animate or remove/replace constraints. In Masonry there are a few different approaches to updating constraints.</p>
</blockquote>
<p>文档上列举了三种修改现有约束的方法，</p>
<ol>
<li><p><strong>References</strong><br>你可以引用一个特定约束条件的约束，使表达式的结果分配给一个局部变量或一个类属性。</p>
</li>
<li><p><strong>mas_updateConstraints</strong><br>作为一种选择，如果你只是去更新固有的约束值，你可以使用<strong>mas_updateConstraints</strong>这种便利的方法替换<strong>mas_makeConstraints</strong>。</p>
</li>
<li><p><strong>mas_remakeConstraints</strong><br><strong>mas_updateConstraints</strong>用于更新一组约束，但要做那些费力的超出超出常量值的约束更新。这时就需要选择<strong>mas_remakeConstraints</strong>。<br><strong>mas_remakeConstraints</strong>类似于<strong>mas_updateConstraints</strong>，但它不是更新常量值，当再次为这些已经存在约束的视图设置约束前，它会移除掉该视图上的所有约束。这就让你可以为视图设置新的约束，而不用考虑移除之前已经存在的其他约束。</p>
</li>
</ol>
<p>于是，我使用文档中提到的第三种方法，将所有的<strong>mas_makeConstraints</strong>换成了<strong>mas_remakeConstraints</strong>，就解决了约束错乱的问题。</p>
<h1 id="u53C2_u8003_u6587_u6863"><a href="#u53C2_u8003_u6587_u6863" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry使用</a></p>
<p>造成这个问题的主要原因是我没有认真看Masonry的文档，文档上说的已经很清楚了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;u4F7F_u7528Masonry_u7684_u573A_u666F&quot;&gt;&lt;a href=&quot;#u4F7F_u7528Masonry_u7684_u573A_u666F&quot; class=&quot;headerlink&quot; title=&quot;使用Masonry的场景&quot;&gt;&lt;/a&gt;使用
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="Masonry" scheme="http://XibHe.github.io/tags/Masonry/"/>
    
      <category term="iOS适配" scheme="http://XibHe.github.io/tags/iOS%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>记一个关于线程的错误</title>
    <link href="http://XibHe.github.io/2016/09/11/%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://XibHe.github.io/2016/09/11/记一个关于线程的错误/</id>
    <published>2016-09-11T15:23:34.000Z</published>
    <updated>2017-06-22T12:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周遇到一个问题，当前页面为一个UIWebView，当点该WebView上某个按钮进入下一个页面时，再通过该页面顶部返回按钮返回时，程序就会崩溃。（在开启了全局断点的情况下）控制台会输出如下提示：</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/blog/image/997034A3-8246-4C63-A867-C968F2CCD96F.png" alt="控制台错误"></p>
<p>程序崩溃在将要消失时，控制台给出<font color="#FA8072"> This application is modifying the autolayout engine from a background thread,whinch can lead to engine corruption and weird crashes.This will cause an exception in a future release. </font> 的报错。</p>
<p>根据提示认为是后台线程在更新UI布局时，webView与JS的交互也在此时进行。交互操作会阻塞UI的显示及刷新。因此，又回到了一个老生常谈的准则上来了，<font color="#FA8072"> 要在主线程刷新UI布局 </font>。在调用本地应用于H5交互的方法时，要放到主线程中。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="preprocessor">#pragma mark - 跳转购物车</span></span><br><span class="line">- (<span class="keyword">void</span>)goCart:(<span class="built_in">NSString</span> *)shopNum</span><br><span class="line">&#123;</span><br><span class="line">    CLog(<span class="string">@"jsString = %@"</span>,shopNum);</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:ShopCartNumIsChanged object:shopNum];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.navigationController</span> popToRootViewControllerAnimated:<span class="literal">NO</span>];</span><br><span class="line">        MallHomeViewController *mallHome = [LYSingle sharedSingle]<span class="variable">.mallVC</span>;</span><br><span class="line">        [mallHome setCurrentSelectIndex:<span class="number">3</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma  mark - 商品上架(未开通店铺不能上架)</span></span><br><span class="line">- (<span class="keyword">void</span>)cannotShelves</span><br><span class="line">&#123;</span><br><span class="line">    CLog(<span class="string">@"cannotShelves"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIAlertView</span> *alertView = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@""</span> message:<span class="string">@"要在主线程刷新UI"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"我知道了"</span> otherButtonTitles:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [alertView show];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周遇到一个问题，当前页面为一个UIWebView，当点该WebView上某个按钮进入下一个页面时，再通过该页面顶部返回按钮返回时，程序就会崩溃。（在开启了全局断点的情况下）控制台会输出如下提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://odchyrav4.bkt.
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="iOS多线程" scheme="http://XibHe.github.io/tags/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程" scheme="http://XibHe.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用 cocoapods 时遇到的错误及错误的解决方案</title>
    <link href="http://XibHe.github.io/2016/08/21/%E5%85%B3%E4%BA%8Ecocoapod%E7%9A%84%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://XibHe.github.io/2016/08/21/关于cocoapod的二三事/</id>
    <published>2016-08-21T07:58:00.000Z</published>
    <updated>2017-06-22T12:52:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-The_dependency_AFNetworking__28_3D_2-6-3_29_is_not_used_in_any_concrete_target"><a href="#1-The_dependency_AFNetworking__28_3D_2-6-3_29_is_not_used_in_any_concrete_target" class="headerlink" title="1.The dependency AFNetworking (= 2.6.3) is not used in any concrete target."></a>1.The dependency <code>AFNetworking (= 2.6.3)</code> is not used in any concrete target.</h1><p>在cocoapods version 1.0 之后，默认生成的Podfile文件类似于</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 3.1.4'</span></span><br><span class="line">pod <span class="string">'SwiftyJSON'</span>, <span class="string">'~&gt; 2.3.2'</span></span><br></pre></td></tr></table></figure>
<p>这样的默认设置。为了不发生如标题那样的错误，需要手动用 <font color="#FA8072"> target “TargetName” do end </font> 把需要 pod 的库包括进来。</p>
<figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target <span class="variable">"TargetName"</span> <span class="keyword">do</span></span><br><span class="line">    pod <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 3.1.4'</span></span><br><span class="line">    pod <span class="string">'SwiftyJSON'</span>, <span class="string">'~&gt; 2.3.2'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="2-ios_None_of_your_spec_sources_contain_a_spec_satisfying_the_dependency_3A_IQKeyboardManager__28_7E_26gt_3B_4-0-0_29"><a href="#2-ios_None_of_your_spec_sources_contain_a_spec_satisfying_the_dependency_3A_IQKeyboardManager__28_7E_26gt_3B_4-0-0_29" class="headerlink" title="2.ios None of your spec sources contain a spec satisfying the dependency: IQKeyboardManager (~&gt; 4.0.0)."></a>2.ios None of your spec sources contain a spec satisfying the dependency: <code>IQKeyboardManager (~&gt; 4.0.0)</code>.</h1><p>报这个错误，可能是由于Cocoapods的配置库有损坏，Cocoapods建议删除本地副本重新clone。根据cocoapods官方博客的方案，在终端做出如下操作<font color="#FA8072"> (依照次序) </font></p>
<p>第一步:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr ~<span class="regexp">/Library/</span><span class="constant">Caches</span>/<span class="constant">CocoaPods</span> &amp;&amp; \</span><br></pre></td></tr></table></figure>
<p>第二步:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -fr ~/.cocoapods/repos/master</span><br><span class="line">gem <span class="operator"><span class="keyword">update</span> <span class="comment">--system &amp;&amp; \</span></span><br><span class="line">gem <span class="keyword">update</span> &amp;&amp; \</span><br><span class="line">gem <span class="keyword">cleanup</span> &amp;&amp; \</span><br><span class="line">pod setup</span></span><br></pre></td></tr></table></figure>
<h1 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://stackoverflow.com/questions/34556991/pod-install-displaying-error-in-cocoapods-version-1-0-0-beta-1/34558516" target="_blank" rel="external">Pod install displaying error in cocoapods version 1.0.0.beta.1</a></p>
<p><a href="http://stackoverflow.com/questions/37624178/intergating-new-firebase-error-cocoapods" target="_blank" rel="external">intergating New Firebase.. error cocoapods</a></p>
<p><a href="http://stackoverflow.com/questions/38030317/pod-repo-update-does-not-happen-error-in-cocoapods" target="_blank" rel="external">pod repo update does not happen error in cocoapods</a></p>
<p><a href="http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/" target="_blank" rel="external">Repairing Our Broken Specs Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-The_dependency_AFNetworking__28_3D_2-6-3_29_is_not_used_in_any_concrete_target&quot;&gt;&lt;a href=&quot;#1-The_dependency_AFNetworking__28_3D_2-6
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="cocoapod" scheme="http://XibHe.github.io/tags/cocoapod/"/>
    
  </entry>
  
  <entry>
    <title>关于iOS 7 Background Remote Notification(推送唤醒)</title>
    <link href="http://XibHe.github.io/2016/08/09/%E5%85%B3%E4%BA%8EiOS%207%20Background%20Remote%20Notification/"/>
    <id>http://XibHe.github.io/2016/08/09/关于iOS 7 Background Remote Notification/</id>
    <published>2016-08-09T15:30:48.000Z</published>
    <updated>2017-06-22T12:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Background_Remote_Notification_u7B80_u4ECB"><a href="#Background_Remote_Notification_u7B80_u4ECB" class="headerlink" title="Background Remote Notification简介"></a>Background Remote Notification简介</h1><p>Remote Notifications是 iOS7 在推送方面最大的变化，它允许应用收到通知后在后台（background）状态下运行一段代码，可用于从服务器获取内容更新。功能使用场景：（多媒体）聊天，Email更新，基于通知的订阅内容同步等功能，提升了终端用户的体验。</p>
<h1 id="u5982_u4F55_u8BBE_u7F6ERemote_notifications"><a href="#u5982_u4F55_u8BBE_u7F6ERemote_notifications" class="headerlink" title="如何设置Remote notifications"></a>如何设置Remote notifications</h1><h3 id="u5BA2_u6237_u7AEF_u8BBE_u7F6E"><a href="#u5BA2_u6237_u7AEF_u8BBE_u7F6E" class="headerlink" title="客户端设置"></a>客户端设置</h3><p>需要在Xcode 中修改应用的 Capabilities 开启Remote notifications，如图：</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/blog/image/Snip20131119_1.png" alt="客户端配置图"></p>
<p>当注册了Backgroud Modes -&gt; Remote notifications 后，notification 处理函数一律切换到下面函数，后台推送代码也在此函数中调用。</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pp">- <span class="params">(void)</span>application:<span class="params">(<span class="variable">UIApplication</span> *)</span>application didReceiveRemoteNotification:<span class="params">(<span class="variable">NSDictionary</span> *)</span>userInfo fetchCompletionHandler:<span class="params">(void (^)</span><span class="params">(<span class="variable">UIBackgroundFetchResult</span>)</span>)completionHandler</span></span><br></pre></td></tr></table></figure>
<p>这个函数也是iOS8之后获取远程推送调用的方法。</p>
<h3 id="u670D_u52A1_u7AEF_u8BBE_u7F6E"><a href="#u670D_u52A1_u7AEF_u8BBE_u7F6E" class="headerlink" title="服务端设置"></a><font color="#FA8072"> 服务端设置 </font></h3><p>这个很重要，推送消息携带 content-available: 1 是Background 运行的必须参数，如果不携带此字段则与iOS7 之前版本的普通推送一样。<br>服务端payload格式:aps增加content-available字段，类似于：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload example:</span><br><span class="line">&#123;<span class="string">"aps"</span>:&#123;<span class="string">"alert"</span>:<span class="string">"example"</span>, <span class="string">"sound"</span>:<span class="string">"default"</span>, <span class="string">"badge"</span>: <span class="number">1</span>, <span class="string">"category"</span>:<span class="string">"reply"</span>,<span class="string">"content-available"</span>:<span class="string">"1"</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>这里集成的是极光推送，参考极光推送 <font color="#FA8072"> Push API v3 </font>的文档，发现了iOS 平台上发送 APNS 通知的规范。其中支持的字段中关键字<font color="#FA8072"> content-available </font>的类型为 <font color="#FA8072"> boolean </font>。<br>如果该字段为<font color="#FA8072"> true </font> 说明是 <font color="#FA8072"> Background Remote Notification </font>，如果不携带此字段则是普通的<font color="#FA8072"> Remote Notification </font>。<br>这里需要特别注意的是服务器在配置<font color="#FA8072"> content-available: ture </font> 时的正确性。如图，后台以java为例。</p>
<font color="#DC143C" size="72"> 尚未传图 </font>

<p>最后，当应用在后台挂起时，发起一个<font color="#FA8072"> Background Remote Notification(推送唤醒) </font>。客户端获取的数据，如下:</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">userInfo = <span class="special">&#123;</span></span><br><span class="line">    "_j_msgid" = 2632357907;</span><br><span class="line">    aps =     <span class="special">&#123;</span></span><br><span class="line">        alert = "<span class="command">\U</span>6717<span class="command">\U</span>81f4<span class="command">\U</span>96c6<span class="command">\U</span>56e2<span class="command">\U</span>9738<span class="command">\U</span>5dde<span class="command">\U</span>5e02(<span class="command">\U</span>53bf<span class="command">\U</span>7ea7)<span class="command">\U</span>603b<span class="command">\U</span>4ee3<span class="command">\U</span>7406<span class="command">\U</span>5546<span class="command">\U</span>5bb6<span class="command">\U</span>60a8<span class="command">\U</span>597d<span class="command">\Uff</span>01<span class="command">\U</span>60a8<span class="command">\U</span>7684<span class="command">\U</span>5e97<span class="command">\U</span>94fa<span class="command">\U</span>53c8<span class="command">\U</span>6709<span class="command">\U</span>65b0<span class="command">\U</span>8ba2<span class="command">\U</span>5355<span class="command">\U</span>4e86<span class="command">\Uff</span>0c<span class="command">\U</span>8ba2<span class="command">\U</span>5355<span class="command">\U</span>53f73cef6682b73ca,<span class="command">\U</span>8bf7<span class="command">\U</span>53ca<span class="command">\U</span>65f6<span class="command">\U</span>767b<span class="command">\U</span>5f55<span class="command">\U</span>5546<span class="command">\U</span>57ce<span class="command">\U</span>8fdb<span class="command">\U</span>884c<span class="command">\U</span>8ba2<span class="command">\U</span>5355<span class="command">\U</span>5ba1<span class="command">\U</span>6838<span class="command">\U</span>3002";</span><br><span class="line">        badge = 1;</span><br><span class="line">        category = identifier;</span><br><span class="line">        sound = default;</span><br><span class="line">        content-available = 1;</span><br><span class="line">    <span class="special">&#125;</span>;</span><br><span class="line"><span class="special">&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://docs.jiguang.cn/client/ios_tutorials/#ios-7-background-remote-notification" target="_blank" rel="external">极光客户端SDk教程</a></p>
<p><a href="http://docs.jiguang.cn/server/rest_api_v3_push/#notification" target="_blank" rel="external">极光服务器端Push API v3</a></p>
<p><a href="http://my.oschina.net/zhaodacai/blog/711368" target="_blank" rel="external">三种方式使得iOS应用能够在后台进行数据更新和下载</a></p>
<h1 id="u540E_u8BB0"><a href="#u540E_u8BB0" class="headerlink" title="后记"></a>后记</h1><p>关于<font color="#FA8072"> Background Remote Notification(推送唤醒) </font>早在一年前就使用过，当时调研调试花费了大量时间。没想到现在又遇到了这个问题。结果，我又在阴沟里翻了船。可见做笔记，写博客总结的重要性。希望第三次闭着眼睛就能跳过这个坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Background_Remote_Notification_u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#Background_Remote_Notification_u7B80_u4ECB&quot; class=&quot;headerlink&quot; title=&quot;Backgrou
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://XibHe.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptCore与H5交互中使用JSExport设置引用名称空间</title>
    <link href="http://XibHe.github.io/2016/07/13/JavaScriptCore%E4%B8%8EH5%E4%BA%A4%E4%BA%92%E4%B8%AD%E4%BD%BF%E7%94%A8JSExport%E8%AE%BE%E7%BD%AE%E5%BC%95%E7%94%A8%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4/"/>
    <id>http://XibHe.github.io/2016/07/13/JavaScriptCore与H5交互中使用JSExport设置引用名称空间/</id>
    <published>2016-07-12T16:00:00.000Z</published>
    <updated>2017-06-22T12:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScriptCore_u7B80_u4ECB"><a href="#JavaScriptCore_u7B80_u4ECB" class="headerlink" title="JavaScriptCore简介"></a>JavaScriptCore简介</h1><p>JavaScriptCore是iOS7引入的新功能，使用JavaScriptCore后可以实现js代码与本地native代码进行相互调用。</p>
<p>要使用JavaScriptCore，首先我们需要引入它的头文件 <code>#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</code></p>
<p>这个头里面引入了几个重要的对象</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#import</span> <span class="string">"JSContext.h"</span></span><br><span class="line"><span class="id">#import</span> <span class="string">"JSValue.h"</span></span><br><span class="line"><span class="id">#import</span> <span class="string">"JSManagedValue.h"</span></span><br><span class="line"><span class="id">#import</span> <span class="string">"JSVirtualMachine.h"</span></span><br><span class="line"><span class="id">#import</span> <span class="string">"JSExport.h"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>JSContext是JavaScript的运行上下文，他主要作用是执行js代码和注册native方法接口</li>
<li>JSValue是JSContext执行后的返回结果，他可以是任何js类型（比如基本数据类型和函数类型，对象类型等），并且都有对象的方法转换为native对象。</li>
<li>JSManagedValue是JSValue的封装，用它可以解决js和原声代码之间循环引用的问题</li>
<li>JSVirtualMachine 管理JS运行时和管理js暴露的native对象的内存</li>
<li>JSExport是一个协议，通过实现它可以完成把一个native对象暴漏给js</li>
</ul>
<p>具体的交互过程可以参见这篇博客<a href="https://imciel.com/2016/06/18/oc-js-communication/" target="_blank" rel="external">https://imciel.com/2016/06/18/oc-js-communication/</a></p>
<h1 id="u4F7F_u7528JSExport_u8BBE_u7F6E_u5F15_u7528_u540D_u79F0_u7A7A_u95F4"><a href="#u4F7F_u7528JSExport_u8BBE_u7F6E_u5F15_u7528_u540D_u79F0_u7A7A_u95F4" class="headerlink" title="使用JSExport设置引用名称空间"></a>使用JSExport设置引用名称空间</h1><p>js那边统一使用一个名为jsObject的对象来调用js的方法进行传值或触发某一特定的事件。在 js 中定义一个方法:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setContent</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        jsObject.shopCartNumChanged(totalNum);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">onload</span>=<span class="value">"javascript:setContent('ios is: ' + typeof ios)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当点击 js 界面上的一个 “+” 号时，js 那边会查找 OC 代码通过JSContext注册的名为jsObject.shopCartNumChanged的调用方法。现在问题来了，在 OC 中该如何注册该方法呢?答案是使用语言穿梭机—JSExport协议。比如，我有一个<font color="#FA8072"> ShopCarViewController </font>的类。在.h中声明一个名为<font color="#FA8072"> MallJSExports </font>的协议。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ShopCarViewController.h</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">MallJSExports</span> &lt;<span class="title">JSExport</span>&gt;</span></span><br><span class="line">- (<span class="keyword">void</span>)shopCartNumChanged:(<span class="built_in">NSString</span>*)shopNum;  <span class="comment">//购物车数量变化</span></span><br><span class="line">- (<span class="keyword">void</span>)orderGoBackToNative;                   <span class="comment">//订单返回按钮</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ShopCarViewController</span> : <span class="title">MallViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在.m中当然要声明并实现该协议的方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ShopCarViewController</span>()&lt;<span class="title">UIWebViewDelegate</span>,<span class="title">MallJSExports</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIWebView</span> *webView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *shopNum;       <span class="comment">//商品数量</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ShopCarViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.navigationItem</span><span class="variable">.title</span> = <span class="string">@"购物车"</span>;</span><br><span class="line"></span><br><span class="line">    _webView = [[<span class="built_in">UIWebView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, screenWidth, <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.height</span>-<span class="number">49</span>)];</span><br><span class="line">    [_webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:_webUrl]]];</span><br><span class="line">    _webView<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    _webView<span class="variable">.detectsPhoneNumbers</span> = <span class="literal">NO</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:_webView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - 在webView加载完成的代理方法里设置JSContext</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//JS上下文对象</span></span><br><span class="line">    JSContext *context = [<span class="keyword">self</span><span class="variable">.webView</span> valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br><span class="line">    context[<span class="string">@"jsObject"</span>] = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - 购物车数量变化</span></span><br><span class="line">- (<span class="keyword">void</span>)shopCartNumChanged:(<span class="built_in">NSString</span> *)shopNum</span><br><span class="line">&#123;</span><br><span class="line">    CLog(<span class="string">@"jsString shopNum = %@"</span>,shopNum);</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:ShopCartNumIsChanged object:shopNum];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - 订单返回按钮</span></span><br><span class="line">- (<span class="keyword">void</span>)orderGoBackToNative</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.navigationController</span> popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里要注意的是<font color="#FA8072"> context[@ “jsObject” ] = self </font>中的的key值是和服务器商量好的, 即， js 中定义的回调方法<font color="#FA8072"> jsObject.shopCartNumChanged( )</font>相一致。</p>
<p>在这里对<font color="#FA8072"> JSExport </font>的使用只是简单的设置了一下命名空间，将下标方法暴露给js对象方便服务器调用。其实，<font color="#FA8072"> JSExport </font> 协议主要用途是把objc复杂对象转换成JSValue并暴露给js对象。<font color="#FA8072"> JSExport </font>作为两种语言的互通协议。<font color="#FA8072"> JSExport </font>中没有约定任何的方法，连可选的(@optional)都没有，但是所有继承了该协议(@protocol)的协议（注意不是Objective-C的类(@interface)）中定义的方法，都可以在JSContext中被使用。</p>
<h1 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://imciel.com/2016/06/18/oc-js-communication/" target="_blank" rel="external">使用 JavaScriptCore 实现 JS和OC间的通信</a></p>
<p><a href="http://blog.iderzheng.com/ios7-objects-management-in-javascriptcore-framework/" target="_blank" rel="external">JavaScriptCore框架在iOS7中的对象交互和管理</a></p>
<p><a href="http://liuyanwei.jumppo.com/2016/04/03/iOS-JavaScriptCore.html" target="_blank" rel="external">iOS JavaScriptCore使用</a></p>
<h1 id="u793A_u4F8B_u4EE3_u7801_u4E0B_u8F7D"><a href="#u793A_u4F8B_u4EE3_u7801_u4E0B_u8F7D" class="headerlink" title="示例代码下载"></a>示例代码下载</h1><p><a href="https://github.com/XibHe/JSExportTest" target="_blank" rel="external">Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScriptCore_u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#JavaScriptCore_u7B80_u4ECB&quot; class=&quot;headerlink&quot; title=&quot;JavaScriptCore简介&quot;&gt;&lt;/a&gt;JavaScriptCore简介&lt;/
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="JavaScriptCore" scheme="http://XibHe.github.io/tags/JavaScriptCore/"/>
    
      <category term="iOS" scheme="http://XibHe.github.io/tags/iOS/"/>
    
      <category term="iOS与JS交互" scheme="http://XibHe.github.io/tags/iOS%E4%B8%8EJS%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>路开始的地方</title>
    <link href="http://XibHe.github.io/2016/01/16/summary/"/>
    <id>http://XibHe.github.io/2016/01/16/summary/</id>
    <published>2016-01-16T04:04:48.000Z</published>
    <updated>2017-06-22T12:49:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="u7279_u522B_u9E23_u8C22"><a href="#u7279_u522B_u9E23_u8C22" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h1><p>老郭，对本博客所提供的技术支持！<br>老郭，对本博客所提供的技术支持！<br>老郭，对本博客所提供的技术支持！<br>并附上他的博客<a href="http://imciel.com" target="_blank" rel="external">地址</a></p>
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>博客页面的搭建是在2015年6月15日，在老郭的指导下完成的。搭建博客的初衷完全是因为看到别人都有博客，而且界面很炫，为了自己的虚荣心才觉得自己也要整一个这样的博客。可是等到自己动手的时候，完全无从下手。什么是<a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="external">Hexo</a>，<a href="http://brew.sh" target="_blank" rel="external">Homebrew</a>，<a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="external">MarkDown</a>等等。这些都没有听说过。还好有老郭，他手把手的教我如何去配置这些东东。那时候觉得自己好2B。最后，倒是整出来了，看到了久违的Hello World，还是当年的配方，还是熟悉的味道。<br>好吧，我承认我只是一时的冲动和虚荣心在作怪，我的博客在2015年6月15日止步于Hello World，从此，再也没有爬起来过。</p>
<blockquote>
<p>自己思考原来就是件很快乐的事情，而教别人思考则是学习思考，锻炼思维的最好办法。</p>
</blockquote>
<h1 id="u4E3A_u4EC0_u4E48_u5199_u535A_u5BA2"><a href="#u4E3A_u4EC0_u4E48_u5199_u535A_u5BA2" class="headerlink" title="为什么写博客"></a>为什么写博客</h1><p>或许我并不是一个喜欢记录，总结的人。但还是因为工作的原因(每个周五都要发一份周报给老大)，还是养成了一个记录的习惯。我把周一到周五每天都做了什么事情，记录在一个黑色的笔记本上。 把那些未经整理的，杂乱无章的，解决的问题的过程和代码复制到了印象笔记上。以备以后查阅方便。遇到类似的问题就打开笔记，复制出一份代码。也未深究这段代码的意义何在，为什么可以解决问题。久而久之，便不会思考，真的就成为了代码的搬运工了。没有了思考，发现不了自己的短板，便陷在了这样一种自我满足的境地当中了。每天看似在前进，实际上是在原地绕弯。日复一日，剩下的只有惶恐和迷茫。变得越来越不自信。杂乱无章的笔记和随处存放的代码片段并不能引导我去思考制造这些Bug的原因。我要思考，要分享我的思考过程，希望得到别人认可的同时也能指出我的不足和错误。</p>
<blockquote>
<p>解决问题的核心思想只有一个———一切都靠积累。</p>
</blockquote>
<h1 id="u535A_u5BA2_u7684_u5F00_u59CB"><a href="#u535A_u5BA2_u7684_u5F00_u59CB" class="headerlink" title="博客的开始"></a>博客的开始</h1><p>回顾过去的2015年，我已经在新公司待了快一年了，虽然，不知道自己究竟都有哪些提升。但是，冥冥中又觉得自己还是有些收获的。当然这些收获都来自于师傅他老人家的谆谆教导。我不想忘记那些和师傅一起加班的日日夜夜里所带来的收获，我要把这些冥冥中的收获写下来，记录我在这些项目中的收获，以及那些尚未解决的问题所留下的遗憾。 期望以后能弥补这些遗憾。留住这些青春的记忆。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;u7279_u522B_u9E23_u8C22&quot;&gt;&lt;a href=&quot;#u7279_u522B_u9E23_u8C22&quot; class=&quot;headerlink&quot; title=&quot;特别鸣谢&quot;&gt;&lt;/a&gt;特别鸣谢&lt;/h1&gt;&lt;p&gt;老郭，对本博客所提供的技术支持！&lt;br&gt;老郭，对
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="路的开始" scheme="http://XibHe.github.io/tags/%E8%B7%AF%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
</feed>
