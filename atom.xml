<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XibHe&#39;s Blog</title>
  <subtitle>It is never too late，Just do it better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://XibHe.github.io/"/>
  <updated>2017-10-10T12:17:01.000Z</updated>
  <id>http://XibHe.github.io/</id>
  
  <author>
    <name>XibHe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(译)为何许多开发者仍然喜欢用Objective-C，而不是Swift</title>
    <link href="http://XibHe.github.io/2017/10/10/SwiftUsageRate/"/>
    <id>http://XibHe.github.io/2017/10/10/SwiftUsageRate/</id>
    <published>2017-10-09T16:00:00.000Z</published>
    <updated>2017-10-10T12:17:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS SDK已经发布很多年了，开发人员纷纷涌向Objective-C，他们力图通过开发会大卖应用程序而获得丰厚的回报。但那样的时代如今已不复存在了：Swift已经面世三年多了，与Objective-C相比，大大地获取了大家的关注度。</p>
<p>Objective-C - 从应用程序开发世界冉冉升起的明星 - 沦为苹果生态系统中的二等公民。即使OC仍然会在WWDC的一两个板块中被提及，但世界各地的大部分会议都在谈论Swift，苹果正努力推动Swift在教育领域的应用，使用Swift作为主要的语言。</p>
<p>但是如果你仍然在使用Objective-C，你并不孤单 - 许多开发者仍然喜欢使用Objective-C相对于Swift，并且有很好的理由。我与一些Objective-C开发者联系，询问他们是否感觉继续使用Objective-C开发会受到指责，下面的内容就是他们不得不说的…</p>
<p>注意：这里表达的意见是个人意见，可能不代表雇主的意见; 人们按照他们回应的顺序列出; 一些回答在长度上进行了变更。</p>
<h2 id="阻止你将Swift作为开发语言的主要原因是什么？"><a href="#阻止你将Swift作为开发语言的主要原因是什么？" class="headerlink" title="阻止你将Swift作为开发语言的主要原因是什么？"></a>阻止你将Swift作为开发语言的主要原因是什么？</h2><p><strong>史蒂夫·特劳顿 - 史密斯</strong>：我有几个原因避免了Swift。 首先，我不喜欢使用它 - 我发现这个语言比ObjC更难阅读和解析，尤其是在循环和switch语句中的if-let变量赋值（这在Apple的体例中是混乱的，像ARKit一样)。我不是尝试各种不同语言为各种平台编写东西的新手，而且Swift绝对是我见到的可读性很低的语言。</p>
<p>我还不相信苹果参与设计这个语言的初衷 - 四年之后，Swift并不用于iOS，OS或框架的重要部分（我在Twitter上保留了苹果公司的Swift应用程序，macOS很少采用它的新特性相对于iOS来说)。我明白为什么会这样（ABI的稳定性等），但如果苹果没有使用Swift，我不明白为什么我需要代表他们进行beta测试。在Swift准备好之前，我没有什么期待，而且在此期间我获得了Objective-C所带来的一切好处。</p>
<blockquote>
<p>我完全相信，只是因为苹果建立了一些东西，并说这是前进的道路并不意味着它是正确的选择。</p>
</blockquote>
<p>有趣的是，在最初的几年中，我曾经听说过苹果与Swift的任何人分开，苹果公司当然是大量的ObjC开发人员，而Swift对于许多人来说，对我们来说是一个惊喜。 而且我完全相信，只是因为苹果建立了一些东西，并表示这是前进的道路并不意味着它是正确的选择 - 我们已经看到了一大堆错误（DNS 解析服务 discoveryd，iOS 7，iOS 8）或’mehs ‘（macOS，Touch Bar）在过去几年里，而且看到如何摆脱这些不好因素带来的负面影响。</p>
<p><strong>迈克尔·劳尔</strong>：我看不到激励。我在Objective-C方面非常有成效，我将语言视为非常优雅，简洁，富有表现力。如果Swift有一流的（异步）并发，我会高兴的跳起来。相比之下，我听说缓慢的编译时间，大量的运行时库重复，我还没有看到运行时性能的显着提升。</p>
<p><strong>丹·莱弗斯</strong>：对于技术原型预演Demo或非常小的项目，我将使用Objective-C，纯粹为了在经过相当长的时间（通常可能与这些类型的客户端）之后的易于更新。我还为许多客户保留了Objective-C应用程序，而且没有时间（或将其切换到Swift的理由）。在Swift中构建这样的项目的代码通常会把它当做演示原型的Demo来简单使用。</p>
<p><strong>彼得·莫尔纳尔</strong>：在3.0版本之前，我的主要障碍是缺少源代码兼容性，即使4.0之后，我还在等待ABI的稳定性。我认为这是剩下的唯一一个问题，如果源兼容性有效，我个人觉得这对我来说很重要。</p>
<p><strong>托德·托马斯</strong>：Xcode对Swift的支持似乎很好笑。从大型项目的愚蠢长编译时间到重构和调试。Tweetbot for Mac是一个相当可观的项目，在2012款的Retina MBP上编译它需要44秒。这包括1个框架，1个库和应用程序本身。此外，Swift的ABI仍然不稳定 - 当我不需要使用我的应用程序包含的所有库被全部缓慢的构建为应用时。</p>
<p><strong>伊恩·麦克道尔</strong>：我们有一大堆共享的C++代码，用于我们的业务逻辑，它与Windows和Android共享。我们在Objective-C中的本地UIKit/AppKit中编写我们的UI，并且有很多Objective-C++文件在两种语言之间桥接。至今，除了几个脚本和内部工具之外，我们还没有采用Swift。据使用Swift的其他团队说，编译时间比Objective-C / C ++慢。</p>
<p>我们有数百个Xcode项目，最终编译成一个巨大的静态库，链接到每个应用程序二进制文件。这样做可以减少应用启动时间。我们花费大概6小时流畅的构建我们的应用，不会增加很多时间。</p>
<p><strong>西蒙·沃尔夫</strong>：我的主要编码项目是一个客户端，它是一个已经发展了几年的大型代码库。虽然我也会引入一些Swift进去，因为我做的很多工作涉及到编辑现有的代码，它阻止我使用太多Swift。</p>
<p>我也意识到作为一个开发者，每次有一个新的主要版本的Swift的更新，我都会将那些工作中可以用到拿来用，但这不是我真正需要的。</p>
<p><strong>马科·阿门特</strong>：对我来说，这不是对Swift本身的判断，而是一个务实的决定：我已经是Objective-C的专家，在使用它方面极富生产力，而切换到Swift的好处并不足以说服我。</p>
<p><strong>马塞尔·维赫尔</strong>：我最多的工作包括一些复杂的元编程和 C 进行部分混合的objective - C的动态消息部分。在使用Swift后所有的这些都会变得更加困难，例如，你无法在Swift中编写CoreData。还很纠结：我只是试图找到一些用Swift编写的Apple Pencil示例代码。结果浪费了我一天时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS SDK已经发布很多年了，开发人员纷纷涌向Objective-C，他们力图通过开发会大卖应用程序而获得丰厚的回报。但那样的时代如今已不复存在了：Swift已经面世三年多了，与Objective-C相比，大大地获取了大家的关注度。&lt;/p&gt;
&lt;p&gt;Objective-C 
    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Swift" scheme="http://XibHe.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发总结</title>
    <link href="http://XibHe.github.io/2017/09/25/wx-mini-AppSummary/"/>
    <id>http://XibHe.github.io/2017/09/25/wx-mini-AppSummary/</id>
    <published>2017-09-24T16:00:00.000Z</published>
    <updated>2017-09-26T13:30:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>小程序开发结束已经两天了，这是第一个我参与的小程序项目。回顾开发过程中踩过的种种坑，剖析项目中的痛点，需要优化的地方。以后如何避免这样的问题？是否从此入坑H5了？自己的知识短板是什么？</p>
<p>之前一直从事iOS开发，对web前端没有过多了解。单凭一腔热血去开发小程序，初识比较迷茫，纠结于html和css的样式，js的数据交互等基础知识。但项目周期短，任务重，需要与pc，平板进行数据同步。就没有太多时间去理会前端基础知识，都是现学现用。</p>
<p>就是产品有些坑，设计的小程序产品原型还是是基于原生App的思维。因此，设计出的UI效果图，页面数据展示效果多数是原生App的效果，有些设计甚至与小程序组件相悖。为了实现与UI设计一致的效果，就需要花费很多时间自定义数据交互组件。</p>
<p>开发时没有完全吃透小程序开发文档，在实现某个功能时一直拿不定主意。以下是踩过的一些坑:</p>
<ul>
<li>小程序页面路径只能是五层，请尽量避免多层级的交互方式。</li>
<li>页面之间传递数据和变量的方式需要统一，不统一传参方式，一旦出现数据展示问题，会增加调试的难度。</li>
<li>一定要将多次调用的功能或样式封装起来，否则，重复相同功能代码会增加.js文件的代码量，使代码不易读。</li>
<li>使用swiper滑块视图容器时，一定要将滑块控制的页面抽离成单独的页面，放在一个页面中，当处理不同页面的数据交互时，会对其他不相干的页面数据造成干扰。</li>
<li>读取页面定义的变量时，不要忘记使用that关键字，把this对象复制到临时变量that，否则会找不到原来的对象。</li>
<li>wx.showToast吐司，当title文字超出限制，不会自适应宽高，需要自定义弹出框。</li>
<li>注意navigator 组件的几种跳转方式的不同之处。</li>
<li>小程序变量不支持下划线命名，若使用下划线命名会造成变量无法赋值。</li>
<li>避免快速点击，多次触发bindtap事件，造成打开多个相同页面。</li>
</ul>
<p>小程序写着还是很纠结的，这是内心的真实想法:</p>
<blockquote>
<p>一定是上辈子缺德事干多了，这辈子才会被安排写小程序！</p>
</blockquote>
<p>通过这次开发小程序的机会，发现了自己的知识短板，正是这些短板让自己裹足不前。以下是短板高发区:</p>
<ul>
<li>在哪些工作上花费时间最多?</li>
<li>可以改进的重复性劳动</li>
<li>自己没有完全理解的东西</li>
<li>你回答不出来的面试题</li>
</ul>
<p>对比以上几点快速找出你的技术短板，然后消除它。你必须要确切知道自己需要学什么，保证焦点正确。不要让这些短板成为你的“痛点”。</p>
<p>我是否陷入了对技术的狂热之中？因为崇拜某项特定的技术，只是因为自己熟悉这种技术。我很自然的会相信自己选择的是最好的，然后这会让我经常忽略一些与之相悖的意见。由于不了解其他技术，就倾向于选择自己最熟悉的技术并先入为主的认为它是最好的。</p>
<blockquote>
<p>人生多艰，无暇他顾。</p>
</blockquote>
<p>于是我局限在自己的世界中，变得自以为是，固步自封，墨守成规。自以为找到所有答案，却只是裹足不前。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序开发结束已经两天了，这是第一个我参与的小程序项目。回顾开发过程中踩过的种种坑，剖析项目中的痛点，需要优化的地方。以后如何避免这样的问题？是否从此入坑H5了？自己的知识短板是什么？&lt;/p&gt;
&lt;p&gt;之前一直从事iOS开发，对web前端没有过多了解。单凭一腔热血去开发小程序
    
    </summary>
    
      <category term="JavaScript" scheme="http://XibHe.github.io/categories/JavaScript/"/>
    
    
      <category term="小程序" scheme="http://XibHe.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="总结" scheme="http://XibHe.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>小程序页面跳转</title>
    <link href="http://XibHe.github.io/2017/09/16/wx.navigateTo/"/>
    <id>http://XibHe.github.io/2017/09/16/wx.navigateTo/</id>
    <published>2017-09-15T16:00:00.000Z</published>
    <updated>2017-10-10T03:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序页面跳转API时需要注意，官方文档中强调：“为了不让用户在使用小程序时造成困扰，我们规定页面路径只能是五层，请尽量避免多层级的交互方式。” 也就是说在连续使用navigateTo进行页面跳转时，若当前页面若正好是第5级，则点击该页面任何绑定触发事件的控件，都不会有任何反应。</p>
<h1 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h1><p>更新记录:</p>
<ul>
<li>2017 年 9 月，第一版。</li>
<li>2017 年 10 月，增加页面跳转流程图及跳转说明。</li>
</ul>
<h2 id="小程序中页面导航的API"><a href="#小程序中页面导航的API" class="headerlink" title="小程序中页面导航的API"></a>小程序中页面导航的API</h2><p>为了避免发生超过五级页面而无法跳转的悲剧，首先要了解清楚小程序中页面导航的API。小程序中页面导航API有五个，两个跳转新页面的API分别为wx.navigateTo和wx.redirectTo，一个用来做重置操作的API为wx.reLaunch，一个用于跳转到tabBar的API为wx.switchTab，还有一个API名为wx.navigateBack，用于返回页面。</p>
<p><strong>wx.navigateBack 在小程序的初始版本中只能回到上一个页面，在最新版本的更新中给 navigateBack 添加了一个参数 delta，用于决定需要返回几层页面，返回的页面数，如果delta大于现有页面数，则返回首页。</strong></p>
<h2 id="几种跳转方式的不同之处"><a href="#几种跳转方式的不同之处" class="headerlink" title="几种跳转方式的不同之处"></a>几种跳转方式的不同之处</h2><p>navigator 组件的默认跳转方式与 wx.navigateTo 相同，而如果添加 redirect 属性，则与 wx.redirectTo 的跳转方式相同。</p>
<p>navigateTo 在官方文档中描述如下：</p>
<blockquote>
<p>保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原页面。</p>
</blockquote>
<p>通过 navigateTo 跳转后，可点击左上角的按钮返回上一个页面。而如果多次调用 navigateTo 之后，就需要返回多次才能回到初始页面。因此，官方在此处有一个限制。</p>
<blockquote>
<p>注意：为了不让用户在使用小程序时造成困扰，我们规定页面路径只能是五层，请尽量避免多层级的交互方式。</p>
</blockquote>
<p>不过上述五层的限制只是针对 navigateTo，redirectTo 则无此限制。因为 redirectTo 的行为是：</p>
<blockquote>
<p>关闭当前页面，跳转到应用内的某个页面。</p>
</blockquote>
<p><font color="#FA8072">注意:</font> 使用redirectTo跳转到一个之前加载过的页面，不会再次调用该页面的onLoad方法。</p>
<p>通过 redirectTo 跳转后，则无法返回跳转前的页面。但并不是无法调用 navigateBack，而是调用之后，会回到使用 redirectTo 跳转前的上一个页面。</p>
<p>页面栈可以通过 getCurrentPages 方法获取：</p>
<blockquote>
<p>getCurrentPages() 函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</p>
</blockquote>
<p>上述的「页面路径」可以对应为页面栈中的元素，页面栈中的最后一个元素就是当前显示的页面，页面跳转就是新页面入栈的过程。</p>
<p>上述三种页面 API 的区别在于：</p>
<ul>
<li>navigateTo 不会将旧页面出栈；</li>
<li>redirectTo 会将旧页面出栈，再将需要跳转到的页面入栈；</li>
<li>navigateBack 则是将页面栈最后一个元素出栈，因此倒数第二个元素会成为最后一个元素，即变成「当前页面」。</li>
</ul>
<p>结合下面这个例子，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/wxnavigateTo_flow.png" alt="跳转流程"></p>
<p>小程序包含 A、B、C、D 四个页面，A 页面为首页。小程序启动后，在 A 页面中，我们通过 navigateTo 跳转到 B 页面，然后在 B 页面中再通过 navigateTo 跳转到 C 页面。</p>
<p>如果通过navigateTo跳转到 D 页面，则在D页面调用navigateBack会返回到C页面；<br>如果通过redirectTo跳转到 D 页面，则在D页面调用navigateBack会发现不是返回C 页面，而是返回到了 B 页面。</p>
<p>因为调用redirectTo 跳转到 D 页面，redirectTo 会将当前页面出栈，即将 C 页面出栈，再将 D 页面入栈，这时候，页面栈中的元素则会变为 A、B、D。</p>
<ul>
<li>navigateTo 不会将旧页面出栈，因此通过 navigateTo 跳转后，页面栈中元素个数会加一，因此在页面栈中元素个数达到 5 之后再调用 navigateTo 会失败，出现无法跳转的错误。</li>
<li>redirectTo 会在将旧页面出栈后，再将新页面入栈，因此通过 redirectTo 跳转，页面栈中元素个数会保持不变，所以即使在页面栈中元素达到 5 个之后再调用 redirectTo 也能成功跳转。</li>
</ul>
<h2 id="实际业务流程"><a href="#实际业务流程" class="headerlink" title="实际业务流程"></a>实际业务流程</h2><p>业务流程:<br>点击主页面的“扫码录入”按钮，页面跳转微信扫一扫页面，通过扫描条形码读取商品信息，若扫码到该商品信息存在数据库中，则获取数据库中的信息并将这些商品信息带至至“商品信息”页面，可以在商品信息页面对商品信息进行编辑。编辑结束后，点击商品信息页面底部的保存按钮，保存该条商品的最新信息。</p>
<p>为了在点击页面底部的“保存”按钮后直接跳转至微信扫一扫页面，达到快速扫码录入商品信息的目的。解决方案:</p>
<blockquote>
<ol>
<li>直接返回主界面，点击“扫码录入”按钮，跳转至微信扫一扫页面；</li>
<li>点击底部“保存”按钮后，立即调用wx.scanCode打开扫一扫页面；</li>
</ol>
</blockquote>
<p>方案1直接被否定了，原因是用户会频繁调用扫一扫进行商品信息的录入。如果在用户录入一天商品信息后，返回到主页面，再一次点击“扫码录入”按钮跳转至扫一扫页面进行商品录入或查询。会使得录入这一操作的连续性被打断，降低录入操作整体流畅度。</p>
<p>方案2在点击保存按钮后直接打开扫一扫固然可以保证操作的连贯性，但此时若在扫一扫页面不做扫码操作，而是点击扫一扫左上角的返回按钮，则返回到上个页面—商品信息保存页面。此时，如果点击“保存”按钮会对商品信息进行重复保存。</p>
<p>那么，能否在微信扫一扫页面做相应处理呢？比如，点击扫一扫左上角的返回按钮时，直接返回到首页。由于扫一扫页面是直接调用wx.scanCode而来的，其并不是以压栈的方式出现在页面控制的层级中。因此，无法通过getCurrentPages()函数获取对应的层级关系。</p>
<p>另外一种方式，针对方案2的问题，需要在点击“商品信息”页的“保存”按钮后做出特别处理，于是在点击保存绑定的事件中设置:</p>
<pre class="line-numbers language-js"><code class="language-js">saveTap<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      url<span class="token punctuation">:</span> requestUrl<span class="token punctuation">.</span>LookForGoodsUrl
      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"userId"</span><span class="token punctuation">:</span> userId<span class="token punctuation">,</span>
        <span class="token string">"goodsId"</span><span class="token punctuation">:</span> numResult<span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
        <span class="token string">"factory"</span><span class="token punctuation">:</span> factory<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      header<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token string">'0000'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 保存成功</span>
           wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              url<span class="token punctuation">:</span> <span class="token string">'../homePage/homePage'</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>  
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将最新商品信息上传至服务器，关闭当前页面，跳转到应用内的某个页面。再调用:</p>
<pre class="line-numbers language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">scanCode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> numResult <span class="token operator">=</span> res<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>numResult<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'69'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        url<span class="token punctuation">:</span> requestUrl<span class="token punctuation">.</span>LookForGoodsUrl
        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
           <span class="token string">"userId"</span><span class="token punctuation">:</span> userId<span class="token punctuation">,</span>
           <span class="token string">"goodsId"</span><span class="token punctuation">:</span> numResult<span class="token punctuation">,</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
        header<span class="token punctuation">:</span> <span class="token punctuation">{</span>
           <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token comment" spellcheck="true">// 存在该商品</span>
               wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                   url<span class="token punctuation">:</span> <span class="token string">'../goodsInfo/goodsInfo?goodsChart='</span> <span class="token operator">+</span> goodsChart <span class="token operator">+</span> <span class="token string">'&amp;goodsId='</span> <span class="token operator">+</span> goodsId<span class="token punctuation">,</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用扫一扫，获取商品条码，将获取的条码作为参数上传服务器得到服务器返回的商品信息。再将这些信息传递并跳转至“商品信息”页，展示这些信息。再次扫描商品条码时，重复以上操作。</p>
<p>但是为了在商品信息页面点击“保存”按钮时关闭当前页面，使用了wx.redirectTo，会先返回到首页（homePage），然后再调出扫一扫页面。这期间会出现短暂（大概2~3秒钟）的停顿，停顿期间页面(homePage)仍然可以操作，会误触页面上的其他点击事件。最后，即使在该页面(homePage)加上loading，以防止误触。仍然无法回避短暂停顿后再跳转扫一扫页面的问题。</p>
<p>最后的解决方案是: 点击商品信息页的“保存”按钮后，将该按钮隐藏。这样当从扫一扫页面返回商品信息页时就不会出现重复保存数据的问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信小程序页面跳转API时需要注意，官方文档中强调：“为了不让用户在使用小程序时造成困扰，我们规定页面路径只能是五层，请尽量避免多层级的交互方式。” 也就是说在连续使用navigateTo进行页面跳转时，若当前页面若正好是第5级，则点击该页面任何绑定触发事件的控件，都不会有
    
    </summary>
    
      <category term="JavaScript" scheme="http://XibHe.github.io/categories/JavaScript/"/>
    
    
      <category term="小程序" scheme="http://XibHe.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="wx.navigateTo" scheme="http://XibHe.github.io/tags/wx-navigateTo/"/>
    
  </entry>
  
  <entry>
    <title>爱之初体验 - 小程序</title>
    <link href="http://XibHe.github.io/2017/09/01/wx-mini-AppBlindDate/"/>
    <id>http://XibHe.github.io/2017/09/01/wx-mini-AppBlindDate/</id>
    <published>2017-08-31T16:00:00.000Z</published>
    <updated>2017-09-01T12:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发小程序已经有两周了，从最开始踌躇满志到现在喜忧参半。这中间经历了许多波折，好像又回到了第一次初恋时的感觉，迫切，含蓄，喜悦，又苦于不能迅速了解对方的方方面面，而感到沮丧。但随着一步步的接触，由浅入深，终会瓜熟蒂落，水到渠成。</p>
<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>小程序由视图层，逻辑层，渲染层三部分组成的一整套框架。框架使用自己的视图层描述语言WXML(.WXML文件中使用的是view标签构建视图，相当于CSS中的div标签。)和WXSS，逻辑层是基于JavaScript框架。视图层和逻辑层间微信提供了用于数据交互，事件绑定的丰富组件和API。</p>
<p>框架的核心是一个响应的数据绑定系统。整个系统分为两块: 视图层(View) 和逻辑层(App Service)。框架可以让数据与视图非常简单地保持同步。当做数据修改的时候，只需要在逻辑层修改数据，视图层就会发生相应的更新。</p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。什么是组件: </p>
<ul>
<li>组件是视图层的基本组成单元。</li>
<li>组件自带一些功能与微信风格的样式。</li>
<li>一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。</li>
</ul>
<p>但使用起来还是有些不足，很多组件的风格与微信风格类似，不想使用这种风格的组件就需要自定义组件，而自定义需要花费一些额外的时间，就算自定义成功了，仍需要经过仔细的测试，确保该自定义组件在交互上不会与基础组件产生偏差。</p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>框架提供了丰富的微信原生API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。</p>
<p>说明：</p>
<ul>
<li>wx.on 开头的 API 是监听某个事件发生的API接口，接受一个 CALLBACK 函数作 为参数。当该事件触发时，会调用 CALLBACK 函数。</li>
<li>如未特殊约定，其他 API 接口都接受一个OBJECT作为参数。</li>
<li>OBJECT中可以指定success, fail, complete来接收接口调用结果。<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1></li>
</ul>
<p><img src="http://odchyrav4.bkt.clouddn.com/wx-mini-AppPits_IDE.png" alt="IDE"></p>
<p>在原有的公众号网页调试工具的基础上，推出了全新的微信开发者工具，集成了公众号网页调试和小程序调试两种开发模式。</p>
<p>在8月30日和8月31日，对开发工具进行了很大的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html" target="_blank" rel="external">更新</a>。全新的视觉和交互体验，新增了申请<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/monkey-test.html" target="_blank" rel="external">测试报告</a>功能，新增<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxs/" target="_blank" rel="external">WXS</a>功能。</p>
<h1 id="开发中填的坑"><a href="#开发中填的坑" class="headerlink" title="开发中填的坑"></a>开发中填的坑</h1><p><a href="https://github.com/XibHe/WXAppPits" target="_blank" rel="external">微信小程序填坑记录</a><br>希望对你有帮助。</p>
<h1 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h1><blockquote>
<p>多看官方文档，多看几遍，遇到问题时再看，没有问题时继续看；</p>
<p>关注<a href="http://www.wxapp-union.com" target="_blank" rel="external">论坛</a>最新动态； </p>
<p>基础知识一定要过关（小程序的框架，组成部分，运行机制，自身限制）；</p>
<p>不要眼高手低，人家的demo下载下来跑起来，看懂之后一定要自己尝试写一遍；</p>
<p>找一个自己熟悉的逻辑，开始模仿（结合实际的项目需求，一步一步解决遇到的问题）。</p>
</blockquote>
<h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>模态窗体上的textarea多行输入框，当滑动整个页面时，会将textarea里输入的内容一起滑动至输入框外部，随着滑动的方向一起滑动。官方文档中备注了关于textarea的一个tip:</p>
<blockquote>
<p>textarea组件是由客户端创建的原生组件，它的层级是最高的。</p>
</blockquote>
<p>或许正是由于textarea是最高层级导致的滑动问题。</p>
<h1 id="demo下载"><a href="#demo下载" class="headerlink" title="demo下载"></a>demo下载</h1><p><a href="https://github.com/XibHe/wxModeList" target="_blank" rel="external">wxModeList</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="external">微信公众平台 | 小程序</a></p>
<p><a href="http://www.wxapp-union.com/portal.php?mod=view&amp;aid=1509" target="_blank" rel="external">小程序中的循环列表，在点击时改变当前项的背景颜色</a></p>
<p><a href="http://www.mntuku.cn/index.php/article/show/id-7141" target="_blank" rel="external">小程序操作按钮悬浮固定在底部</a></p>
<p><a href="http://www.wxapp-union.com/portal.php?mod=view&amp;aid=1261" target="_blank" rel="external">动态的显示或隐藏控件</a></p>
<p><a href="http://www.jianshu.com/p/aa8254b23847" target="_blank" rel="external">微信小程序从子页面退回父页面时的数据传递</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发小程序已经有两周了，从最开始踌躇满志到现在喜忧参半。这中间经历了许多波折，好像又回到了第一次初恋时的感觉，迫切，含蓄，喜悦，又苦于不能迅速了解对方的方方面面，而感到沮丧。但随着一步步的接触，由浅入深，终会瓜熟蒂落，水到渠成。&lt;/p&gt;
&lt;h1 id=&quot;框架&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="JavaScript" scheme="http://XibHe.github.io/categories/JavaScript/"/>
    
    
      <category term="小程序" scheme="http://XibHe.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="初体验" scheme="http://XibHe.github.io/tags/%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>二次筛选功能开发心得</title>
    <link href="http://XibHe.github.io/2017/08/23/FilterError/"/>
    <id>http://XibHe.github.io/2017/08/23/FilterError/</id>
    <published>2017-08-22T16:00:00.000Z</published>
    <updated>2017-08-26T09:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个类似于京东搜索结果页的筛选功能，侧边栏条件筛选器，根据不同的数据类型进行条件筛选及筛选条件的排列展示。</p>
<h1 id="构建原理及使用到的技术点"><a href="#构建原理及使用到的技术点" class="headerlink" title="构建原理及使用到的技术点"></a>构建原理及使用到的技术点</h1><blockquote>
<p>RunTime<br>继承<br>组合</p>
</blockquote>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><blockquote>
<p>筛选列表距离顶部状态栏距离过近<br>筛选列表展示<br>选中数量限制<br>替换二次筛选结果页数据源<br>循环移除数组元素报错<br>在筛选更多，跳转的搜索页面进行搜索调用两次接口请求</p>
</blockquote>
<h1 id="解决的方式"><a href="#解决的方式" class="headerlink" title="解决的方式"></a>解决的方式</h1><h2 id="替换二次筛选结果页数据源"><a href="#替换二次筛选结果页数据源" class="headerlink" title="替换二次筛选结果页数据源"></a>替换二次筛选结果页数据源</h2><p>需求中要求替换筛选条件的数据源,表述如下:</p>
<blockquote>
<p>选中的选项需要在二次筛选条件选择页中显示，选中的选项为默认展开的选项时，无需变更选项的位置，若选中的不是默认展开的选项，需要将选中的选项放到二次筛选条件选择页中，并代替筛选条件选择页中没被选择的默认展开的选项的位置，按照选中的时间顺序正序占据页面中的默认展开的选项的位置（举例说明：筛选条件选择页中的默认展开的选项是1、2、3、4、5，默认展开的选项选中的是2和4,然后用户点击查看更多的选项，先选了11然后又选了9的选项,根据逻辑，筛选条件选择页中显示的选项依次显示的是：11、2、9、4、5），若选中的选项被取消选择，选项的位置按照选中时的位置显示，不更改选项的位置。</p>
</blockquote>
<p>如图，二次筛选结果页和生产厂家搜索列表页</p>
<center><br>    <img src="http://odchyrav4.bkt.clouddn.com/filterError_1.PNG?imageView/4/w/300"><br>    <img src="http://odchyrav4.bkt.clouddn.com/filterError_2.PNG?imageView/4/w/300"><br></center>

<p>当生产厂家筛选数据源大于6项时，只展示5个生产厂家，并显示“更多生产厂家 &gt;”的跳转提示。点击跳转至生产厂家搜索列表页面，在搜索页面会根据搜索关键字展示所有的生产厂家列表信息。该列表会展示上个页面勾选的生产厂家，并将其置于列表最前面。现在需要做的是: <font color="#DC143C">当勾选列表页中一个或多个生产厂家，该生产厂家是二次筛选结果页(上一个页面)中，默认展示5个生产厂家中从未出现的一个，是一个新的生产厂家。则需要替换掉二次筛选结果页，生产厂家一栏中未被勾选的一个或多个生产厂家，直到全部替换完成。</font></p>
<blockquote>
<p>方案一: 进行多层嵌套循环遍历，判断如果对象的selected属性为YES，则跳出当前循环并做一个标记，再从新进行外层循环。这样就需要设置至少两个以上的标记在循环遍历的基础之上再进行循环遍历。增加了逻辑判断的复杂性，也使代码变得不易读。</p>
</blockquote>
<p>针对方案一不足之处，将方案一中的杂糅在一起的逻辑判断抽离成不同的情况，形成方案二。</p>
<blockquote>
<p>方案二: 需要定义两个可变数组，_dataList(二次筛选结果页，生产厂家数据源)，_selectList(生产厂家搜索页，所有勾选的生产厂家数据源)。对二者进行嵌套循环遍历，需要考录到三种不同情况，并对这三种情况进行一一判断。<br>① _dataList全部包含了_selectList中的元素；<br>② _dataList不包含_selectList中的元素；<br>③ _dataList包含部分_selectList中的元素。</p>
</blockquote>
<p>针对以上三种情况对应的具体步骤: </p>
<ul>
<li>① 遍历找到_dataList中的_selectList元素，变更生产厂家Model中selected状态，将这些选中的元素放到_dataList中元素位置的最前面；</li>
<li>② 直接将_selectList插入到_dataList的最前面；</li>
<li>③ 先替换，再插入新元素到_dataList中，最后再将生产厂家Model中selected为YES的元素前置到_dataList的最前面位置。</li>
</ul>
<p>方案二仍需要进行大量的判断，操作起来仍旧复杂。那么，有没有简单粗暴，提刀就干的方案呢？下面就要说说方案三了。</p>
<blockquote>
<p>方案三: 在生产厂家搜索列表页面直接进行操作。在二次筛选结果页点击跳转至生产厂家搜索页时，传入已经选中生产厂家的数组_selectList，生产厂家搜索结果列表页的数据源_datalist(包含当前已选中生产厂家的数组_selectList和所有未选中的生产厂家)。点击”确定“按钮时，去除_datalist中已选中的生产厂家的Model，然后使用block反向将去除后的_datalist和_selectList传给二次筛选结果页。</p>
</blockquote>
<p>这样在二次筛选结果页就能直接操作已经处理过的筛选数据了，不用再进行复杂的逻辑判断了。总的来说，这种替换原有页面数据源的操作，以后还是在可以对数据源进行修改的页面进行处理，避免最后需要进行复杂的逻辑判断。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/liuzhiyi1992/ZYSideSlipFilter" target="_blank" rel="external">ZYSideSlipFilter</a></p>
<p><a href="https://stackoverflow.com/questions/8834031/objective-c-nsmutablearray-mutated-while-being-enumerated" target="_blank" rel="external">Objective-C NSMutableArray mutated while being enumerated?
</a></p>
<p><a href="https://stackoverflow.com/questions/32865704/collection-nsarraym-0x7fa1f2711910-was-mutated-while-being-enumerated" target="_blank" rel="external">Collection <__nsarraym: 0x7fa1f2711910=""> was mutated while being enumerated
</__nsarraym:></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个类似于京东搜索结果页的筛选功能，侧边栏条件筛选器，根据不同的数据类型进行条件筛选及筛选条件的排列展示。&lt;/p&gt;
&lt;h1 id=&quot;构建原理及使用到的技术点&quot;&gt;&lt;a href=&quot;#构建原理及使用到的技术点&quot; class=&quot;headerlink&quot; title=&quot;构建原理及使用
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="二次筛选" scheme="http://XibHe.github.io/tags/%E4%BA%8C%E6%AC%A1%E7%AD%9B%E9%80%89/"/>
    
      <category term="NSArray enumerate" scheme="http://XibHe.github.io/tags/NSArray-enumerate/"/>
    
  </entry>
  
  <entry>
    <title>重构webView页面间跳转逻辑</title>
    <link href="http://XibHe.github.io/2017/08/07/reconsiderUrlPush/"/>
    <id>http://XibHe.github.io/2017/08/07/reconsiderUrlPush/</id>
    <published>2017-08-06T16:00:00.000Z</published>
    <updated>2017-09-08T13:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在处理webView页面内的跳转逻辑时，需要在当前webView中点击某个按钮push到另一个webView页，在这个新的webView页中仍然可以操作页面上的点击事件，跳转到其他webView页面。于是，这些webView页面可以相互跳转，不断跳转新的或者之前的webView页面。</p>
<h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>点击商品进入到“商品详情”页(GoodInforH5WebViewController)，点击店铺进入“店铺详情”页(ShopInfoH5WebViewController)，其中(“商品详情”页和”店铺详情”页均为webView)。其中，店铺详情页和商品详情页可以相互跳转。</p>
<h1 id="当前逻辑"><a href="#当前逻辑" class="headerlink" title="当前逻辑"></a>当前逻辑</h1><p>在继承于UINavigationController的自定义导航控制器MyNavigationController里做判断，重写方法:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>pushViewController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>viewController animated<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span> respondsToSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>interactivePopGestureRecognizer<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>interactivePopGestureRecognizer<span class="token punctuation">.</span>delegate <span class="token operator">=</span> nil<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        viewController<span class="token punctuation">.</span>hidesBottomBarWhenPushed <span class="token operator">=</span> YES<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>viewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span>viewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            viewController<span class="token punctuation">.</span>navigationItem<span class="token punctuation">.</span>leftBarButtonItem <span class="token operator">=</span> <span class="token punctuation">[</span>UIBarButtonItem itemWithTarget<span class="token punctuation">:</span><span class="token keyword">self</span> action<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>backRootViewController<span class="token punctuation">)</span> image<span class="token punctuation">:</span><span class="token string">@"navigation_back"</span> highlightImage<span class="token punctuation">:</span><span class="token string">@"navigation_back"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>     
   <span class="token punctuation">[</span><span class="token keyword">super</span> pushViewController<span class="token punctuation">:</span>viewController animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重写GoodInforH5WebViewController和ShopInfoH5WebViewController的返回事件。即，backRootViewController。在backRootViewController方法里做相应页面的跳转操作。</p>
<p>在GoodInforH5WebViewController页面的viewWillAppear方法里进行页面跳转逻辑的判断。如下:</p>
<font color="#DC143C"> 前方高能预警!!! </font>

<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillAppear<span class="token punctuation">:</span>animated<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController setNavigationBarHidden<span class="token punctuation">:</span>NO animated<span class="token punctuation">:</span>NO<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//[_webView reload];</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.navigationController.viewControllers count = %ld"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.navigationController.viewControllers = %@"</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 若是经首页;分类列表页面;订单中心;商业店铺列表页;我的收藏,且viewControllers&lt;5,则设置pop回上一页的标识;商家促销,且viewControllers&lt;5,则设置pop回上一页的标识</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_bussinessUrl"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"assortment_searchByCate"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"sellOrderCenter_buyOrders"</span><span class="token punctuation">]</span> <span class="token operator">||</span> 
        <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"My_collectionListUrl"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span>
         <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"businessShopSearchList_goodInfo"</span><span class="token punctuation">]</span> <span class="token operator">||</span>  
         <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"ActivityViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> 
         <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"BusinessPromoteViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"1"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"GoodsListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"search_searchByKey"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"business_shopSearch"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"businessShopSearchList_shopInfo"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_productDetailUrl"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"ShopCarListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 从GoodsListViewController跳转至原生商品详情页面;从顶部搜索等页面跳转至原生商品详情页面; 从商业店铺搜索结果列表页跳转,点击返回至self.viewControllers[2]的页面;若是从搜索首页，分类的搜索结果页跳转而来,返回搜索商品列表页;若是从商业店铺列表页跳转而来，则返回到店铺详情的H5页面;从首页商品-->商品详情-->店铺详情-->商品详情，并且viewControllers>=4，则返回店铺详情页;从原生购物车跳转而来,且viewControllers>=4，则返回店铺详情页;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"2"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"shopInfor_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"assortment_searchByCate"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"My_collectionListUrl"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"ActivityViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"GoodsListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 若是从商业店铺详情搜索跳转而来;若是从分类列表页跳转而来;若是从我的收藏跳转而来，且viewControllers>=5，则返回店铺详情页面。</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"3"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"GoodsListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 从搜索商品列表-->商品详情-->店铺详情-->商品详情,且viewControllers>=6，则返回店铺详情页；从订单详情页-->商品详情-->店铺详情-->商品详情,且viewControllers>=6，则返回店铺详情页；</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"4"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"shopInfor_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 从搜索商品列表-->商品详情-->店铺详情-->商品详情,且viewControllers>=7，则返回店铺详情页。</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"5"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"0"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里是通过设置一个名为KPopHomeIndentify的NSUserDefaults对象用于存储navigationController中，当前页面的层级。通过设置一个名为_fromWebUrl的字符串，用于判断是哪个页面跳转而来的。二者结合起来，设置经过GoodInforH5WebViewController页面的返回逻辑。</p>
<p>当触发商品详情页的跳转链接时，需要在webView的shouldStartLoadWithRequest代理方法里做判断，当request的绝对地址中包含店铺详情的路径时，则push到店铺详情页。如下:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token macro property">#<span class="token directive keyword">pragma</span> mark - UIWebViewDelegate</span>
<span class="token operator">-</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView shouldStartLoadWithRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span><span class="token punctuation">)</span>request navigationType<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebViewNavigationType<span class="token punctuation">)</span>navigationType
<span class="token punctuation">{</span>
    _absoluteUrl <span class="token operator">=</span> <span class="token punctuation">[</span>request<span class="token punctuation">.</span>URL absoluteString<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// push到店铺详情页面</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_absoluteUrl rangeOfString<span class="token punctuation">:</span><span class="token string">@"appLink/showBusyInfo?"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location <span class="token operator">!=</span> NSNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        ShopInfoH5WebViewController <span class="token operator">*</span>shopInforH5WebVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ShopInfoH5WebViewController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
        shopInforH5WebVC<span class="token punctuation">.</span>webUrl <span class="token operator">=</span> _absoluteUrl<span class="token punctuation">;</span>
        shopInforH5WebVC<span class="token punctuation">.</span>fromWebUrl <span class="token operator">=</span> _fromWebUrl<span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController pushViewController<span class="token punctuation">:</span>shopInforH5WebVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> NO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> YES<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再回到自定义导航控制器MyNavigationController重写的返回事件中:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>backRootViewController
<span class="token punctuation">{</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.viewControllers = %@"</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    NSString <span class="token operator">*</span>popIndentify <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> objectForKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
    UIViewController <span class="token operator">*</span>viewCtl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"4"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"5"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>viewCtl animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样是结合GoodInforH5WebViewController中设置好的KPopHomeIndentify进行判断。根据KPopHomeIndentify存储的导航控制器中的页面层级，在导航控制器中通过这些层级获取到对应的页面viewController，最后popToViewController到这些页面中。</p>
<h1 id="重构原因"><a href="#重构原因" class="headerlink" title="重构原因"></a>重构原因</h1><p>看了上面那一片高能预警的代码逻辑，重构原因就不言而喻了。</p>
<blockquote>
<p>*逻辑判断复杂，每次新增与商品详情，店铺详情相关页面时，都需要新增一系列对应页面层级的判断逻辑；</p>
<p>*给调试造成困难，与商品详情，店铺详情关联的页面很多，需要进行多场景的关联测试；</p>
<p>*最重要的一点:每次从商品详情页跳转到店铺详情都需要重新重新alloc一个新的ShopInfoH5WebViewController对象，耗费了很多资源。</p>
</blockquote>
<h1 id="重构逻辑"><a href="#重构逻辑" class="headerlink" title="重构逻辑"></a>重构逻辑</h1><p>通过设置NSUserDefaults存储页面层级方式进行页面跳转的逻辑，不易操纵，并且非常的不合理，也降低了代码的可读性。设想一下，这里之所以明确不同跳转页面在navigationController中的层级关系，是为了返回操作能回退到指定页面。而导致该冗余代码的罪魁祸首是:每次触发商品详情页或店铺详情页的跳转链接时，都会重新alloc一个新的对象。在进行多次跳转操作后，navigationController中控制的层级就会一直增加，若想在pop操作时跳转到指定页面，就必须明确所要跳转页面在导航控制器中的层级。</p>
<p>那接下来的操作就很明确了，首先移除GoodInforH5WebViewController中viewWillAppear里的一堆判断代码；然后，在webView的代理方法shouldStartLoadWithRequest中增加跳转判断，如下:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token macro property">#<span class="token directive keyword">pragma</span> mark - UIWebViewDelegate</span>
<span class="token operator">-</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView shouldStartLoadWithRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span><span class="token punctuation">)</span>request navigationType<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebViewNavigationType<span class="token punctuation">)</span>navigationType
<span class="token punctuation">{</span>
    _absoluteUrl <span class="token operator">=</span> <span class="token punctuation">[</span>request<span class="token punctuation">.</span>URL absoluteString<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"_absoluteUrl = %@"</span><span class="token punctuation">,</span>_absoluteUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// push到商业店铺详情页面</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_absoluteUrl rangeOfString<span class="token punctuation">:</span><span class="token string">@"appLink/showBusyInfo?"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location <span class="token operator">!=</span> NSNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        UIViewController <span class="token operator">*</span>shopInfoH5WebViewController<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>shopInfoH5WebViewController <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>shopInfoH5WebViewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//                addExtractBankCardVCIndex = [self.navigationController.viewControllers indexOfObject:addExtractBankCardVC];</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController popToViewController<span class="token punctuation">:</span>shopInfoH5WebViewController animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>shopInfoH5WebViewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ShopInfoH5WebViewController <span class="token operator">*</span>shopInforH5WebVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ShopInfoH5WebViewController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
                shopInforH5WebVC<span class="token punctuation">.</span>webUrl <span class="token operator">=</span> _absoluteUrl<span class="token punctuation">;</span>
                shopInforH5WebVC<span class="token punctuation">.</span>fromWebUrl <span class="token operator">=</span> _fromWebUrl<span class="token punctuation">;</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController pushViewController<span class="token punctuation">:</span> shopInforH5WebVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>       
       <span class="token keyword">return</span> NO<span class="token punctuation">;</span>  
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> YES<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里遍历navigationController.viewControllers中所有视图控制器。如果存在店铺详情(ShopInfoH5WebViewController)对象类，则直接popToViewController到该控制器中；如果不存在，则alloc一个新的店铺详情(ShopInfoH5WebViewController)，并pushViewController到该页面。</p>
<p>最后仍然需要在自定义导航控制器MyNavigationController重写的返回事件（backRootViewController）中做跳转的逻辑判断。如下:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>backRootViewController
<span class="token punctuation">{</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.viewControllers = %@"</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 当前视图控制器</span>
    UIViewController <span class="token operator">*</span>currentVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers lastObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 视图控制器的层级</span>
    NSInteger currentVCIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers indexOfObject<span class="token punctuation">:</span>currentVC<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 上一个页面的视图控制器</span>
    UIViewController <span class="token operator">*</span>previousVC <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span>currentVCIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>currentVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previousVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previousVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span> popViewControllerAnimated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>currentVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 其他会跳转到店铺页面视图的跳转逻辑</span>
        UIViewController <span class="token operator">*</span>previoussLastVC<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>currentVCIndex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           previoussLastVC <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span>currentVCIndex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            previoussLastVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers firstObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previousVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 我的积分跳转</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>OrderDetailsViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 我的收藏</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>MyCollectionViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 分类</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>LonchH5WebController class<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>AssortmentViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 首页，分类搜索结果页</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>SearchResultViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToRootViewControllerAnimated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span> popViewControllerAnimated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>      
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里通过获取当前页面层级，以及当前页面上一个页面的层级，通过这些层级做相应的跳转操作:</p>
<blockquote>
<p>如果当前页面是商品详情页(GoodInforH5WebViewController)，再进一步判断它的上个页面是否为店铺详情页(ShopInfoH5WebViewController)，若是则popToViewController到上个页面，否则直接popViewControllerAnimated；</p>
<p>如果当前页面是店铺详情页(ShopInfoH5WebViewController)，则需要判断当前视图层级是否越界(当前页面层级currentVCIndex不会超过3级，可能会遇到导航控制器中只有1个视图控制器的情况)，这里与商品详情页不同的是:增加了其它会跳转到店铺页面视图的跳转逻辑。需要对这些页面（积分、我的收藏、分类、搜索结果页）的跳转进行判断。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>事不过三，过则重构!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在处理webView页面内的跳转逻辑时，需要在当前webView中点击某个按钮push到另一个webView页，在这个新的webView页中仍然可以操作页面上的点击事件，跳转到其他webView页面。于是，这些webView页面可以相互跳转，不断跳转新的或者之前的webVi
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="重构" scheme="http://XibHe.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>(译)一个给iOS App瘦身的奇怪窍门</title>
    <link href="http://XibHe.github.io/2017/07/23/One%20Weird%20Trick%20to%20Lose%20Size/"/>
    <id>http://XibHe.github.io/2017/07/23/One Weird Trick to Lose Size/</id>
    <published>2017-07-22T16:00:00.000Z</published>
    <updated>2017-07-23T10:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>流行的社交网络应用程序超过400M。每周更新一次，每年你下载的应用总量接近20G。</p>
<p>自从我们推出了<a href="https://halide.cam" target="_blank" rel="external">Halide</a>，我们听到的最令人意想不到的赞美就是它的大小。 在11M，我们将在一年内推出较少数据的更新，而不是社交网络应用进行频繁更新。</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/LoseSizeMajor.png" alt=""><br>一个朋友问道：“所以你没有使用Swift。” 毕竟，Swift将其标准库捆绑到你的应用程序中，使应用大小增大。 Halide几乎完全是使用Swift编写的。</p>
<p>我们是怎么做的？ 我们从技术位开始吧。 <a href="https://developer.apple.com/library/content/qa/qa1795/_index.html" target="_blank" rel="external">这里</a>有很多关于如何减少App大小的重要评论。</p>
<h2 id="测量，不要猜"><a href="#测量，不要猜" class="headerlink" title="测量，不要猜"></a>测量，不要猜</h2><p>从Xcode导出版本构建。 选择“Save for Ad Hoc deployment.”。假设你的应用程序支持<a href="https://developer.apple.com/videos/play/wwdc2015/404/" target="_blank" rel="external">app thinning</a>（此时真的应该这样做），请选择“Export for Specific Devices.”。确保选中“<font size="4" face="黑体"> Rebuild from bitcode </font>”。</p>
<p>你不仅可以获得最终包的大小，还可以获得App Thinning报告。检查你的应用程序包，找到最大存储空间的占用者。</p>
<h2 id="使用-Asset-Catalogs"><a href="#使用-Asset-Catalogs" class="headerlink" title="使用 Asset Catalogs"></a>使用 Asset Catalogs</h2><p>将资源保存在资源目录中。当你上传应用程序时，Apple将其分解为特定设备的版本，因此具有2x屏幕的设备不会获得3x资源，反之亦然。</p>
<h2 id="运行-PNG-crush"><a href="#运行-PNG-crush" class="headerlink" title="运行 PNG-crush"></a>运行 PNG-crush</h2><p>将资源放入目录之前，请运行pngcrush。 根据<a href="https://developer.apple.com/library/content/qa/qa1681/_index.html" target="_blank" rel="external">QA1681</a>，Xcode将自动压缩资源目录之外的PNG资源。</p>
<h2 id="尝试JPEG格式照片"><a href="#尝试JPEG格式照片" class="headerlink" title="尝试JPEG格式照片"></a>尝试JPEG格式照片</h2><p>由于UI资源格式限制以及PNG格式资源更加精细。这可能构成了你应用程序中大部分资源，但如果你有照片，请尝试使用JPEG格式。这样做会有些压力。</p>
<h1 id="现在进入到一个困难步骤的实现"><a href="#现在进入到一个困难步骤的实现" class="headerlink" title="现在进入到一个困难步骤的实现"></a>现在进入到一个困难步骤的实现</h1><p>经过这么辛苦的工作，你只能删掉一个100M项目中几M的文件。我不知道如何告诉你，但你需要更少的代码。</p>
<h2 id="选择正确的方式"><a href="#选择正确的方式" class="headerlink" title="选择正确的方式"></a>选择正确的方式</h2><p>Halide有大概15000行用Swift编写的代码。这包括一个实时视频处理器，一系列自定义控件，以及我们控制AVFoundation的平台。有趣的是我并没有写代码。</p>
<p>通过使用自动布局，我绘制了数千条样板。许多开发人员仍然坚持手工布局。也许他们不明白自动布局，也许他们听到朋友的朋友关于自动布局如何缓慢的言论。（事实并非如此。）</p>
<p>我看到太多的开发人员 - 特别是在大型公司 - 发明内部布局引擎。这简直太疯狂了。当Apple在操作系统上捆绑一个精细的布局引擎时，不要用自己定制的框架来增大应用程序。</p>
<p>我们可以通过删除Interface Builder来减少100k。用户手册和设置几乎完全是具有约束条件的IB。相机UI的高级布置也类似如此。但我们认为短期内开发进度是值得肯定的。</p>
<h2 id="避免Library过大"><a href="#避免Library过大" class="headerlink" title="避免Library过大"></a>避免Library过大</h2><p>检查许多大型应用程序的包，你会发现几十个第三方框架，大小从100k到几兆。</p>
<p>我不使第三方库。这虽然有点极端，但我们有一个独特的情况。</p>
<p>很多第三方库不具备我们所需要的功能。iOS开发社区拥有大量的JSON映射器，但对于DNG文件的低级操作没有任何意义。</p>
<p>但是我之前提到的视频处理呢？我可以听到你大声喊叫，“GPUImage是可扩展的！你的做法太疯狂了!”</p>
<p>从我对Periscope的堆栈的<a href="https://news.realm.io/news/building-periscope-sketches-ios/" target="_blank" rel="external">经验</a>来看，我们看到从GPUImage到内部解决方案的巨大收益。如果实时图像处理不是你业务的一部分，GPUImage就会很好。但是鉴于我们对Halide的长期愿景，以及实时渲染的作用，重要的是能掌控这样的组件。</p>
<p>由于文件太大，我从未引入过GPUImage。但是作为自己疯狂的结果，我避免了在我们的应用程序中捆绑125个未使用的过的滤镜。</p>
<p>PSPDFKit具有相似的<a href="https://pspdfkit.com/blog/2017/pspdfkit-ios-6-8/" target="_blank" rel="external">成功经验</a>，取代了太大的框架：</p>
<blockquote>
<p>我们很高兴地告诉你，使用PSPDFKit 6.8 for iOS，我们重写了数字签名实施的核心，以改进检测，验证和更好的错误报告。因此，我们也设法完全放弃了对OpenSSL的依赖，从而减少了二进制文件的大小。</p>
</blockquote>
<p>不要感染 Not-Invented-Here 综合征，有<a href="https://sandofsky.com/blog/third-party-libraries.html" target="_blank" rel="external">很多理由</a>来避免使用三方库。</p>
<h2 id="不要在分析和A-B测试中浪费资源"><a href="#不要在分析和A-B测试中浪费资源" class="headerlink" title="不要在分析和A / B测试中浪费资源"></a>不要在分析和A / B测试中浪费资源</h2><p>我们不会使用任何第三方分析或崩溃报告服务。首先，我们不是很乐意将用户数据发送给广告公司。让我们暂停这样的想法。</p>
<p>数据不是免费的。在大型应用中，每个动作都会记录一个分析事件。大型应用程序需要日志记录基础设施 - 唯一标识用户，重复数据删除请求，缓存日志，重试失败等。这些操作都会进行叠加。</p>
<p>A / B测试更糟糕。你的典型社交网络应用程序由于没有人使用而死在的A / B测试上。</p>
<p>我们出于代码膨胀的考虑避免了分析和A / B测试。这只是我们的产品理念。知道太多的数据会扭曲你的想法。你发现自己在优化某个不存在的特殊场景，而不是真的去关注用户实际会不会有这样的需求。</p>
<p>所以我们使用苹果分析。它只是简单的记录，没有任何代码更改。并且免费。它尊重用户的隐私，需要选择加入。我们的选择加入率为32％，这对我们的需求是很好的。</p>
<p>有分析的时间和地点。我们不确定我们的最优价格，所以我们可以在那里进行实验。然而，我们在业务驱动的分析和产品开发之间保持隔离。</p>
<h1 id="你需要一致的目标"><a href="#你需要一致的目标" class="headerlink" title="你需要一致的目标"></a>你需要一致的目标</h1><p>我们是一个两个人的开发团队。我们通过销售产品赚钱。我们顺其自然的成长。当用户高兴时，他们会向朋友们推荐我们。小应用让我们开心，我们认为用户也很开心。</p>
<p>我们的建议并不能帮助应用程序包很大的App。社交网络通过广告赚钱，广告客户需要详细的分析广告定位。</p>
<p>大型应用程序拥有数百名开发人员，组成数十个团队，每个团队都有独立的季度目标。 你走的越快，你达成的目标越多，你的晋升越有可能。</p>
<p>想想这是可以理解的，“这个三方库节省了我们一个星期的开发时间，但是在我们的应用程序中增加了1M。那么我们的App已经是几百M了，还有其它办法吗？”</p>
<p>大型组织充满带来意想不到后果的合理想法。</p>
<p>据说工程师想得到提升。输送功能不会让你达到目的。建立一个新的布局引擎。该公司甚至获得了工程博客的招聘诱饵。</p>
<p>唯一的解决方案是高层领导宣布：“我们将减少我们的应用程序大小。”不幸的是，科技CEO们不会使用8G的储存空间的iPhone，他们不会生活在网速受限的地区。</p>
<p>这不是一个毫不费力的努力。自从Halide发布以来，我们收到了来自世界各地的大量消息，感谢我们努力保持App的小巧。</p>
<p>减小App安装包大小真的有一个奇怪的伎俩：专注于你的客户。</p>
<h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="https://blog.halide.cam/one-weird-trick-to-lose-size-c0a4013de331" target="_blank" rel="external">One Weird Trick to Lose Size</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流行的社交网络应用程序超过400M。每周更新一次，每年你下载的应用总量接近20G。&lt;/p&gt;
&lt;p&gt;自从我们推出了&lt;a href=&quot;https://halide.cam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Halide&lt;/a&gt;，我们听到的最令人意想
    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="App瘦身" scheme="http://XibHe.github.io/tags/App%E7%98%A6%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>第一个父亲节</title>
    <link href="http://XibHe.github.io/2017/06/18/First-father&#39;s-day/"/>
    <id>http://XibHe.github.io/2017/06/18/First-father&#39;s-day/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2017-06-22T12:28:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>我和妻子是大学同学，在恋爱长跑五年后结了婚。妻子老家不是我们那边的，但是在同一个省，最开始的地域原因，造成了我家人对她的偏见。我们俩克服了种种阻碍，在15年情人节那天领了证。</p>
<p>我们的小孩比计划来的早，妻子一直很期待在猴年能生一个聪明伶俐的猴宝宝。当得知自己要作父亲的那一天，内心感受是复杂的，有期待，也有忐忑。觉得自己没有做好成为一个父亲的准备。伴随着孩子快要出生，我的这种焦虑感越发的明显了。在妻子待产期间，没有全身心的去照顾她，总是把工作中的压力和不快带到家里。终于，在一个周三的早上爆发了…… 最后，还是妻子在妻子的安慰下，我才渐渐平复了自己的心情。</p>
<p>由于老家人和妻子之间的矛盾，再加上我父母都不在老家，不能照顾快要临产的妻子。最终选择在我妻子老家待产。孩子出生那天的凌晨十二点多，那时我并不在妻子身边，电话那头当妻子告诉我小家伙出生了，是个男孩时，我就再也控制不住自己的激动，惊喜，幸福的感情了。当得知妻子由于羊水不足而剖腹产时，听着电话一头，妻子有气无力的声音。当时真想给自己一巴掌，我没有尽到作丈夫的责任，在妻子临盆时不能陪在她身边，给她鼓励，让她安心。还让我岳母，一个50多岁，腿脚不便利的老人家为我妻子跑前跑后，楼上楼下的张罗妻子生产的一切事宜。</p>
<p>像我这样的渣男竟然还有女人给我生孩子，把自己的终身幸福托付给我。我上辈子一定是积了什么大功德了！无法忘记第一次见到小家伙的场景，他紧握着一双小手，眼睛半闭半睁，好奇的打量着周围的一切。虽然我嘴上一直在埋怨小家伙让他妈妈挨了一刀，但心里还是对他充满了怜爱。唯一遗憾的是，陪在她们母子身边的时间太短，不等小家伙满月我就不得不离开她们母子俩，带着不舍与留恋重新投入到工作中。</p>
<p>这次端午节回家，小家伙给了我一个大大的惊喜。刚一见面，盯着看了我半天，然后就用一双小手抚摸我的脸，最后，嘿嘿一笑，扑到我的怀里。那一刻，时间仿佛静止，而我又找到了初恋的感觉[害羞]。这不禁又让我感慨了一番：不能时刻陪在你身边，经历你的成长，听到你第一次喊爸爸。终究是我无法弥补的遗憾。这里不奢望能得到你的原谅，只希望将来的某一天你能理解。成年人的生活里没有容易二字。爱❤你我的小宝贝！            </p>
<p>再过一个多月我们家宝宝就一岁了，这一年来我经历了很多，也成长了很多。感谢妻子的宽容和奉献，她总是迁就我的时不时就发作的小情绪，安慰我，鼓励我，支持我。尽她最大的力量来爱我和儿子。爱❤你我的大宝贝！你和儿子就是我的一切，我的天下无双。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我和妻子是大学同学，在恋爱长跑五年后结了婚。妻子老家不是我们那边的，但是在同一个省，最开始的地域原因，造成了我家人对她的偏见。我们俩克服了种种阻碍，在15年情人节那天领了证。&lt;/p&gt;
&lt;p&gt;我们的小孩比计划来的早，妻子一直很期待在猴年能生一个聪明伶俐的猴宝宝。当得知自己要作
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="父亲节" scheme="http://XibHe.github.io/tags/%E7%88%B6%E4%BA%B2%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>《黑客与画家》小记</title>
    <link href="http://XibHe.github.io/2017/05/31/hacker-and-artist/"/>
    <id>http://XibHe.github.io/2017/05/31/hacker-and-artist/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2017-06-30T14:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imciel.com" target="_blank" rel="external">郭一刀</a>推荐的一本书，一本关于创业经历，软件开发，个人品味的书。也许是书中的章节相互独立，给我的感觉像是集合了众多的tips。而这些闪光点，或是忠告，或是建议，或者结合了很多事实而形成的结论。读后给我一种醍醐灌顶的感觉，Paul结合自己的创业和开发经历，将计算机编程的本质娓娓道来。全书大致分成三个部分:</p>
<ul>
<li>解释了什么是黑客，黑客是如何看待这个世界的。</li>
<li>黑客去的成果，这些成果对世界的影响，如何创造财富？用黑客的方法防止垃圾邮件。</li>
<li>黑客心目中完美的编程语言是什么样的，为什么黑客如此执着于设计新的编程语言。</li>
</ul>
<p>Paul是世界上首个互联网应用程序Viaweb的开发者之一。创建的Viaweb公司后来被雅虎收购，改名为Yahoo!Store。后来Paul成为一名资深的投资人，作为一名成功的创业者同时也是一名熟练使用Lisp语言的专家。他的经历很生动，完美诠释黑客文化的基础和核心。其中是我印象深刻的是一段关于如何促成潜在的买方掏钱收购自己创业公司的论述:</p>
<blockquote>
<font size="3" face="黑体"> 大多数时候，促成买方掏钱的最好办法不是让买方看到有获利的可能，二手让他们感到失去机会的恐惧。对于买家来说，最强的收购动机就是看到竞争对手可能收购你。我们发现这会使得CEO们连夜行动。次强的动机则是让他们担心如果现在不买你，你的高速成长将使得未来的收购耗资巨大，甚至你本身可能变成一个他们的竞争对手。 </font>

</blockquote>
<p>Paul曾经学习过绘画，绘画是一门艺术性很强，同时需要欣赏者有着相应的鉴赏和审美能力的创作方式。Paul总是能将自己的编程和创业经历与之结合起来，切中要害的指出二者之间的联系。</p>
<p>关于设计者的品味，只要你开始思考这个问题，你就会发现不同的领域对于“美”的理解有着惊人的相似度。优秀设计的原则是许多学科的共同原则，一再反复地出现。</p>
<blockquote>
<ul>
<li>好设计是简单的设计</li>
<li>好设计是永不过时的设计</li>
<li>好设计是解决主要问题的设计</li>
<li>好设计是启发性的设计</li>
<li>好设计通常是有点趣味性的设计</li>
<li>好设计是艰苦的设计</li>
<li>好设计是看似容易的设计</li>
<li>好设计是对称的设计</li>
<li>好设计是模仿大自然的设计</li>
<li>好设计是一种再设计</li>
<li>好设计是能够复制的设计</li>
<li>好设计常常是奇特的设计</li>
<li>好设计是成批出现的</li>
<li>好设计常常是大胆的设计</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://imciel.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;郭一刀&lt;/a&gt;推荐的一本书，一本关于创业经历，软件开发，个人品味的书。也许是书中的章节相互独立，给我的感觉像是集合了众多的tips。而这些闪光点，或是忠告
    
    </summary>
    
      <category term="阅读" scheme="http://XibHe.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="《黑客与画家》" scheme="http://XibHe.github.io/tags/%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用JSExport进行JS交互时遇到的一个问题</title>
    <link href="http://XibHe.github.io/2017/05/04/%E4%BD%BF%E7%94%A8JSExport%E8%BF%9B%E8%A1%8CJS%E4%BA%A4%E4%BA%92%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://XibHe.github.io/2017/05/04/使用JSExport进行JS交互时遇到的一个问题/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-06-25T07:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用JSExport与OC和JS进行通信，遇到一个问题，无法调用JS传递的最新购物车商品数量的交互方法。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将之前的放在VC里的JS交互方法抽离到单独的一个类中，这个类继承NSObject。不做任何特别的处理，将  </p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec">JSContext <span class="token operator">*</span>context <span class="token operator">=</span> <span class="token punctuation">[</span>webView valueForKeyPath<span class="token punctuation">:</span><span class="token string">@"documentView.webView.mainFrame.javaScriptContext"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
context<span class="token punctuation">[</span><span class="token string">@"jsObject"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这句代码，从</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>webViewDidFinishLoad<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>移到，</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView shouldStartLoadWithRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span><span class="token punctuation">)</span>request navigationType<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebViewNavigationType<span class="token punctuation">)</span>navigationType
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>该代理方法中，就能每次都调用JS与OC的交互方法。</p>
<h2 id="JavaScriptCore使用注意"><a href="#JavaScriptCore使用注意" class="headerlink" title="JavaScriptCore使用注意"></a>JavaScriptCore使用注意</h2><p>JavaStript调用本地方法是在子线程中执行的，这里要根据实际情况考虑线程之间的切换，而在回调JavaScript方法的时候最好是<font color="#FA8072">在刚开始调用此方法的线程中去执行那段JavaStript方法的代码。</font></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.csdn.net/lwjok2007/article/details/47058795" target="_blank" rel="external">iOS js oc相互调用（JavaScriptCore）（二）</a><br><a href="http://blog.csdn.net/si392950818/article/details/51646996" target="_blank" rel="external">ios 与 js交互一点心得</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/XibHe/JSExportTest" target="_blank" rel="external">点击下载</a></p>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>这里只有获取购物车最新商品数量时，无法调用JS交互方法，其他的JS交互方法仍然可以调用。那么<font color="#FA8072">获取JSContext的时机是什么</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用JSExport与OC和JS进行通信，遇到一个问题，无法调用JS传递的最新购物车商品数量的交互方法。&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;将
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="JSExport" scheme="http://XibHe.github.io/tags/JSExport/"/>
    
      <category term="JS里通过对象调用方法" scheme="http://XibHe.github.io/tags/JS%E9%87%8C%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>(译)HTTPS的工作原理</title>
    <link href="http://XibHe.github.io/2017/04/27/HTTPS/"/>
    <id>http://XibHe.github.io/2017/04/27/HTTPS/</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-06-30T14:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS只是标准HTTP协议涂上一层美味的SSL/TLS加密信息。 除非出现严重错误,它可以防止人们因<a href="https://en.wikipedia.org/wiki/Alice_and_Bob" target="_blank" rel="external">infamous Eve</a>查看或修改那些构成你浏览中产生的请求；让你可以安全的在你的电脑和服务器之间发送密码、通信和信用卡信息等数据。当绿色小挂锁和字母“https”出在你的地址栏时，并不意味你所访问的网站仍是之前的，而不是已经被篡改过的，当你打开网页时这些标识至少帮助你安全地访问网页。</p>
<h2 id="1-什么是HTTPS以及它做了什么"><a href="#1-什么是HTTPS以及它做了什么" class="headerlink" title="1.什么是HTTPS以及它做了什么?"></a>1.什么是HTTPS以及它做了什么?</h2><p>HTTPS是著名的HTTP协议，是在SSL / TLS(以下简称为“SSL”)加密层之上。服务器和客户端仍然通过完全相同的HTTP协议进行通信，但二者的通信是建立在一个安全的SSL连接,加密和解密请求和响应体系之上的。SSL有两个主要目的:</p>
<ul>
<li>验证你所访问的服务器的正确性</li>
<li>确保你与服务器之间的数据通信，无论是你发送给服务器的还是服务器返回给你的信息不被篡改</li>
</ul>
<p>真正非常聪明的部分是任何人都可以拦截您与服务器交换的每一个消息，包括您同意使用密钥和加密策略的消息，仍然无法读取任何实际发送的数据。</p>
<h2 id="2-如何建立SSL连接"><a href="#2-如何建立SSL连接" class="headerlink" title="2.如何建立SSL连接"></a>2.如何建立SSL连接</h2><p>通过握手建立客户端和服务器之间的SSL连接，其目的是:</p>
<ul>
<li>为了确实与客户端通信服务器的正确性</li>
<li>双方已经同意一个“密码套件”，其中包括二者将用于交换数据的加密算法</li>
<li>双方已就此算法达成任何必要的密钥</li>
</ul>
<p>一旦连接建立，双方可以使用约定的算法和密钥来安全地发送消息给彼此。我们将把握手分为3个主要阶段 - 发送Client Hello报文，证书交换和密钥交换。</p>
<p>1.客户端发送Client Hello报文 — 握手开始于客户端发送Client Hello报文。这包含服务器通过SSL连接到客户端所需的所有信息，包括各种密码套件及其支持的最大SSL版本。服务器使用Server Hello报文进行响应，报文中包含客户端所需的类似信息，包括根据客户端的偏好决定将使用哪个加密套件和SSL版本。</p>
<p>2.证书交换 — 现在连接已经建立起来了，服务器必须向客户端证明其身份。这是使用SSL证书来实现的，这是一个很小的类似于护照的东西。SSL证书包含各种数据，包括所有者的名称，附加的属性（例如域），证书的公钥，数字签名和有关证书有效期的信息。客户端检查隐式信任该证书，或者它被隐式信任的几个证书颁发机构（CA）之一被验证和信任。更多关于证书的要求。注意服务器还可以要求通过证书证明客户端的身份，但这通常只发生在非常敏感的应用程序中。</p>
<p>3.密钥交换 — 客户端和服务器交换的实际消息数据的加密将使用一种对称算法来完成，该算法在发送Client Hello报文阶段已被认可。对称算法使用单个密钥进行加密和解密，与需要公钥/私钥对的不对称算法相反。双方需要就此单一的对称密钥达成一致，即使用非对称加密和服务器的公钥/私钥可以安全地实现这一过程。</p>
<p>客户端生成用于主对称算法的随机密钥。它使用在发送Client Hello报文阶段中同意的算法和服务器的公钥（在其SSL证书上找到）对其进行加密。它将此加密密钥发送到服务器，使用服务器的私钥对其进行解密，握手会话中有趣部分就这样完成了。双方都充满乐意，如同他们正在和正确的人交谈，并且秘密地同意对对方加密他们即将发送的数据的密钥。HTTP请求和响应现在可以通过对明文消息进行加密后发送。</p>
<h2 id="3-证书"><a href="#3-证书" class="headerlink" title="3.证书"></a>3.证书</h2><h3 id="3-1信任"><a href="#3-1信任" class="headerlink" title="3.1信任"></a>3.1信任</h3><p>在最基本的层次上，SSL证书只是一个文本文件，任何具有文本编辑器的人都可以创建一个。实际上，您可以创建一个证书，声称您是Google Inc.，并且你掌握域名gmail.com。如果这是事实，SSL就是一个笑话;身份验证基本上是客户端询问服务器“你是Google吗？”，服务器回复“呃，是的，这是一张纸，’我是Google’写的”，客户说“好，这是我所有的数据”。阻止这场闹剧的魔法是在数字签名中，允许一方验证另一方的纸张是否合法。<br>为什么你可能信任证书有两个明智的原因：</p>
<ul>
<li>如果它在你隐含信任证书的列表上</li>
<li>如果能够证明它是被上述列表中的一个证书的控制器所信任</li>
</ul>
<p>第一个标准很容易检查。您的浏览器具有可从其中查看，添加和删除证书颁发机构(CA)可信SSL证书预先安装的列表。这些证书由一个集中的（在理论上，一般在实践中）组织来控制，这些组织非常安全，可靠和值得信赖，如Symantec，Comodo和GoDaddy。如果服务器从该列表中提供证书，那么您可以信任它。</p>
<p>第二个标准很难。服务器很容易说：“er，我的名字是er，来自微软，你信任Symantec和er，他们完全相信我，所以很酷。”一个有点聪明的客户端可能会去问Symantec“我有一个来自微软的服务请求，说你相信他们，这是真的吗？”但即使Symantec说“是的，我们知道他们，微软是合法的”，您仍然不知道声称是Microsoft的服务器实际上真的是微软还是某些入侵者。这时候数字签名该登场了。</p>
<h3 id="3-2数字签名"><a href="#3-2数字签名" class="headerlink" title="3.2数字签名"></a>3.2数字签名</h3><p>如前所述，SSL证书具有关联的公钥/私钥对。公钥作为证书的一部分分发，私钥被保密。这对非对称密钥用于SSL握手，以交换另一个密钥，供双方对数据加密和解密。客户端使用服务器的公钥加密对称密钥，并将其安全地发送到服务器，服务器使用其私钥对其进行解密。任何人都可以使用公钥加密，但只有服务器可以使用私钥进行解密。</p>
<p>数字签名的情况恰恰相反。证书可以由另一个机构“签署”，从而有效地记录在案，“我们已经证实该证书的控制人也控制证书上列出的属性（域名）”。在这种情况下，权限使用其私钥（广义地说）加密证书的内容，并且该密文作为数字签名附加到证书中。任何人都拥有权限使用公钥对该签名进行解密，并验证其是否为预期的解密值。但只有证书的所有者才能使用私钥加密内容，所以只有所有者才能实际创建一个有效的签名。</p>
<p>因此，如果服务器声称拥有由Symantec（或其他CA）签署的Microsoft.com的证书，那么您的浏览器不需要为此签名。如果是合法的，Symantec将使用（超秘密）私钥来生成服务器的SSL证书的数字签名，因此您的浏览器使用可以使用（超公共）公钥来检查该签名是否有效。Symantec将采取措施确保他们正在签署的组织真正拥有Microsoft.com，因此，鉴于您的客户信任Symantec，可以确定它真的在与微软公司对话。</p>
<h3 id="3-3自签名"><a href="#3-3自签名" class="headerlink" title="3.3自签名"></a>3.3自签名</h3><p>请注意，所有根CA证书都是“自签名”，这意味着使用自己的私钥生成数字签名的证书。根CA证书没有什么特别之处 — 你可以生成自己的自签名证书，并使用它来签署其他证书。 但是，由于您的随机证书不会作为CA预先加载到任何浏览器的任何地方，所以他们都不会相信你所签署的自己的或他人的证书。你是有效地说“呃，我真的是微软，这里是我自己签发并签署的身份证件”，所有正常运行的浏览器都会弹出一个非常严重的错误信息，以回应你的诡计。</p>
<p>这给所有浏览器和操作系统发行商带来了巨大的负担，只能信任干净的根CAs，因为他们的用户最终信任vet网站并保持证书安全的组织。<a href="http://security.stackexchange.com/questions/11464/getting-a-root-ca-accepted-in-systems-and-browsers" target="_blank" rel="external">这不是一件容易的事</a>。</p>
<h3 id="3-4你相信什么？"><a href="#3-4你相信什么？" class="headerlink" title="3.4你相信什么？"></a>3.4你相信什么？</h3><p>有趣的是，你的客户在技术上并不试图验证是否应该信任发送证书的一方，而是应该信任证书中包含的公开密钥。SSL证书是完全公开和公共的，因此任何攻击者都可以获取Microsoft的证书，拦截客户端对Microsoft.com的请求，并向其提供合法的证书。客户端会接受这一点，并开始愉快地握手。 但是，当客户端加密将用于实际数据加密的密钥时，它将使用该真实证书中的真实的Microsoft公钥进行此操作。由于攻击者没有Microsoft私钥来解密，所以他们现在被终止了。即使握手完成，它们仍然无法解密密钥，因此无法解密客户端向其发送的任何数据。只要攻击者不控制受信任的证书的私钥，正常的秩序就会顺利进行下去。如果客户骗取了受信任的证书，攻击者控制了证书和公钥，那么麻烦就开始了。</p>
<h2 id="4-真的很有趣的事实"><a href="#4-真的很有趣的事实" class="headerlink" title="4.真的很有趣的事实"></a>4.真的很有趣的事实</h2><h3 id="4-1咖啡店可以通过网络监控我的HTTPS流量吗"><a href="#4-1咖啡店可以通过网络监控我的HTTPS流量吗" class="headerlink" title="4.1咖啡店可以通过网络监控我的HTTPS流量吗?"></a>4.1咖啡店可以通过网络监控我的HTTPS流量吗?</h3><p>不。公钥密码使用方法的魔力意味着攻击者可以观察客户端和服务器之间交换的每一个字节数据，并且仍然不知道你们之间所说的话大致等于多少交换的数据量。然而，你的正常HTTP流量在不安全的Wi-Fi网络上仍然非常脆弱，而且脆弱的网站可能会成为任何数量的解决方案的受害者，这些方法可能会欺骗您通过纯HTTP或在完全错误的地方发送HTTPS流量。例如，即使登录表单通过HTTPS提交用户名/密码组合，如果表单本身通过HTTP安全地加载，那么攻击者可能会在到达您的计算机的途中拦截表单的HTML，在修改后将登录详细信息发送到他们自己的服务器。</p>
<h3 id="4-2我的公司可以通过网络监控我的HTTPS流量吗？"><a href="#4-2我的公司可以通过网络监控我的HTTPS流量吗？" class="headerlink" title="4.2我的公司可以通过网络监控我的HTTPS流量吗？"></a>4.2我的公司可以通过网络监控我的HTTPS流量吗？</h3><p>如果使用由自己公司控制的机器，那么是可以监控的。请记住，在每个信任链的根源都是一个隐含信任的CA，并且这些权限的列表存储在您的浏览器中。您的公司可以使用他们的机器访问权限，将自己的自签名证书添加到这个CA列表中。然后他们可以拦截您的所有HTTPS请求，提供声称代表相应网站的证书，由他们的假CA签名，因此毫无疑问，您的浏览器信任这些CA签名。由于使用其狡猾的证书的公钥对所有HTTPS请求进行加密，所以可以使用相应的私钥来解密和检查（甚至修改）您的请求，然后将其发送到其预期位置。他们可能不会这样做。但他们可以。<br>顺便提一句，这也是你如何使用代理来检查和修改<a href="http://nickfishman.com/post/50557873036/reverse-engineering-native-apps-by-intercepting-network" target="_blank" rel="external">iPhone应用程序所提供的</a>其他无法访问的HTTPS请求。</p>
<h3 id="4-3那么Lavabit和联邦调查局怎么了？"><a href="#4-3那么Lavabit和联邦调查局怎么了？" class="headerlink" title="4.3那么Lavabit和联邦调查局怎么了？"></a>4.3那么Lavabit和联邦调查局怎么了？</h3><p>Lavabit是2013年NSA泄漏疯狂期间爱德华·斯诺登（Edward Snowden）的超级安全的电子邮件提供商。正如我们所看到的，无数标准黑客可以允许联邦调查局看到Lavabit和其客户之间的任何数据。没有Lavabit SSL证书的私人密钥，黑客们是不可能监听到这些数据的。然而，一位有益的美国法官告诉Lavaff创始人Ladar Levison，他不得不交出这个钥匙，有效地让联邦调查局自由地监视核心的内容。Levison通过在4点类型的11个硬拷贝页面上交出2,560个字符的键，试图停下来，但是被要求执行一个命令，必须以有用的格式交出私钥，否则将会面对每天5000美元的罚款。<br>一旦他遵守了这个命令，Lavad的CA证书颁发机构GoDaddy就会认为证书被破坏了，就撤销了证书。这将Lavabit证书添加到证书吊销列表（CRL）中，该证书撤销列表（CRL）是客户端不再信任以提供安全连接的可信证书的列表。妥协的结果，自签名或其他不可信任的证书导致浏览器显示一个大的红色错误消息，并且阻止或彻底禁止用户进一步的操作。不幸的是，浏览器将继续信任破坏的证书，直到它们将最新的更新提交给CRL，这个过程在实践中显然是<a href="https://news.netcraft.com/archives/2013/05/13/how-certificate-revocation-doesnt-work-in-practice.html" target="_blank" rel="external">不完美的</a>。</p>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5.结论"></a>5.结论</h2><p>HTTPS不是不可破解的，SSL协议必须不断发展，因为对其的新攻击一直在快速的<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Attacks_against_TLS.2FSSL" target="_blank" rel="external">发展演化</a>。但是，如果看不到您的消息，那么传输秘密数据的方式仍然是令人印象深刻的方式。当然，这里没有提及许多实现细节，例如握手消息的确切格式和顺序，缩短的握手来接收最近的会话而不必重新协商密钥和密码套件，以及每个阶段可用的许多不同的加密选项。要记住的关键是，尽管HTTPS将数据安全地保护到目的地，但绝对不会对您（作为用户或开发人员），保护您免受XSS或数据库泄漏或任何其他事情造成的严重影响。时刻保持警惕。 在威尔·史密斯的不朽言辞中，“在黑暗中行走，要时刻注意，防止突发的暴力。”。<br>如果你喜欢这片文章，你可能会喜欢我的另一篇文章<a href="http://robertheaton.com/2015/04/06/the-ssl-freak-vulnerability/" target="_blank" rel="external">解释SSL2015年FREAK漏洞的细节</a>。</p>
<h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="http://robertheaton.com/2014/03/27/how-does-https-actually-work/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=ios" target="_blank" rel="external">How does HTTPS actually work?</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><font size="4" face="黑体"> 《图解HTTP》 </font>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS只是标准HTTP协议涂上一层美味的SSL/TLS加密信息。 除非出现严重错误,它可以防止人们因&lt;a href=&quot;https://en.wikipedia.org/wiki/Alice_and_Bob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="HTTPS" scheme="http://XibHe.github.io/tags/HTTPS/"/>
    
      <category term="HTTPS的工作原理" scheme="http://XibHe.github.io/tags/HTTPS%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>iOS下的图形绘制</title>
    <link href="http://XibHe.github.io/2017/04/24/Graphics-rendering/"/>
    <id>http://XibHe.github.io/2017/04/24/Graphics-rendering/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2017-07-06T12:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h2><p>iOS系统本身提供了两套绘图的框架，即<font color="#FA8072">UIBezierPath</font> 和<font color="#FA8072"> Core Graphics</font>。而前者所属UIKit，其实是对Core Graphics框架关于path的进一步封装，所以使用起来比较简单。但是毕竟Core Graphics更接近底层，所以它更加强大。</p>
<h3 id="UIBezierPath"><a href="#UIBezierPath" class="headerlink" title="UIBezierPath"></a>UIBezierPath</h3><p>UIKit中的UIBezierPath是Core Graphics框架关于path的一个封装。可以创建基于矢量的路径，例如椭圆或者矩形，或者有多个直线和曲线段组成的形状。我们可以用moveToPoint: 和 addLineToPoint:方法去构建。moveToPoint:设置我们想要创建形状的起点。从这点开始，我们可以用方法addLineToPoint:去创建一个形状的线段。我们可以连续的创建line，每一个line的起点都是先前的终点，终点就是指定的点。closePath可以在最后一个点和第一个点之间画一条线段。</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>rect
<span class="token punctuation">{</span>
    UIColor <span class="token operator">*</span>color <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor colorWithRed<span class="token punctuation">:</span><span class="token number">0</span> green<span class="token punctuation">:</span><span class="token number">0.7</span> blue<span class="token punctuation">:</span><span class="token number">0</span> alpha<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>color set<span class="token punctuation">]</span><span class="token punctuation">;</span>

    UIBezierPath<span class="token operator">*</span> aPath <span class="token operator">=</span> <span class="token punctuation">[</span>UIBezierPath bezierPath<span class="token punctuation">]</span><span class="token punctuation">;</span>
    aPath<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>

    aPath<span class="token punctuation">.</span>lineCapStyle <span class="token operator">=</span> kCGLineCapRound<span class="token punctuation">;</span>
    aPath<span class="token punctuation">.</span>lineJoinStyle <span class="token operator">=</span> kCGLineCapRound<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 起点</span>
    <span class="token punctuation">[</span>aPath moveToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 绘制线条</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">40.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">40.0</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">40.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath closePath<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第五条线通过调用closePath方法得到的</span>

    <span class="token comment" spellcheck="true">//根据坐标点连线</span>
    <span class="token punctuation">[</span>aPath stroke<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath fill<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="UIBezierPath-CAShapeLayer"><a href="#UIBezierPath-CAShapeLayer" class="headerlink" title="UIBezierPath+CAShapeLayer"></a>UIBezierPath+CAShapeLayer</h3><p>CAShapeLayer 继承自 CALayer ，因此，可使用 CALayer 的所有属性。但是， CAShapeLayer 需要和贝塞尔曲线配合使用才有意义。<br>查看官网说明:</p>
<blockquote>
<p>/* The shape layer draws a cubic Bezier spline in its coordinate space.</p>
<ul>
<li>The spline is described using a CGPath object and may have both fill</li>
<li>and stroke components (in which case the stroke is composited over</li>
<li>the fill). The shape as a whole is composited between the layer’s</li>
<li>contents and its first sublayer.<br>*/</li>
</ul>
</blockquote>
<p>这里是说 CAShapeLayer 是在其坐标系统内绘制贝塞尔曲线的。因此，使用 CAShapeLayer 需要与 UIBezierPath 一起使用。它有一个 path 属性，而 UIBezierPath 就是对 CGPathRef 类型的封装，因此这两者要配合起来用。</p>
<h3 id="CAShapeLayer与drawRect的关系"><a href="#CAShapeLayer与drawRect的关系" class="headerlink" title="CAShapeLayer与drawRect的关系"></a>CAShapeLayer与drawRect的关系</h3><ul>
<li>drawRect ：属于 CoreGraphics 框架，占用 CPU ，性能消耗大，不建议重写</li>
<li>CAShapeLayer ：属于 CoreAnimation 框架，通过 GPU 来渲染图形，节省性能。动画渲染直接提交给手机 GPU ，不消耗内存<br>这两者各有各的用途，而不是说有了 CAShapeLayer 就不需要 drawRect。<br>温馨提示：drawRect只是一个方法而已，是 UIView 的方法，重写此方法可以完成我们的绘制图形功能。</li>
</ul>
<h3 id="CAShapeLayer与UIBezierPath的关系"><a href="#CAShapeLayer与UIBezierPath的关系" class="headerlink" title="CAShapeLayer与UIBezierPath的关系"></a>CAShapeLayer与UIBezierPath的关系</h3><ul>
<li>CAShapeLayer中shape代表形状的意思，所以需要形状才能生效</li>
<li>贝塞尔曲线可以创建基于矢量的路径，而UIBezierPath类是对CGPathRef的封装</li>
<li>贝塞尔曲线给CAShapeLayer提供路径,CAShapeLayer在提供的路径中进行渲染。路径会闭环,所以绘制出了Shape</li>
<li>用于CAShapeLayer的贝塞尔曲线作为path，其path是一个首尾相接的闭环的曲线，即使该贝塞尔曲线不是一个闭环的曲线</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    _triangleView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIView alloc<span class="token punctuation">]</span> initWithFrame<span class="token punctuation">:</span><span class="token function">CGRectMake</span><span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> screenWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> screenHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    _triangleView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor orangeColor<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>_triangleView<span class="token punctuation">]</span><span class="token punctuation">;</span>
    _triangleView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span> createMaskLayerWithView<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>CALayer <span class="token operator">*</span><span class="token punctuation">)</span>createMaskLayerWithView
<span class="token punctuation">{</span>
    CGFloat viewWidth <span class="token operator">=</span> <span class="token function">CGRectGetWidth</span><span class="token punctuation">(</span>_triangleView<span class="token punctuation">.</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGFloat viewHeight <span class="token operator">=</span> <span class="token function">CGRectGetHeight</span><span class="token punctuation">(</span>_triangleView<span class="token punctuation">.</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>

    CGFloat rightSpace <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    CGFloat topSpace <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 起点</span>
    CGPoint point1 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 绘制线条</span>
    CGPoint point2 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point3 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> topSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point4 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token punctuation">,</span> topSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point5 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> topSpace<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point6 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> viewHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point7 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> viewHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>

    UIBezierPath <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span>UIBezierPath bezierPath<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path moveToPoint<span class="token punctuation">:</span>point1<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point3<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point4<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point5<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point6<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point7<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path closePath<span class="token punctuation">]</span><span class="token punctuation">;</span>

    CAShapeLayer <span class="token operator">*</span>layer <span class="token operator">=</span> <span class="token punctuation">[</span>CAShapeLayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    layer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span>CGPath<span class="token punctuation">;</span>
    <span class="token keyword">return</span> layer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CoreGraphics"><a href="#CoreGraphics" class="headerlink" title="CoreGraphics"></a>CoreGraphics</h2><p>这是一个绘图专用的API族，它经常被称为QuartZ或QuartZ 2D。Core Graphics是iOS上所有绘图功能的基石，包括UIKit，Core Graphics是高度集成于UIView和其他UIKit部分，Core Graphics数据结构和函数可以通过前缀CG来识别。</p>
<p>步骤:</p>
<ul>
<li>1.先在drawRect方法中获得上下文context；</li>
<li>2.绘制图形（线，图形，图片等）；</li>
<li>3.设置一些修饰属性；</li>
<li>4.渲染到上下文，完成绘图。</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>rect
<span class="token punctuation">{</span>
    CGContextRef c <span class="token operator">=</span> <span class="token function">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CGContextSetRGBStrokeColor</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// black</span>
    <span class="token function">CGContextSetLineWidth</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGMutablePathRef bubblePath <span class="token operator">=</span> <span class="token function">CGPathCreateMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 这里的点是三角形的尖尖</span>
    <span class="token function">CGPathMoveToPoint</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 其中的一条边的终点</span>
    <span class="token function">CGPathAddLineToPoint</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 另一条边的终点</span>
    <span class="token function">CGPathAddLineToPoint</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CGPathCloseSubpath</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextSaveGState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextAddPath</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> bubblePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextClip</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CGContextSetFillColorWithColor</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor blueColor<span class="token punctuation">]</span> CGColor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextFillRect</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGPathRelease</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意事项:</p>
<ul>
<li>1.绘图需要 CGContextRef,CGContextRef即图形上下文。可以这么理解，我们绘图是需要一个载体或者说输出目标，它用来显示绘图信息，并且决定绘制的东西输出到哪个地方。可以形象的比喻context就像一个“画板”，我们得把图形绘制到这个画板上。所以，绘图必须要先有context;</li>
<li>2.并不是说一提到绘图，就一定得重写drawRect方法，只是因为通常情况下我们一般采用在drawRect方法里获取context这种方式。</li>
<li>drawRect方法什么时候触发?当view第一次显示到屏幕上时;当调用view的setNeedsDisplay或者setNeedsDisplayInRect:方法时。</li>
</ul>
<h3 id="CGContextAddArcToPoint-amp-amp-CGPathAddArcToPoint"><a href="#CGContextAddArcToPoint-amp-amp-CGPathAddArcToPoint" class="headerlink" title="CGContextAddArcToPoint &amp;&amp; CGPathAddArcToPoint"></a>CGContextAddArcToPoint &amp;&amp; CGPathAddArcToPoint</h3><p>CGContextAddArcToPoint与CGPathAddArcToPoint这两函数是根据两切线及角度来画弧度,设置弧度CGFloat radius。</p>
<p>画一个四个角都是圆角的矩形,</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Do any additional setup after loading the view.</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> drawArcToPoint2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawArcToPoint2
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//创建CGContextRef</span>
    <span class="token function">UIGraphicsBeginImageContext</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGContextRef gc <span class="token operator">=</span> <span class="token function">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//===绘画逻辑 ===</span>
    <span class="token comment" spellcheck="true">//创建用于转移坐标的Transform,如许我们不消遵守实际显示做坐标策画</span>
    CGAffineTransform transform <span class="token operator">=</span> <span class="token function">CGAffineTransformMakeTranslation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//创建CGMutablePathRef</span>
    CGMutablePathRef path <span class="token operator">=</span> <span class="token function">CGPathCreateMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//半径为10</span>
    CGFloat radius <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//初始点为(10, 0),起点要从10开始，否则，在左上角会出现线条</span>
    <span class="token function">CGPathMoveToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//右上角和右下角两个点,画出半个圆角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//右下角,画出别的半个圆角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//左下角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//左上角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//将CGMutablePathRef添加到当前Context内</span>
    <span class="token function">CGContextAddPath</span><span class="token punctuation">(</span>gc<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor grayColor<span class="token punctuation">]</span> setFill<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor blueColor<span class="token punctuation">]</span> setStroke<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">CGContextSetLineWidth</span><span class="token punctuation">(</span>gc<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//履行绘画</span>
    <span class="token function">CGContextDrawPath</span><span class="token punctuation">(</span>gc<span class="token punctuation">,</span>kCGPathFillStroke<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//从Context中获取图像,并显示在界面上</span>
    UIImage <span class="token operator">*</span>img <span class="token operator">=</span> <span class="token function">UIGraphicsGetImageFromCurrentImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    UIImageView <span class="token operator">*</span>imgView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIImageView alloc<span class="token punctuation">]</span> initWithImage<span class="token punctuation">:</span>img<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>imgView<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CAShapedLayer处理"><a href="#CAShapedLayer处理" class="headerlink" title="CAShapedLayer处理"></a>CAShapedLayer处理</h3><p>理论上我们可以构造出任意想要的形状，但是有些形状如果你不熟悉几何知识的话是构造不出正确path的，从代码上我们可以看到我们可以通过设置CALayer的contents属性来设置显示的内容，那我们是不是可以通过设置CAShapedLayer的contents来设maskLayer呢？答案是肯定的，代码如下：</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setup4
<span class="token punctuation">{</span>
    CAShapeLayer <span class="token operator">*</span>maskLayer <span class="token operator">=</span> <span class="token punctuation">[</span>CAShapeLayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>fillColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor blackColor<span class="token punctuation">]</span><span class="token punctuation">.</span>CGColor<span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor clearColor<span class="token punctuation">]</span><span class="token punctuation">.</span>CGColor<span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>contentsCenter <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>contentsScale <span class="token operator">=</span> <span class="token punctuation">[</span>UIScreen mainScreen<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//非常关键设置自动拉伸的效果且不变形</span>
    maskLayer<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">[</span>UIImage imageNamed<span class="token punctuation">:</span><span class="token string">@"gray_bubble_right@2x.png"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>CGImage<span class="token punctuation">;</span>

    CALayer <span class="token operator">*</span>contentLayer <span class="token operator">=</span> <span class="token punctuation">[</span>CALayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    contentLayer<span class="token punctuation">.</span>mask <span class="token operator">=</span> _maskLayer<span class="token punctuation">;</span>
    contentLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>layer addSublayer<span class="token punctuation">:</span>_contentLayer<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>使用CGPathAddArcToPoint绘制带有箭头的弹窗菜单,如图，<br><img src="http://odchyrav4.bkt.clouddn.com/814765ED-432C-4614-87DF-4A275E136BF8.png" alt="弹窗菜单"></p>
<p>在绘制四个边的圆角时，无法对应到特定的四个角的位置，导致绘制不出该效果的图片。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.jianshu.com/p/bbb2cc485a45" target="_blank" rel="external">绘图</a></li>
<li><a href="http://www.tuicool.com/articles/ZrimEnA" target="_blank" rel="external">iOS CAShapeLayer精讲</a></li>
<li><a href="http://www.jianshu.com/p/8e6e960eea7d" target="_blank" rel="external">iOS绘图—— UIBezierPath 和 Core Graphics</a></li>
<li><a href="http://blog.csdn.net/leochang130731/article/details/25566329" target="_blank" rel="external">CGPathAddArc vs CGPathAddArcToPoint</a></li>
<li><a href="http://blog.csdn.net/u012160319/article/details/44835353" target="_blank" rel="external">CGContextAddArcToPoint与CGPathAddArcToPoint</a></li>
<li><a href="http://www.tuicool.com/articles/32mU7fj" target="_blank" rel="external">iOS 不规则的ImageView</a></li>
<li><a href="http://stackoverflow.com/questions/78127/cgpathaddarc-vs-cgpathaddarctopoint" target="_blank" rel="external">CGPathAddArc vs CGPathAddArcToPoint
</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图形绘制&quot;&gt;&lt;a href=&quot;#图形绘制&quot; class=&quot;headerlink&quot; title=&quot;图形绘制&quot;&gt;&lt;/a&gt;图形绘制&lt;/h2&gt;&lt;p&gt;iOS系统本身提供了两套绘图的框架，即&lt;font color=&quot;#FA8072&quot;&gt;UIBezierPath&lt;/font&gt; 和
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="图形绘制" scheme="http://XibHe.github.io/tags/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    
      <category term="UIBezierPath" scheme="http://XibHe.github.io/tags/UIBezierPath/"/>
    
      <category term="CGPathAddLineToPoint" scheme="http://XibHe.github.io/tags/CGPathAddLineToPoint/"/>
    
      <category term="CGPathAddArcToPoint" scheme="http://XibHe.github.io/tags/CGPathAddArcToPoint/"/>
    
  </entry>
  
  <entry>
    <title>Harden your mind</title>
    <link href="http://XibHe.github.io/2017/03/31/Harden-your-mind/"/>
    <id>http://XibHe.github.io/2017/03/31/Harden-your-mind/</id>
    <published>2017-03-30T16:00:00.000Z</published>
    <updated>2017-06-22T12:48:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间看了casa的直播《闲话iOS架构》，收看直播时，很多人在聊天里发言询问<font color="#FA8072">迅速提高技术有什么捷径</font>?而casa的回答是<font color="#FA8072">多想多练</font>。casa直播背景是一个书架，书架上摆满了书，中途一直有人发消息询问大神背后的书架都有什么书？给我最直观的感觉是大家很浮躁，总是想通过一种事半功倍的方式快速摘取成功果实，却忽略了平时的积累，正是这些小的积累，造就大的爆发。</p>
<p>《闲话iOS架构》提到的内容如下:</p>
<blockquote>
<ul>
<li>1.《批判性思维》</li>
<li>2.高效烧脑，低效伤身.</li>
<li>3.protocol,categary</li>
<li>4.注释一般写在垃圾代码那里。剩下的都是代码自注释</li>
<li>5.极致了，怎么保证扩展性?并不矛盾</li>
<li>6.框架ctmater?</li>
<li>7.reactive cocoa</li>
<li>8.APImanager</li>
<li>9.组件化</li>
<li>10.class template</li>
<li>12.OCLink 可以部分review</li>
<li>13.有if就要有else,逻辑上的，思维考虑的对称，不是强制代码必须要这样做</li>
<li>14.以前一直用shell  现在用swift REPL </li>
<li>15.架构的限制是指规范</li>
<li>16.组件化和模块化到底怎么区分，一个东东的不同叫法，实际上应该叫模块化</li>
<li>17.《Cocoa设计模式》</li>
<li>18.如何看待新技术, mvvm，Reactive cocoa，rac</li>
<li>19.没有最全面的技术，只有最合适的技术。</li>
<li>20.CTMediator组件化方案</li>
<li>21.CTNetwokring和YTKNetworking，离散型，集约型</li>
<li>22.codeReview</li>
<li>23.继承的缺点，破坏了代码结构</li>
<li>24.RN,weex</li>
<li>25.复用的东西拆成组件</li>
<li>26.《The Art of Capacity Planning》</li>
<li>27.腾讯开源的Mars,引出大一统和多元化，</li>
<li>28.网易，无埋点打log，网易乐得无埋点数据收集sdk</li>
</ul>
</blockquote>
<p>casa所讲的内容多是通过平时代码积累得来的方法论，如果没有一定的代码积累和长期的项目实践是很难彻底理解这些内容的。iOS应用架构看着很高大上，但需要在牢固的基础之上一层层堆砌成高楼。忽视这些必要的步骤，一味粉饰自己，到头来也只是黄粱一梦一场空。再回过头来看目前国内知识付费现象，觉得是一个泡沫。正如知乎上所说，<font color="#FA8072">知识付费，抓的不是人的求知欲，抓的是人的焦虑感</font>。人们焦虑，希望有人告诉他们捷径，如何更快的获得成功。<font color="#FA8072">这里莫名的想到成功学，成功的永远是成功学的讲师。当代知识产品最大的痛点就是:不看书。</font></p>
<p>我们急切的接受别人输出的价值观，却选择性的忽略掉自己的内心真正的诉求。书上得来总觉浅，听人道出方觉深，互补的只是不愿意努力看书或是去实践的懒惰。知识经济本质上就是粉丝经济的另一种表现形式。最后，还是想强调一下，作为一名攻城狮通过解决日常遇到的问题，或由浅而深，或发散思维都可以一步步引导至问题的核心。切忌自以为是，舍本逐末。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间看了casa的直播《闲话iOS架构》，收看直播时，很多人在聊天里发言询问&lt;font color=&quot;#FA8072&quot;&gt;迅速提高技术有什么捷径&lt;/font&gt;?而casa的回答是&lt;font color=&quot;#FA8072&quot;&gt;多想多练&lt;/font&gt;。casa直播背景是一个书架
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Harden your mind" scheme="http://XibHe.github.io/tags/Harden-your-mind/"/>
    
      <category term="知识付费" scheme="http://XibHe.github.io/tags/%E7%9F%A5%E8%AF%86%E4%BB%98%E8%B4%B9/"/>
    
  </entry>
  
  <entry>
    <title>待办事项提醒功能开发(二)</title>
    <link href="http://XibHe.github.io/2017/03/15/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91(%E4%BA%8C)/"/>
    <id>http://XibHe.github.io/2017/03/15/待办事项提醒功能开发(二)/</id>
    <published>2017-03-15T09:01:00.000Z</published>
    <updated>2017-06-22T12:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><h2 id="入库操作"><a href="#入库操作" class="headerlink" title="入库操作"></a>入库操作</h2><h2 id="界面绘制"><a href="#界面绘制" class="headerlink" title="界面绘制"></a>界面绘制</h2><h2 id="通知log表"><a href="#通知log表" class="headerlink" title="通知log表"></a>通知log表</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>时间转化的时区设置</li>
<li>最近的本地通知最多只能有64个(待测试)</li>
<li>过期通知的移除(不做移除，通过通知的自有机制去处理的可行性)</li>
<li>生产日期，到期日，保质期天数的交互</li>
<li>奇妙清单的到期提醒只与提醒时间和频率有关，与是否到期无关</li>
<li>iOS 10之后的推送</li>
</ul>
<h1 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h1><p><a href="https://github.com/XibHe/ToDoList" target="_blank" rel="external">点击下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建数据库&quot;&gt;&lt;a href=&quot;#新建数据库&quot; class=&quot;headerlink&quot; title=&quot;新建数据库&quot;&gt;&lt;/a&gt;新建数据库&lt;/h2&gt;&lt;h2 id=&quot;入库操作&quot;&gt;&lt;a href=&quot;#入库操作&quot; class=&quot;headerlink&quot; title=&quot;入库操作&quot;
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="待办事项提醒" scheme="http://XibHe.github.io/tags/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92/"/>
    
      <category term="开源" scheme="http://XibHe.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>待办事项提醒功能开发(一)</title>
    <link href="http://XibHe.github.io/2017/03/13/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91(%E4%B8%80)/"/>
    <id>http://XibHe.github.io/2017/03/13/待办事项提醒功能开发(一)/</id>
    <published>2017-03-13T14:50:06.000Z</published>
    <updated>2017-06-22T13:56:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>根据用户所添加某件商品的生产日期和保质期天数计算商品的过期日期，在过期前的时间内，用户可以设置提醒的具体时间点和提醒频次，系统根据用户设置的提醒时间和提醒频次通知用户某某商品该使用了。具体操作步骤如下:</p>
<ul>
<li>新增一个提醒事项的名称，这个名称将作为待完成事项显示在任务列表中，可以快速勾选完成；</li>
<li>在保质期限一栏，点击生产日期一栏，弹出年月日的日期选择器用于日期的选择；</li>
<li>点击保质期天数一栏，弹出用于输入保质期天数的输入控件，保质期单位可以是天，月，年；</li>
<li>如果保质期为30天以内，默认开启智能保质期提醒；如果超过30天，则关闭智能提醒，需要有手动设置结束提醒的具体时间及提醒频率；</li>
<li>在提醒设置一栏，根据生产日期和保质期天数自动计算出到期的具体日期，用户点击时间一栏，弹出时间的选择控件用于选择触发提醒的时间点，用户也可以设置提醒频次；</li>
</ul>
<h1 id="需要考虑的技术点"><a href="#需要考虑的技术点" class="headerlink" title="需要考虑的技术点"></a>需要考虑的技术点</h1><p>结合需求需要考虑如下几个问题:</p>
<ul>
<li>本地通知的运行机制是什么？</li>
<li>如何自定义通知的频率？</li>
<li>如何移除到期的通知提醒？</li>
<li>当用户编辑一个已经存在的提醒任务时，如何根据用户修改后的日期，频率等参数，更新现有的通知提醒频次，触发时间，日期等属性？</li>
<li>当切换用户或者用户退出登录后，如何操作之前已经添加的通知提醒？</li>
<li>通知提醒数据的持久化？</li>
</ul>
<h1 id="本地通知相关点"><a href="#本地通知相关点" class="headerlink" title="本地通知相关点"></a>本地通知相关点</h1><p>使用本地通知提醒用户，而本地通知有些地方在使用时需要注意,如下:</p>
<blockquote>
<p>1.本地通知是有操作系统统一调度的，只有在应用退出到后台或者关闭才能收到通知；<br>2.本地通知的数量是有限制的，最近的本地通知最多只能有64个，超过这个数量将被系统忽略；<br>3.如果想要移除本地通知可以调用UIApplication的cancelLocalNotification:或cancelAllLocalNotifications移除指定通知或所有通知；<br>4.通知对应的NScalendarunit属性，可以通过该属性操作提醒的频率；</p>
</blockquote>
<p>NScalendarunit的具体属性如下：</p>
<pre><code>typedef NS_OPTIONS(NSUInteger, NSCalendarUnit) {
        NSCalendarUnitEra                = kCFCalendarUnitEra,
        NSCalendarUnitYear               = kCFCalendarUnitYear,
        NSCalendarUnitMonth              = kCFCalendarUnitMonth,
        NSCalendarUnitDay                = kCFCalendarUnitDay,
        NSCalendarUnitHour               = kCFCalendarUnitHour,
        NSCalendarUnitMinute             = kCFCalendarUnitMinute,
        NSCalendarUnitSecond             = kCFCalendarUnitSecond,
        NSCalendarUnitWeekday            = kCFCalendarUnitWeekday,
        NSCalendarUnitWeekdayOrdinal     = kCFCalendarUnitWeekdayOrdinal,
        NSCalendarUnitQuarter            NS_ENUM_AVAILABLE(10_6, 4_0) = kCFCalendarUnitQuarter,
        NSCalendarUnitWeekOfMonth        NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitWeekOfMonth,
        NSCalendarUnitWeekOfYear         NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitWeekOfYear,
        NSCalendarUnitYearForWeekOfYear  NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitYearForWeekOfYear,
        NSCalendarUnitNanosecond         NS_ENUM_AVAILABLE(10_7, 5_0) = (1 &lt;&lt; 15),
        NSCalendarUnitCalendar           NS_ENUM_AVAILABLE(10_7, 4_0) = (1 &lt;&lt; 20),
        NSCalendarUnitTimeZone           NS_ENUM_AVAILABLE(10_7, 4_0) = (1 &lt;&lt; 21),

    NSEraCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitEra instead&quot;) = NSCalendarUnitEra,
    NSYearCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitYear instead&quot;) = NSCalendarUnitYear,
    NSMonthCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitMonth instead&quot;) = NSCalendarUnitMonth,
    NSDayCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitDay instead&quot;) = NSCalendarUnitDay,
    NSHourCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitHour instead&quot;) = NSCalendarUnitHour,
    NSMinuteCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitMinute instead&quot;) = NSCalendarUnitMinute,
    NSSecondCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitSecond instead&quot;) = NSCalendarUnitSecond,
    NSWeekCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitWeekOfMonth or NSCalendarUnitWeekOfYear, depending on which you mean&quot;) = kCFCalendarUnitWeek,
    NSWeekdayCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitWeekday instead&quot;) = NSCalendarUnitWeekday,
    NSWeekdayOrdinalCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitWeekdayOrdinal instead&quot;) = NSCalendarUnitWeekdayOrdinal,
    NSQuarterCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_6, 10_10, 4_0, 8_0, &quot;Use NSCalendarUnitQuarter instead&quot;) = NSCalendarUnitQuarter,
    NSWeekOfMonthCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 5_0, 8_0, &quot;Use NSCalendarUnitWeekOfMonth instead&quot;) = NSCalendarUnitWeekOfMonth,
    NSWeekOfYearCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 5_0, 8_0, &quot;Use NSCalendarUnitWeekOfYear instead&quot;) = NSCalendarUnitWeekOfYear,
    NSYearForWeekOfYearCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 5_0, 8_0, &quot;Use NSCalendarUnitYearForWeekOfYear instead&quot;) = NSCalendarUnitYearForWeekOfYear,
    NSCalendarCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 4_0, 8_0, &quot;Use NSCalendarUnitCalendar instead&quot;) = NSCalendarUnitCalendar,
    NSTimeZoneCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 4_0, 8_0, &quot;Use NSCalendarUnitTimeZone instead&quot;) = NSCalendarUnitTimeZone,
};
</code></pre><h1 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h1><p>使用sqlite3进行通知提醒相关数据的持久化。大概的思路如下：</p>
<p>新增提醒任务:</p>
<blockquote>
<p>1.插入保质期提醒任务表<br>2.插入通知表<br>3.插入通知log表<br>4.上传服务器通知提醒数据</p>
</blockquote>
<p>编辑提醒任务：</p>
<blockquote>
<p>1.更新保质期提醒任务表<br>2.更新通知表<br>3.更新通知log表<br>4.上传服务器编辑后的通知提醒数据</p>
</blockquote>
<p><font color="#FA8072"> 需要注意本地通知的官方文档是否有最近的跟新 </font>，待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;业务需求&quot;&gt;&lt;a href=&quot;#业务需求&quot; class=&quot;headerlink&quot; title=&quot;业务需求&quot;&gt;&lt;/a&gt;业务需求&lt;/h1&gt;&lt;p&gt;根据用户所添加某件商品的生产日期和保质期天数计算商品的过期日期，在过期前的时间内，用户可以设置提醒的具体时间点和提醒频次，系
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="开源" scheme="http://XibHe.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="待办事项" scheme="http://XibHe.github.io/tags/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>第一次面试别人是怎样的体会</title>
    <link href="http://XibHe.github.io/2017/02/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%88%AB%E4%BA%BA%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E4%BC%9A/"/>
    <id>http://XibHe.github.io/2017/02/26/第一次面试别人是怎样的体会/</id>
    <published>2017-02-25T16:00:00.000Z</published>
    <updated>2017-06-22T12:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不安的开始"><a href="#不安的开始" class="headerlink" title="不安的开始"></a>不安的开始</h2><p><img src="http://odchyrav4.bkt.clouddn.com/6KKS~QKHI1B3G_5%7BK09%7DW%7DE.jpg" alt="iOS开发没人要了"><br>自从去年后半年以来，iOS开发相关工作就被唱衰。很多人抱怨裸辞后找不到工作，可谓是哀鸿遍野。看到了太多这样的帖子，身边也有相识的人遭遇了公司解散，失业后迟迟找不到工作的窘境。这也直接导致了我内心的忐忑和不安，不禁要问，iOS从业者的未来在哪里？我又该何去何从呢？这样的疑问，这样的不安，一直伴随着我。在结合别人的现实的遭遇后，分析了一下造成现阶段初级，中级iOS从业者找工作难的原因:</p>
<blockquote>
<ul>
<li>市场过度饱和，培训机构追求自身利益，在iOS开发人员相对稀缺阶段，培训了大量的从业人员，扰乱了市场正常的供需关系，导致从业人员供大于需；</li>
<li>鱼龙混杂的从业者，很多开发者并不是科班出身，只是听说iOS开发者的薪资待遇高，才决定去培训机构学习，经过四五个月左右的强制灌输和培训机构的包装后，摇身一变成了具有两年开发经验的iOS开发者,其本身不具备计算机专业相关的基础知识；</li>
<li>资本市场资金的收紧，导致流向互联网领域的热钱迅速减少，相比前几年互联网行业的创业潮，很多创业者张口闭口我们是颠覆者，一定会替代某某某，只要嘴炮一番就能忽悠到投资人的钱，今年的资本市场回归了理性。那些没有清晰盈利模式的初创公司迅速倒闭，相关中小互联网公司的用人需求在萎缩；</li>
<li>市场需求的理性回归，很多培训班出身，或者工作年限不足三年，或者是一年工作经验用了三年的初中级开发者满足不了市场上很多公司对于中高级开发者相关的技术要求，于是，被市场无情的淘汰；</li>
<li>行业内薪资待遇的降低，iOS开发已经结束了早期因从业者稀少而造成的市场红利时期，进入到了一个稳步发展的相对稳定时期。因此，薪资待遇回归到了一个正常的水准。那些早期享受到这种红利的开发者，一时间接受不了薪资待遇的降低；</li>
<li>技术层面方面，iOS开发依托苹果提供的平台，该平台的封闭性决定了开发者所接触的技术面比较狭窄，脱离了苹果，不能完全胜任其他技术工作；</li>
</ul>
</blockquote>
<h2 id="我所遇到的一个例子"><a href="#我所遇到的一个例子" class="headerlink" title="我所遇到的一个例子"></a>我所遇到的一个例子</h2><p>带着这些不安，对于已经结束的16年，我做了一份<a href="http://xibhe.com/2017/01/15/再见！2016/" target="_blank" rel="external">总结</a>，也包括17年的一些计划。或许是心志不坚，或许是颓废太久，这种不安仍旧存在，直到上周面试了一个来公司应聘iOS开发的应聘者……</p>
<p>周五下午，人事和我说能不能帮忙面试一下，本来是另一个项目组需要的人，但恰巧他们的负责人不在，就让我去面了。第一次面试别人还是有些紧张，好像自己第一次被别人面试一样紧张。但左等右等还是等不到人事通知我去面试，后来大概半小时后被人事告知那个来面试的人已经走了，据她说面试题只做了一半，人就走了，可能是被我们的面试题吓走了。但面试题我也看过，是四十道很基础的面试题呀！表示不解啊！本以为这次安排的面试就这样结束了，后来人事通知还有一个已经写完了面试题，在沙发区等着，于是我就开始了这次面试之旅。</p>
<p>短暂的两分钟的沉默，我简单看了一下他的简历，上面工作经验写着三年。心里便盘算着从哪些知识点入手可以探出对方是不是真的有三年工作经验。先是让对方做了一个简单的自我介绍，然后开始对着简历问一些问题，简历上写了四个项目，每个项目所用到的技术都是一些大众化的技术，比如，网络请求库AFNetworking，图片加载库SDWebImage，数据库FMDB，刷新库MJRefresh，适配库Masonry等各种三方库的使用。于是我便问了以下的问题:</p>
<blockquote>
<ul>
<li>NSOperation与GCD的区别</li>
<li>GCD中如何避免死锁和数据竞争</li>
<li>Block的使用及如何避免循环引用</li>
<li>使用过哪些设计模式</li>
<li>单例，什么是单例，单例的作用</li>
<li>内存管理</li>
<li>网络请求库的使用</li>
<li>JS与原生应用是如何交互的</li>
<li>了解过RunTime吗</li>
<li>通知是异步还是同步</li>
<li>该如何对tableView进行优化，实现滑动的流畅性，以及如何避免tableView代理方法中冗长的代码</li>
<li>SDWebImage的运行机制</li>
<li>App中的多用户逻辑</li>
<li>如何实现一个可以循环滚动的轮播图(类似于京东，淘宝首页顶部效果)</li>
<li>给你一个新项目你会怎么做</li>
<li>是否能看一下你的技术博客或是GitHub上的开源项目</li>
</ul>
</blockquote>
<p>对方对上述问题的回答模棱两可，十分的模糊。其中涉及到GCD那块的问题，只说了用过，GCD的如何避免数据竞争和死锁，以及它与NSOperation的区别只是把什么是NSOperation用名词解释了一下，而对于Block的循环引用问题，支支吾吾想了半天回答的文不对题。设计模式是典型的MVC，倒是提到了MVVM，但这里也只是简单的提到，就没有什么下文了。单例的使用，边想边说，整了半天也没有将声明单例的具体方法说明白。内存管理这块，据他说，学iOS开发时MRC已经没人用了，他就直接用的ARC。JS与原生应用交互这块说没有用过。那么RunTime呢?说是底层的东西没有怎么了解过。tableView的优化方面，说是用的原生API的代理方法，这个还需要优化吗?<br>SDWebImage的运行机制，把它的使用方法说了一遍。App中的多用户逻辑，说是服务器的事，客户端不需要考虑。轮播图功能的实现，说的是使用NSTimer。给你一个新项目你会怎么做，说的是先花一周进行需求分析，再新建工程，使用CocoaPods把那些要用到的三方库引入到工程中。问完了这些问题，我还是抱有一丝幻想的，心想也许是太过紧张了，再看看他做的项目吧！</p>
<p>看了下对方手机上他参与开发的项目，是一些与美食推荐相关的项目，有一个已经停止维护，拉取不到任何数据了。剩下的都是一些数据使用tableView展示的普通项目，没有什么逻辑特别复杂或是需要使用很高明技术的功能。自此，我仍然没有放弃，心想或许对方还研究过其他的技术点，于是就问对方，是否能看一下你的技术博客或是GitHub上的开源项目。对方回答说，没有。此刻，我也只能道了两声谢谢，说有结果人事会通知你。心里想着，本来还想问有没有使用过Swift，可是现在看来，已经没有问的必要了。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p><img src="http://odchyrav4.bkt.clouddn.com/839AC9B0-9D80-47AB-9C9F-5CC1FFB8D0ED.png" alt="v2ex"></p>
<p>红利已经结束了，那个只要会使用tableView等常用控件就能找到工作的时代结束了。<br>曾听一位前辈说过，</p>
<blockquote>
<p>“感觉每个做技术的一开始都是一粒沙子，不断修炼学习吸收营养变成大颗粒的沙子。 再学习其他东西把自己变成土块儿，时间是一把大筛子，每次过滤掉小沙粒，只留大块儿在上面，在你被筛掉之前要么变的比网眼大留下来，要么赶紧被筛掉转行吧!”</p>
</blockquote>
<p>最后来个总结吧！猥琐发育，别浪！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不安的开始&quot;&gt;&lt;a href=&quot;#不安的开始&quot; class=&quot;headerlink&quot; title=&quot;不安的开始&quot;&gt;&lt;/a&gt;不安的开始&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://odchyrav4.bkt.clouddn.com/6KKS~QKHI1B3G_5
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="面试" scheme="http://XibHe.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="心得体会" scheme="http://XibHe.github.io/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
      <category term="iOS开发没人要了" scheme="http://XibHe.github.io/tags/iOS%E5%BC%80%E5%8F%91%E6%B2%A1%E4%BA%BA%E8%A6%81%E4%BA%86/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式初探</title>
    <link href="http://XibHe.github.io/2017/02/19/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%88%9D%E6%8E%A2/"/>
    <id>http://XibHe.github.io/2017/02/19/适配器模式初探/</id>
    <published>2017-02-18T20:23:06.000Z</published>
    <updated>2017-07-06T01:27:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>解决ViewConctroller里冗余代码过多的问题，将公用模块抽离出来。这里将项目中用到的拍照，调用相册，录像，定位等功能单独抽离出来放在一起。</p>
<h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ul>
<li>第一步: 定义一个delegate，用来返回一个遵守该协议的数据，不管传过来的数据是什么类型，只要服从这个协议，实现协议里的方法，就处理这个数据。</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">@protocol</span> MediaHandleDelegate <span class="token operator">&lt;</span>NSObject<span class="token operator">></span>
<span class="token operator">@</span>optional
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>returnMedidaData<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>mediaData<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第二步: 创建继承于NSObject的根适配器类MediaHandleAct，该类遵守第一步中的协议，并实现该协议的方法，但只是空实现。</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// MediaHandleAct.h</span>

<span class="token macro property">#<span class="token directive keyword">import</span> "MediaHandleDelegate.h"</span>

<span class="token keyword">@interface</span> MediaHandleAct <span class="token punctuation">:</span> NSObject
<span class="token punctuation">{</span>
    id <span class="token operator">&lt;</span>MediaHandleDelegate<span class="token operator">></span> _delegate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// MediaHandleAct.m</span>

<span class="token macro property">#<span class="token directive keyword">import</span> "MediaHandleAct.h"</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>returnMedidaData<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第三步: 构建根适配器类MediaHandleAct中注册特定Action的方法，并获取注册的Action。</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token macro property">#<span class="token directive keyword">import</span> &lt;Foundation/Foundation.h></span>
<span class="token macro property">#<span class="token directive keyword">import</span> "MediaHandleDelegate.h"</span>

<span class="token keyword">@interface</span> MediaHandleAct <span class="token punctuation">:</span> NSObject
<span class="token punctuation">{</span>
    id <span class="token operator">&lt;</span>MediaHandleDelegate<span class="token operator">></span> _delegate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 动态注册新的Action</span>
<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>registerMediaHandleAction<span class="token punctuation">:</span><span class="token punctuation">(</span>MediaHandleAct <span class="token operator">*</span><span class="token punctuation">)</span>mediaHandleAct andKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span> actKey<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 获取注册的Action</span>
<span class="token operator">+</span> <span class="token punctuation">(</span>NSDictionary <span class="token operator">*</span><span class="token punctuation">)</span>mediaHandleActions<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 传递Action的具体执行方法</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>performActionWichController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>controller callbackClass<span class="token punctuation">:</span><span class="token punctuation">(</span>NSObject <span class="token operator">*</span><span class="token punctuation">)</span>callbackClass<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// MediaHandleAct.m</span>
<span class="token macro property">#<span class="token directive keyword">import</span> "MediaHandleAct.h"</span>
<span class="token keyword">static</span> NSMutableDictionary <span class="token operator">*</span> mediaHandleActs <span class="token operator">=</span> nil<span class="token punctuation">;</span>

<span class="token keyword">@implementation</span> MediaHandleAct

<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>registerMediaHandleAction<span class="token punctuation">:</span><span class="token punctuation">(</span>MediaHandleAct <span class="token operator">*</span><span class="token punctuation">)</span>mediaHandleAct andKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>actKey
<span class="token punctuation">{</span>
    <span class="token operator">@</span><span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mediaHandleActs<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            mediaHandleActs <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableDictionary dictionary<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">[</span>MediaHandleAct registerCommonAction<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">[</span>mediaHandleActs setObject<span class="token punctuation">:</span>mediaHandleAct forKey<span class="token punctuation">:</span>actKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">+</span> <span class="token punctuation">(</span>NSDictionary <span class="token operator">*</span><span class="token punctuation">)</span>mediaHandleActions
<span class="token punctuation">{</span>
    NSDictionary <span class="token operator">*</span> acts <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token operator">@</span><span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mediaHandleActs<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            mediaHandleActs <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableDictionary dictionary<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">[</span>MediaHandleAct registerCommonAction<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        acts <span class="token operator">=</span> mediaHandleActs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> acts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 具体的执行方法</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>performActionWichController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>controller callbackClass<span class="token punctuation">:</span><span class="token punctuation">(</span>NSObject <span class="token operator">*</span><span class="token punctuation">)</span>callbackClass<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>synchronized   这个主要是考虑多线程的程序，这个指令可以将{ } 内的代码限制在一个线程执行，如果某个线程没有执行完，其他的线程如果需要执行就得等着。@synchronized 的作用是创建一个互斥锁，保证此时没有其它线程对self对象进行修改。这种机制确保了同一时刻对于每一个类，至多只有一个处于可执行状态，从而有效避免了类成员变量的访问冲突。一般在公用变量的时候使用，如单例模式或者操作类的static变量中使用。</p>
<ul>
<li>第四步: 针对不同功能的类，创建继承于MediaHandleAct的类适配器。<br>使用适配器的时候，分为类适配器和对象适配器。类适配器针对每一个数据类型或某个功能模块创建一个适配器，并继承于根适配器。</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// 调用相册功能</span>
<span class="token macro property">#<span class="token directive keyword">import</span> &lt;Foundation/Foundation.h></span>
<span class="token macro property">#<span class="token directive keyword">import</span> "MediaHandleAct.h"</span>

<span class="token keyword">@interface</span> MediaHandleAlbum <span class="token punctuation">:</span> MediaHandleAct
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">)</span> NSInteger maxCount<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 最多可添加照片数</span>
<span class="token comment" spellcheck="true">// 注册Action</span>
<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>load<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// MediaHandleAlbum.m</span>
<span class="token macro property">#<span class="token directive keyword">import</span> "MediaHandleAlbum.h"</span>
<span class="token macro property">#<span class="token directive keyword">import</span> "JKImagePickerController.h"</span>
<span class="token keyword">@interface</span> <span class="token function">MediaHandleAlbum</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>JKImagePickerControllerDelegate<span class="token operator">></span>
<span class="token punctuation">{</span>
    UIViewController <span class="token operator">*</span> _parentController<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> MediaHandleAlbum

<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>load
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span>MediaHandleAct registerMediaHandleAction<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>MediaHandleAlbum alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span> andKey<span class="token punctuation">:</span><span class="token string">@"album"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">pragma</span> mark - 拍照和调用相册功能</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>performActionWichController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>controller callbackClass<span class="token punctuation">:</span><span class="token punctuation">(</span>NSObject <span class="token operator">*</span><span class="token punctuation">)</span>callbackClass
<span class="token punctuation">{</span>
    _parentController <span class="token operator">=</span> controller<span class="token punctuation">;</span>
    _delegate <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>callbackClass<span class="token punctuation">;</span>

    UIActionSheet <span class="token operator">*</span>actionSheet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIActionSheet alloc<span class="token punctuation">]</span> initWithTitle<span class="token punctuation">:</span>nil delegate<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">self</span> cancelButtonTitle<span class="token punctuation">:</span>nil destructiveButtonTitle<span class="token punctuation">:</span>nil otherButtonTitles<span class="token punctuation">:</span><span class="token string">@"拍照"</span><span class="token punctuation">,</span><span class="token string">@"从相册选择"</span><span class="token punctuation">,</span><span class="token string">@"取消"</span><span class="token punctuation">,</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>actionSheet showInView<span class="token punctuation">:</span>_parentController<span class="token punctuation">.</span>view<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">pragma</span> mark - ActionSheetDelegate</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>actionSheet<span class="token punctuation">:</span><span class="token punctuation">(</span>UIActionSheet <span class="token operator">*</span><span class="token punctuation">)</span>actionSheet clickedButtonAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSInteger<span class="token punctuation">)</span>buttonIndex
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>buttonIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 拍照</span>
            UIImagePickerController <span class="token operator">*</span>picker <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIImagePickerController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
            picker<span class="token punctuation">.</span>sourceType <span class="token operator">=</span> UIImagePickerControllerSourceTypeCamera<span class="token punctuation">;</span>
            picker<span class="token punctuation">.</span>editing <span class="token operator">=</span> YES<span class="token punctuation">;</span>
            picker<span class="token punctuation">.</span>allowsEditing <span class="token operator">=</span> YES<span class="token punctuation">;</span>
            picker<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">self</span><span class="token punctuation">;</span>
            <span class="token punctuation">[</span>_parentController presentViewController<span class="token punctuation">:</span>picker animated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 调用相册</span>
            JKImagePickerController <span class="token operator">*</span>imagePickerController <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>JKImagePickerController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
            imagePickerController<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">self</span><span class="token punctuation">;</span>
            imagePickerController<span class="token punctuation">.</span>showsCancelButton <span class="token operator">=</span> YES<span class="token punctuation">;</span>
            imagePickerController<span class="token punctuation">.</span>allowsMultipleSelection <span class="token operator">=</span> YES<span class="token punctuation">;</span>
            imagePickerController<span class="token punctuation">.</span>minimumNumberOfSelection <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            imagePickerController<span class="token punctuation">.</span>maximumNumberOfSelection <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>maxCount<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//imagePickerController.selectedAssetArray = self.photosView.assetsArray;</span>
            UINavigationController <span class="token operator">*</span>navigationController <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UINavigationController alloc<span class="token punctuation">]</span> initWithRootViewController<span class="token punctuation">:</span>imagePickerController<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">[</span>_parentController presentViewController<span class="token punctuation">:</span>navigationController animated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">pragma</span> mark - UIImagePickerControllerDelegate</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> imagePickerController<span class="token punctuation">:</span> <span class="token punctuation">(</span>UIImagePickerController<span class="token operator">*</span><span class="token punctuation">)</span>picker didFinishPickingMediaWithInfo<span class="token punctuation">:</span> <span class="token punctuation">(</span>NSDictionary<span class="token operator">*</span><span class="token punctuation">)</span> info
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span>picker dismissViewControllerAnimated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>

    UIImage <span class="token operator">*</span>edit <span class="token operator">=</span> <span class="token punctuation">[</span>info objectForKey<span class="token punctuation">:</span><span class="token string">@"UIImagePickerControllerEditedImage"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    UIImage <span class="token operator">*</span>originalImage <span class="token operator">=</span> <span class="token punctuation">[</span>info objectForKey<span class="token punctuation">:</span><span class="token string">@"UIImagePickerControllerOriginalImage"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@" EditedImage %@ "</span><span class="token punctuation">,</span><span class="token function">NSStringFromCGSize</span><span class="token punctuation">(</span>edit<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@" OriginalImage %@ "</span><span class="token punctuation">,</span><span class="token function">NSStringFromCGSize</span><span class="token punctuation">(</span>originalImage<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    UIImage <span class="token operator">*</span>aImage <span class="token operator">=</span> edit<span class="token punctuation">;</span>
    NSData <span class="token operator">*</span> imageData <span class="token operator">=</span> <span class="token function">UIImageJPEGRepresentation</span><span class="token punctuation">(</span>aImage<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>_delegate <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span>_delegate respondsToSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>returnMedidaData<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NSArray <span class="token operator">*</span> photos <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span>imageData<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span>_delegate returnMedidaData<span class="token punctuation">:</span>photos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>imagePickerControllerDidCancel<span class="token punctuation">:</span><span class="token punctuation">(</span>UIImagePickerController <span class="token operator">*</span><span class="token punctuation">)</span>picker
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span>picker dismissViewControllerAnimated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property">#<span class="token directive keyword">pragma</span> mark - JKImagePickerControllerDelegate</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>imagePickerController<span class="token punctuation">:</span><span class="token punctuation">(</span>JKImagePickerController <span class="token operator">*</span><span class="token punctuation">)</span>imagePicker didSelectAsset<span class="token punctuation">:</span><span class="token punctuation">(</span>JKAssets <span class="token operator">*</span><span class="token punctuation">)</span>asset isSource<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>source
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span>imagePicker dismissViewControllerAnimated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>imagePickerController<span class="token punctuation">:</span><span class="token punctuation">(</span>JKImagePickerController <span class="token operator">*</span><span class="token punctuation">)</span>imagePicker didSelectAssets<span class="token punctuation">:</span><span class="token punctuation">(</span>NSArray <span class="token operator">*</span><span class="token punctuation">)</span>assets isSource<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>source
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span>imagePicker dismissViewControllerAnimated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"assets == %@"</span><span class="token punctuation">,</span>assets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    NSMutableArray <span class="token operator">*</span> photos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSMutableArray alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>JKAssets <span class="token operator">*</span> jkAssets <span class="token keyword">in</span> assets<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NSData <span class="token operator">*</span> photoData <span class="token operator">=</span> <span class="token function">UIImageJPEGRepresentation</span><span class="token punctuation">(</span>jkAssets<span class="token punctuation">.</span>photo<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span>photos addObject<span class="token punctuation">:</span>photoData<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"groupPropertyID = %@, groupPropertyURL = %@, assetPropertyURL = %@, photo = %@"</span><span class="token punctuation">,</span>jkAssets<span class="token punctuation">.</span>groupPropertyID<span class="token punctuation">,</span>jkAssets<span class="token punctuation">.</span>groupPropertyURL<span class="token punctuation">,</span>jkAssets<span class="token punctuation">.</span>assetPropertyURL<span class="token punctuation">,</span>jkAssets<span class="token punctuation">.</span>photo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>_delegate <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span>_delegate respondsToSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>returnMedidaData<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>_delegate returnMedidaData<span class="token punctuation">:</span>photos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第五步: 调用适配器。</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec">    MediaHandleAlbum <span class="token operator">*</span> album <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>MediaHandleAct mediaHandleActions<span class="token punctuation">]</span> objectForKey<span class="token punctuation">:</span><span class="token string">@"album"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>maxCount <span class="token operator">=</span> imageCount<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>album performActionWichController<span class="token punctuation">:</span><span class="token keyword">self</span> callbackClass<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="适配器模式的优缺点"><a href="#适配器模式的优缺点" class="headerlink" title="适配器模式的优缺点"></a>适配器模式的优缺点</h1><p>优点: 耦合度低，可以扩展多种不同功能的适配样式。<br>缺点: 代码量相应增多，文件增多。</p>
<p><a href="https://github.com/XibHe/AdapterPatternTest" target="_blank" rel="external"><font color="#FA8072"> 源码下载地址 </font></a></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>该Demo中使用调用相机，相册，录制视频的功能，当系统为iOS 10以上访问权限的设置有所不同，需要在工程中的plist文件中添加对应的描述。Demo中的plist，<br>如图，<br><img src="http://odchyrav4.bkt.clouddn.com/QQ20170313-0@2x.png" alt="工程截图"></p>
<p>其他功能访问权限设置，<br><a href="http://stackoverflow.com/questions/38498275/ios-10-changes-in-asking-permissions-of-camera-microphone-and-photo-library-c" target="_blank" rel="external"><font color="#FA8072"> iOS 10 - Changes in asking permissions of Camera, microphone and Photo Library causing application to crash </font></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h1&gt;&lt;p&gt;解决ViewConctroller里冗余代码过多的问题，将公用模块抽离出来。这里将项目中用到的拍照，调用相册，录像，定位等功能单独抽离出来放
    
    </summary>
    
      <category term="设计模式" scheme="http://XibHe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="iOS" scheme="http://XibHe.github.io/tags/iOS/"/>
    
      <category term="设计模式" scheme="http://XibHe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器" scheme="http://XibHe.github.io/tags/%E9%80%82%E9%85%8D%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>再见! 2016!</title>
    <link href="http://XibHe.github.io/2017/01/15/%E5%86%8D%E8%A7%81%EF%BC%812016/"/>
    <id>http://XibHe.github.io/2017/01/15/再见！2016/</id>
    <published>2017-01-15T13:25:10.000Z</published>
    <updated>2017-06-23T07:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结婚"><a href="#结婚" class="headerlink" title="结婚"></a>结婚</h2><p>2016年注定是不平凡的一年，我和花花（我媳妇的外号）在2月14日领的结婚证，这天也是西方的情人节。从这天起我要履行法律赋予我作为一个丈夫的责任和义务。我和花花是大学同学，相识六年，经历了种种磨难和阻力，最终走到了一起。她是我的福星，我的天使，没有花花的鼓励和支持我不敢想象我会变成什么样子。谢谢你包容我的时不时的坏脾气，容忍我的懒散，不思进取，选择和我在一起。承担起本不该属于你的忧愁和压力。<font size="4" face="黑体">我的挚爱，我的血肉。</font>谢谢你一路的陪伴。</p>
<h2 id="生子"><a href="#生子" class="headerlink" title="生子"></a>生子</h2><p>16年，给了我太多的惊喜和感动。我又办成了人生的另外一件大事—孕育下一代。我们家小宝贝的出生好似给我注入了一剂强心剂，让我感到内心无比的强大。前期的彷徨无措，以及不知该如何适应父亲这个新角色的焦躁不安随着我们家小宝贝的降生，被一扫而空。又是一个给我带来好运的小天使，每每想到小家伙那粉嫩的面庞，心中就为之躁动起来。他的一举一动都牵动着我，同时，也感到肩上的责任越来越重了。我会更加努力<font size="4" face="黑体">为你打下一片大大的疆土。</font>我的小宝贝。</p>
<h2 id="新工作"><a href="#新工作" class="headerlink" title="新工作"></a>新工作</h2><p>因为种种原因，之前的公司主营业务出现了问题，于是，树倒猢狲散，我又开始了漫长的面试生涯。经过近一个月数十家公司的面试，最终入职了现在的公司。面试时也遇到很多自己之前没有深入去考录的问题，被打了几次脸之后，让我认识到自己的基础并不牢固，很多问题只有肤浅的认知。关于面试这一块的具体内容，需要整理成具体的内容，再发布到博客上，就当给自己提个醒，告诫自己前方还有一段很长的路要走。</p>
<p>新的工作，给我最大的感受就是流程上的统一与协调。在开发新版本前，会走一个<font color="#DC143C">需求分析-&gt;原型设计-&gt;需求评审-&gt;UI设计评审-&gt;制定开发计划-&gt;开发计划评审</font>的流程。虽然起初感到繁琐，但对流程的把控可以形成有效的开发计划，掌握开发过程中不同的产出环节，随着对流程的适应以及团队磨合，最终这个流程的时间也会缩短。最重要的是当项目延期或是需求出现问题，可以追溯到流程中那个环节出现了问题。</p>
<p>刚接手现在正在做的这个项目时，觉得很烫手。不仅要面对开发进度的滞后，还要提防项目中随时可能出现的一些无以名状的Bug。觉得自己一个人有些力不从心，但又不得不咬牙顶上去。最终，通过不断加班加点的赶进度，不断的理解产品需求，迈过了这个坎。反而很享受这样解决问题的畅快，为自己以后填更大的坑积累的初始的经验。经过这五个多月的不断历练，最大的收货是：自己慢慢能把控好一个项目了。由最初的慌张，苦闷，到现在可以坦然的面对这些问题。在项目中对自己的要求更加严格了，对产品性能方面，有了一个基本的认识，并开始着手做一些性能上的优化工作。</p>
<h2 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h2><p>这半年时间，加班比较多，这就导致了陪在家人身边的时间少了很多。起初，我觉得我是在履行我养家糊口的责任，从这一点出发是无可厚非的。但事实上，我的家人更需要我的陪伴，我不能陪伴小家伙一天天的成长，是我作为父亲最大的遗憾；我不能换位思考，体谅我妻子带孩子的艰辛，是我作为丈夫的不称职。曾听说过一句话：<font size="4" face="黑体">把家当做事业来经营，把事业当做家来爱。</font>如果真正做到了这句话所说的那样，那么家庭与工作二者之间就会找到平衡点，一切的矛盾将会迎刃而解。同时，沟通的不及时也会加剧这种矛盾，所以，今年无论工作再忙也要抽出时间关心下我的妻子和儿子，让她们能感受到我对她们的爱。</p>
<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>16年初，1月份读了<a href="https://imciel.com" target="_blank" rel="external">一刀</a>推荐的<font size="4" face="黑体"> 《把时间当做朋友》 </font>，尝试从心智层面上控制自己，告别拖延症。开始尝试制定每个月的工作学习计划。4月初读了<a href="https://imciel.com" target="_blank" rel="external">一刀</a>推荐的<font size="4" face="黑体"> 《Effective Objective-C 2.0:编写高质量iOS与OS X代码的52个高效方法》</font>和<font size="4" face="黑体"> 《Objective-C高级编程:iOS与OS X多线程和内存管理》 </font>对编写高质量的代码，提高代码质量有了初步的了解，对线程底层实现的原理有了一个大概的轮廓。但看这两本书时，太着急了些，未能将书中的精髓全部掌握，同时，也遗留了很多一知半解的问题。今年计划再拿出半个月的时间回顾一下这两本书中未搞懂的内容。五月中旬看了<font size="4" face="黑体"> 《GitHub入门与实践》 </font>一书，书的内容很简单，浅显的讲了一下GitHub的原理和流程，如果想进一步了解Git的详细使用及具体操作，可以看<a href="https://www.gitbook.com/book/bingohuang/progit2/details" target="_blank" rel="external">Pro Git</a>，GitBook上已经有第二版简体中文的翻译了。六月份还看了<font size="4" face="黑体"> &lt;<ios编程实战>&gt; </ios编程实战></font>一书，不过是跳着看的，跳过了那些自己已经掌握的内容，看后，对现有知识进行了一些拓展。双十一的时候，在网上买了几本书，如下：</p>
<ul>
<li><font size="4" face="黑体"> 《传习录》 </font></li>
<li><font size="4" face="黑体"> 《编程珠玑》 </font></li>
<li><font size="4" face="黑体"> 《人类简史》 </font></li>
<li><font size="4" face="黑体"> 《软技能:代码之外的生存指南》 </font></li>
<li><font size="4" face="黑体"> 《Head First设计模式(中文版)》 </font></li>
<li><font size="4" face="黑体"> 《啊哈!算法》 </font></li>
<li><font size="4" face="黑体"> 《图解HTTP》 </font></li>
<li><font size="4" face="黑体"> 《黑客与画家》 </font>

</li>
</ul>
<p>这几本书里有之前听别人说起过的，也有<a href="https://imciel.com" target="_blank" rel="external">一刀</a>推荐的。这几本书中<font size="4" face="黑体"> 《软技能:代码之外的生存指南》，</font><font size="4" face="黑体"> 《啊哈!算法》，</font> <font size="4" face="黑体"> 《图解HTTP》</font>这三本书已经看了有些日子了。这些书有些是对现有知识的拓展和升华，打破我固有的思维，有的是个人喜好。读书的时间，开始时是早上在公交车上看，有时看某一本书看得厌烦了，就换另一本书看。个人觉得看纯技术书籍时，可以根据自己的口味搭配一本非技术的书籍来一起读，这样可以缓解因长期看一本书而造成的疲劳和厌烦。</p>
<p>以前认为读书的时间是千方百计的挤出来的，现在看来这样的想法有失偏颇。当我想偷懒，放松下来时，或是想玩手机时，就在心里告诫自己用这些时间来看书，反复这样几次后，竟然发现在这些时间内，比我千方百计挤出来的时间看的书还多。看来平时的时间都被浪费在了这些琐碎，无意义的事情上了。</p>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p>关于博客，16年初开始写，一直到7月份才写了第二篇文章，全年只写了7篇文章。很多想写的东西，都只是被记录下来，并没有梳理成一篇文章，最后，都化作了尘埃，消失不见了。最开始时，想着什么都往博客上写，但那样纯粹是为了凑字数，可读性并不强。浪费了自己的时间，也对读这篇博客的人造成了困扰。到后来，太过于浅显东西没有写的必要，未经深入研究的东西，或是从别处直接复制粘贴别人的观点。这些都不是在写博客，而是在记流水账。因此，给自己定下了一个三不写的要求:</p>
<blockquote>
<font size="4" face="黑体"> 所描述的内容，逻辑不清，不写 </font><br><font size="4" face="黑体"> 没有经过自己验证过的内容，不写 </font><br> <font size="4" face="黑体"> 对别人没有帮助，只是在记流水账的内容，不写 </font>

</blockquote>
<p>2017年会继续坚持写博客，写那些真正经过自己深入研究过的东西，写那些日常项目中真正遇到并最终解决的问题，写对自己对别人有用的东西。只有这样才能提高文章的质量，付出的时间才能得到最大化的利用。</p>
<h2 id="新技术"><a href="#新技术" class="headerlink" title="新技术"></a>新技术</h2><p>16年8月初，学习了最新的Swift 3.0，当然，现在最新的是Swift 3.01。从官网下了<a href="https://developer.apple.com/swift/resources/" target="_blank" rel="external">The Swift Programming Language(Swift 3.01)</a>，通过官网下载时会跳转到iBooks，但由于一些众所周知的原因，iBooks中国区是无法下载的，需要使用美区账号登录iBooks。可以结合<a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="external">极客学院Wiki</a>简体中文翻译看。目前，自己只看到了<font size="4" face="黑体"> Functions </font>这章，17年还需要继续学习剩下的部分，再使用Swift编写一个具体的项目。17年计划学习一些热更新的技术，并计划在自己做的项目中使用一种热更新技术，实现动态化的修改项目中的代码。17年，希望自己能在iOS之外，能入门一种新的技术，拓宽自己的视野，达到自己心中设定的新的高度，看到之前看不到风景。</p>
<h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><p>17年是公司发展历程中重要的一年，也是我所在项目组所开发的项目大范围推广的一年，我们将迎来更多的用户，更大的并发量，会根据市场反应快速迭代产品。我们渴望在项目中使用新的技术，不断的提高用户体验，同时，又能不影响项目上线时间。希望我们产品被更多的人使用，得到大家的认可。同时，希望我们团队<font size="4" face="黑体"> 永远年轻，永远热泪盈眶。</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结婚&quot;&gt;&lt;a href=&quot;#结婚&quot; class=&quot;headerlink&quot; title=&quot;结婚&quot;&gt;&lt;/a&gt;结婚&lt;/h2&gt;&lt;p&gt;2016年注定是不平凡的一年，我和花花（我媳妇的外号）在2月14日领的结婚证，这天也是西方的情人节。从这天起我要履行法律赋予我作为一个丈夫的
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="2016" scheme="http://XibHe.github.io/tags/2016/"/>
    
      <category term="年终总结" scheme="http://XibHe.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>调试蓝牙扫码枪遇到的问题</title>
    <link href="http://XibHe.github.io/2016/12/06/iOS%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B%20%20/"/>
    <id>http://XibHe.github.io/2016/12/06/iOS蓝牙开发简介  /</id>
    <published>2016-12-06T10:31:54.000Z</published>
    <updated>2017-06-22T12:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS蓝牙开发简介"><a href="#iOS蓝牙开发简介" class="headerlink" title="iOS蓝牙开发简介"></a>iOS蓝牙开发简介</h1><p>蓝牙 4.0出现之前，蓝牙 2.0时只有iOS设备和苹果认证的MFI设备才可以被iOS设备检索到。蓝牙 4.0之后（硬件要4S，系统要iOS6以上才支持蓝牙 4.0），苹果开放了BLE(蓝牙4.0以低功耗著称，所以一般被称为BLE（bluetooth low energy））通道，没有MFI认证的蓝牙设备也可以连接非越狱的iOS设备了。</p>
<p>总结了一下，一共有五种方式可以实现蓝牙通信:</p>
<ol>
<li>使用MFI认证的蓝牙模块的蓝牙产品 —— 开发使用ExternalAccessory框架，如果你的蓝牙模块还没设计，打算在AppStore上发布，打算使用蓝牙4.0以下（IOS设备都兼容），那你就抓紧找MFI认证的蓝牙模块吧。</li>
<li>使用苹果提供的CoreBluetooth framework框架 —— 只适用于支持蓝牙4.0的设备，无需越狱，无需使用MFI，可以发布在AppStore上。</li>
<li>GameKit framework —— 只能在iOS设备之间同一个应用内连接，从iOS7开始过期了，通过蓝牙可以实现文件的共享（仅限设备沙盒中的文件），此框架一般用于游戏开发（比如五子棋对战）。</li>
<li>Private API —— 使用私有API的应用程序不被允许在AppStore上发布。</li>
<li>Jailbreak</li>
</ol>
<p>这里我使用的是第二种方式 —— CoreBluetooth。</p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>CoreBluetooth框架的核心其实是两个东西，peripheral和central, 可以理解成外设和中心。对应他们分别有一组相关的API和类。</p>
<ul>
<li>CBCentralManager：中心设备（用来连接到外部设备的管家）</li>
<li>CBPeripheralManager：外部设备（第三方的蓝牙4.0设备）</li>
</ul>
<p><img src="http://odchyrav4.bkt.clouddn.com/BLE.jpeg" alt="BLE"></p>
<ul>
<li>这两组api分别对应不同的业务场景，左侧叫做中心模式，就是以你的app作为中心，连接其他的外设的场景，而右侧称为外设模式，使用手机作为外设别其他中心设备操作的场景。</li>
<li>服务和特征，特征的属性(service and characteristic):<br>每个设备都会有一些服务，每个服务里面都会有一些特征，特征就是具体键值对，提供数据的地方。每个特征属性分为这么几种：读，写，通知这么几种方式。</li>
</ul>
<p>外设、服务、特征间的关系</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/1442301743869760.png" alt="关系图"></p>
<h1 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h1><p>检测蓝牙设备的连接强度，查询一定范围内的蓝牙设备列表。可以通过一款名为LightBlue的手机端软件来确定。在开启蓝牙的状态下，打开LightBlue搜索到当前范围内的设备列表，可以点击查看当前设备的UUID以及特征和服务的UUID，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/IMG_0254.PNG?imageView/4/w/300" alt="系统蓝牙"></p>
<p><img src="http://odchyrav4.bkt.clouddn.com/IMG_0252.PNG?imageView/4/w/300" alt="设备列表"></p>
<p><img src="http://odchyrav4.bkt.clouddn.com/IMG_0253.PNG?imageView/4/w/300" alt="特征和服务的UUID"></p>
<h1 id="连接蓝牙扫码枪"><a href="#连接蓝牙扫码枪" class="headerlink" title="连接蓝牙扫码枪"></a>连接蓝牙扫码枪</h1><p>项目中需要连接蓝牙扫码枪，通过扫码枪扫描商品的条码，将得到的条码值传给终端设备。终端设备根据该条码值搜索该商品的全部信息。iPad开启蓝牙，通过设置蓝牙扫描枪，连接上iPad，但发现在调试状态下，并没有调用CBCentralManager的代理方法。使用LightBlue搜索当前范围内的蓝牙设备，无法找到当前连接到iPad上的蓝牙扫描枪。蓝牙扫描枪使用的是富立叶（cilico）ci6800这款。最后，看了产品说明，发现它的蓝牙模块是蓝牙2.0 + EDR。而不是最新的蓝牙4.0。在未做任何处理的情况下，iPad端任然可以所接收到扫码枪扫描条码后的到的码值。原来是扫码枪默认开启了HID模式，在该模式下iPad默认当前通过蓝牙连接的扫码枪为一个外接键盘，因此扫描后得到码值相当于通过敲击键盘输入。</p>
<p>这样也造成了一个问题，iPad上所有带有输入功能的操作，都无法通过点击输入框弹出软键盘。因为系统会将扫码枪当做键盘，所有软键盘的弹出或者隐藏都是通过扫码枪做操作。但事实上扫码枪并不能控制键盘的弹出。通过google找到了一种据说是可以解决该问题的方法<a href="http://stackoverflow.com/questions/3326189/show-iphone-soft-keyboard-even-though-a-hardware-keyboard-is-connected/3837131#3837131" target="_blank" rel="external">点击查看</a>。但该方法极不稳定，当扫码枪的连接状态在休眠/唤醒两种状态下来回切换时就会失效。偶尔会成功弹出键盘。</p>
<p>最后，在联系厂家需求帮助无果的情况下，不得不停止了该款扫码枪的适配。</p>
<h1 id="连接蓝牙血压计"><a href="#连接蓝牙血压计" class="headerlink" title="连接蓝牙血压计"></a>连接蓝牙血压计</h1><p>为了验证自己的代码没有问题，是由于蓝牙扫码枪的蓝牙模块版本过低不支持CoreBluetooth。我又找来了一台据说支持蓝牙4.0的蓝牙血压计做测试。</p>
<h1 id="代码实现的步骤"><a href="#代码实现的步骤" class="headerlink" title="代码实现的步骤"></a>代码实现的步骤</h1><blockquote>
<p>第一步，创建CBCentralManager。<br>第二步，扫描可连接的蓝牙外设（必须在蓝牙模块打开的前提下）。<br>第三步，连接目标蓝牙外设。<br>第四步，查询目标蓝牙外设下的服务。<br>第五步，遍历服务中的特性，获取特性中的数据或者保存某些可写的特性，或者设置某些特性值改变时，通知主动获取。<br>第六步，在通知更新特性中值的方法中读取特性中的数据（再设置特性的通知为YES的情况下）。<br>第七步，读取特性中的值。<br>第八步，如果有可写特性，并且需要向蓝牙外设写入数据时，写入数据发送给蓝牙外设。</p>
</blockquote>
<ol>
<li>引入 CoreBluetooth头文件</li>
</ol>
<pre><code>#import &lt;CoreBluetooth/CoreBluetooth.h&gt;
</code></pre><ol>
<li>声明属性</li>
</ol>
<pre><code>@property (nonatomic, strong) CBCentralManager *manager;
@property (nonatomic, strong) CBPeripheral *peripheral;
@property (strong ,nonatomic) CBCharacteristic *writeCharacteristic;
@property (strong,nonatomic) NSMutableArray *nDevices;
@property (strong,nonatomic) NSMutableArray *nServices;
@property (strong,nonatomic) NSMutableArray *nCharacteristics;
</code></pre><ol>
<li>遵守协议</li>
</ol>
<pre><code>@interface ViewController () &lt;CBCentralManagerDelegate, CBPeripheralDelegate&gt;
</code></pre><ol>
<li>初始化数据</li>
</ol>
<pre><code>- (void)viewDidLoad 
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    self.manager = [[CBCentralManager alloc] initWithDelegate:self queue:nil];

    _cbReady = false;
    _nDevices = [[NSMutableArray alloc]init];
    _nServices = [[NSMutableArray alloc]init];
    _nCharacteristics = [[NSMutableArray alloc]init];
    count = 0;
}
</code></pre><ol>
<li>实现蓝牙的协议方法</li>
</ol>
<ul>
<li>(1)检查蓝牙状态</li>
</ul>
<pre><code>-(void)centralManagerDidUpdateState:(CBCentralManager *)central
{
    switch (central.state) {
        case CBCentralManagerStatePoweredOn:
        {
            [self updateLog:@&quot;蓝牙已打开,请扫描外设&quot;];
            [_activity startAnimating];
            [_manager scanForPeripheralsWithServices:@[[CBUUID UUIDWithString:@&quot;FFF0&quot;]]  options:@{CBCentralManagerScanOptionAllowDuplicatesKey : @YES }];
        }
            break;
        case CBCentralManagerStatePoweredOff:
            [self updateLog:@&quot;蓝牙没有打开,请先打开蓝牙&quot;];
            break;
        default:
            break;
    }
}
</code></pre><font color="#DC143C"> 注：[_manager scanForPeripheralsWithServices:@[[CBUUID UUIDWithString:@”FF15”]] options:@{CBCentralManagerScanOptionAllowDuplicatesKey : @YES }];中间的@[[CBUUID UUIDWithString:@”FFF0”]]是为了过滤掉其他设备，可以搜索特定标示的设备。<br> </font> 

<ul>
<li>（2）检测到外设后，停止扫描，连接设备</li>
</ul>
<pre><code>//查到外设后，停止扫描，连接设备
-(void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(NSDictionary *)advertisementData RSSI:(NSNumber *)RSSI
{
    [self updateLog:[NSString stringWithFormat:@&quot;已发现 peripheral: %@ rssi: %@, UUID: %@ advertisementData: %@ &quot;, peripheral, RSSI, peripheral.identifier, advertisementData]];

    _peripheral = peripheral;
    [_manager connectPeripheral:_peripheral options:nil];

    [self.manager stopScan];
    [_activity stopAnimating];

    BOOL replace = NO;
    // Match if we have this device from before
    for (int i=0; i &lt; _nDevices.count; i++) {
        CBPeripheral *p = [_nDevices objectAtIndex:i];
        if ([p isEqual:peripheral]) {
            [_nDevices replaceObjectAtIndex:i withObject:peripheral];
            replace = YES;
        }
    }
    if (!replace) {
        [_nDevices addObject:peripheral];
        [_bluetoothTable reloadData];
    }
}
</code></pre><ul>
<li>（3）连接外设后的处理</li>
</ul>
<pre><code>//连接外设成功，开始发现服务
- (void)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral {
    NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;成功连接 peripheral: %@ with UUID: %@&quot;,peripheral,peripheral.identifier]);

    [self updateLog:[NSString stringWithFormat:@&quot;成功连接 peripheral: %@ with UUID: %@&quot;,peripheral,peripheral.identifier]];

    [self.peripheral setDelegate:self];
    [self.peripheral discoverServices:nil];
    [self updateLog:@&quot;扫描服务&quot;];
}
//连接外设失败
-(void)centralManager:(CBCentralManager *)central didFailToConnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error
{
    NSLog(@&quot;%@&quot;,error);
}

-(void)peripheralDidUpdateRSSI:(CBPeripheral *)peripheral error:(NSError *)error
{
    NSLog(@&quot;%s,%@&quot;,__PRETTY_FUNCTION__,peripheral);
    int rssi = abs([peripheral.RSSI intValue]);
    CGFloat ci = (rssi - 49) / (10 * 4.);
    NSString *length = [NSString stringWithFormat:@&quot;发现BLT4.0热点:%@,距离:%.1fm&quot;,_peripheral,pow(10,ci)];
    [self updateLog:[NSString stringWithFormat:@&quot;距离：%@&quot;, length]];
}
</code></pre><ul>
<li>（4）发现服务和搜索到的Characteristice</li>
</ul>
<pre><code>//已发现服务
-(void) peripheral:(CBPeripheral *)peripheral didDiscoverServices:(NSError *)error{

    [self updateLog:@&quot;发现服务.&quot;];
    int i=0;
    for (CBService *s in peripheral.services) {
        [self.nServices addObject:s];
    }
    for (CBService *s in peripheral.services) {
        [self updateLog:[NSString stringWithFormat:@&quot;%d :服务 UUID: %@(%@)&quot;,i,s.UUID.data,s.UUID]];
        i++;
        [peripheral discoverCharacteristics:nil forService:s];

        if ([s.UUID isEqual:[CBUUID UUIDWithString:@&quot;FFF0&quot;]]) {
            BOOL replace = NO;
            // Match if we have this device from before
            for (int i=0; i &lt; _nDevices.count; i++) {
                CBPeripheral *p = [_nDevices objectAtIndex:i];
                if ([p isEqual:peripheral]) {
                    [_nDevices replaceObjectAtIndex:i withObject:peripheral];
                    replace = YES;
                }
            }
            if (!replace) {
                [_nDevices addObject:peripheral];
                [_bluetoothTable reloadData];
            }
        }
    }
}

//已搜索到Characteristics
-(void) peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(NSError *)error{
    [self updateLog:[NSString stringWithFormat:@&quot;发现特征的服务:%@ (%@)&quot;,service.UUID.data ,service.UUID]];

    for (CBCharacteristic *c in service.characteristics) {
        [self updateLog:[NSString stringWithFormat:@&quot;特征 UUID: %@ (%@)&quot;,c.UUID.data,c.UUID]];

        if ([c.UUID isEqual:[CBUUID UUIDWithString:@&quot;FF01&quot;]]) {
            _writeCharacteristic = c;
 }

        if ([c.UUID isEqual:[CBUUID UUIDWithString:@&quot;FF02&quot;]])     {
            [_peripheral readValueForCharacteristic:c];
            [_peripheral setNotifyValue:YES forCharacteristic:c];
  }
 }   
 }
}

- (void)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error {
    [self updateLog:[NSString stringWithFormat:@&quot;已断开与设备:[%@]的连接&quot;, peripheral.name]];
}
</code></pre><ul>
<li>（5）获取外设发来的数据</li>
</ul>
<pre><code>//获取外设发来的数据，不论是read和notify,获取数据都是从这个方法中读取。
- (void)peripheral:(CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error
{
    if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@&quot;FF02&quot;]]) {
        NSData * data = characteristic.value;
        Byte * resultByte = (Byte *)[data bytes];

        for(int i=0;i&lt;[data length];i++)
            printf(&quot;testByteFF02[%d] = %d\n&quot;,i,resultByte[i]);

        if (resultByte[1] == 0) {
        }else if (resultByte[1] == 1) {
            [self updateLog:@&quot;未知错误&quot;];
        }else if (resultByte[1] == 2) {
            [self updateLog:@&quot;鉴权失败&quot;];
        }
    }
    if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@&quot;FF04&quot;]]) {
        NSData * data = characteristic.value;
        Byte * resultByte = (Byte *)[data bytes];

        for(int i=0;i&lt;[data length];i++)
            printf(&quot;testByteFF04[%d] = %d\n&quot;,i,resultByte[i]);}

    if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@&quot;FF05&quot;]]) {
        NSData * data = characteristic.value;
        Byte * resultByte = (Byte *)[data bytes];

        for(int i=0;i&lt;[data length];i++)
            printf(&quot;testByteFF05[%d] = %d\n&quot;,i,resultByte[i]);

        if (resultByte[0] == 0) {
            // 设备加解锁状态 0 撤防     1 设防
            [self updateLog:@&quot;当前车辆撤防状态&quot;];
        }else if (resultByte[0] == 1) {
            // 设备加解锁状态 0 撤防     1 设防
            [self updateLog:@&quot;当前车辆设防状态&quot;];
        }
    }
}

//中心读取外设实时数据
- (void)peripheral:(CBPeripheral *)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error {
    if (error) {
        NSLog(@&quot;Error changing notification state: %@&quot;, error.localizedDescription);
    }

    // Notification has started
    if (characteristic.isNotifying) {
        [peripheral readValueForCharacteristic:characteristic];

    } else { // Notification has stopped
        // so disconnect from the peripheral
        NSLog(@&quot;Notification stopped on %@.  Disconnecting&quot;, characteristic);
        [self updateLog:[NSString stringWithFormat:@&quot;Notification stopped on %@.  Disconnecting&quot;, characteristic]];
        [self.manager cancelPeripheralConnection:self.peripheral];
    }
}
//用于检测中心向外设写数据是否成功
-(void)peripheral:(CBPeripheral *)peripheral didWriteValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error
{
    if (error) {
        NSLog(@&quot;=======%@&quot;,error.userInfo);
        [self updateLog:[error.userInfo JSONString]];
    }else{
        NSLog(@&quot;发送数据成功&quot;);
        [self updateLog:@&quot;发送数据成功&quot;];
    }

    /* When a write occurs, need to set off a re-read of the local CBCharacteristic to update its value */
    [peripheral readValueForCharacteristic:characteristic];
}
</code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>厂商一般会提供一份<font color="#DC143C">蓝牙血压计通信指令控制数据格式(通讯协议) </font> 可根据该协议中定义的返回的十六进制数据，定义当前外设发送的不同数据的意义。<br>最主要是用UUID来确定你要干的事情，特征和服务的UUID都是外设定义好的。我们只需要读取，确定你要读取什么的时候，就去判断UUID是否相符。 一般来说我们使用的iPhone都是做centralManager的，蓝牙模块是peripheral的，所以我们是want datas，需要接受数据。</p>
<ol>
<li>判断状态为powerOn，然后执行扫描</li>
<li>停止扫描，连接外设</li>
<li>连接成功，寻找服务</li>
<li>在服务里寻找特征</li>
<li>为特征添加通知</li>
<li>通知添加成功，那么就可以实时的读取value[也就是说只要外设发送数据[一般外设的频率为10Hz]，代理就会调用此方法]。</li>
<li>处理接收到的value，[hex值，得转换] 之后就自由发挥了，在这期间都是通过代理来实现的，也就是说你只需要处理你想要做的事情，代理会帮你调用方法。[别忘了添加代理]</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://liuyanwei.jumppo.com/2015/07/17/ios-BLE-1.html" target="_blank" rel="external">蓝牙相关基础知识</a></p>
<p><a href="https://www.engadget.com/2010/06/02/hacksugar-bringing-back-the-on-screen-keyboard/" target="_blank" rel="external">hacksugar: Bringing back the on-screen keyboard</a></p>
<p><a href="https://missajj.gitbooks.io/missajj_iosdevelopment_gitbook/content/蓝牙交互CoreBlueTooth/iff09_lan_ya_jiaohu_corebluetooth.html" target="_blank" rel="external">蓝牙交互CoreBlueTooth</a></p>
<p><a href="http://stackoverflow.com/questions/16839400/ios-and-bluetooth" target="_blank" rel="external">iOS and bluetooth</a></p>
<p><a href="http://lynchwong.com/2014/12/15/iOS蓝牙，CoreBluetooth框架简介及入门使用/" target="_blank" rel="external">iOS蓝牙，CoreBluetooth框架简介及入门使用</a></p>
<p><a href="http://thinkingiot.blogspot.com/2015/11/bluetooth-mfi.html" target="_blank" rel="external">想做iOS Bluetooth產品但又不想過MFI的討論</a></p>
<p><a href="http://stackoverflow.com/questions/19998078/corebluetooth-cannot-find-devices-but-ios-can" target="_blank" rel="external">CoreBluetooth cannot find devices but iOS can</a></p>
<p><a href="https://www.v2ex.com/t/179481" target="_blank" rel="external">请教熟悉iOS的朋友一个问题</a></p>
<p><a href="http://www.jianshu.com/p/760f042a1d81" target="_blank" rel="external">【译】iOS蓝牙编程指南 – 核心蓝牙概述</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS蓝牙开发简介&quot;&gt;&lt;a href=&quot;#iOS蓝牙开发简介&quot; class=&quot;headerlink&quot; title=&quot;iOS蓝牙开发简介&quot;&gt;&lt;/a&gt;iOS蓝牙开发简介&lt;/h1&gt;&lt;p&gt;蓝牙 4.0出现之前，蓝牙 2.0时只有iOS设备和苹果认证的MFI设备才可以被iO
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="蓝牙开发" scheme="http://XibHe.github.io/tags/%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS BLE 开发" scheme="http://XibHe.github.io/tags/iOS-BLE-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>记一个在使用Masonry时遇到的问题</title>
    <link href="http://XibHe.github.io/2016/09/18/%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%9C%A8%E4%BD%BF%E7%94%A8Masonry%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://XibHe.github.io/2016/09/18/记一个在使用Masonry时遇到的问题/</id>
    <published>2016-09-18T12:35:34.000Z</published>
    <updated>2017-06-22T12:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Masonry的场景"><a href="#使用Masonry的场景" class="headerlink" title="使用Masonry的场景"></a>使用Masonry的场景</h1><p>在“我的”界面顶部区域用来展示用户的登录信息，顶部有两种样式的变换，即，由未登录—-&gt;已登录。<br>如图所示，<br><img src="http://odchyrav4.bkt.clouddn.com/mine1.PNG?imageView/4/w/200/q/45" alt="IMG_3210"></p>
<p>其中头像区域是UIImageView，”登录/注册”是UILabel。登录成功后，头像区域会显示由服务器返回的头像地址生成的图片，并且其位置发生变化，不在居中显示，显示”登录/注册”的UILabel变为显示用户昵称，并且坐标位置发生改变。<br>如图所示，<br><img src="http://odchyrav4.bkt.clouddn.com/mine2.PNG?imageView/4/w/200/q/45" alt="已登录"></p>
<p>我的问题来了，在设置头像和标题位置时使用<strong>mas_remakeConstraints</strong>设置二者的约束，<br>代码如图，<br><img src="http://odchyrav4.bkt.clouddn.com/2016-09-18-QQ20160918-0@2x.png" alt="代码"></p>
<p>当从未登录切换到已登录时，已登录的头像位置会发生改变，变得特别大，不受约束控制。<br>控制台会报如下错误，<br><img src="http://odchyrav4.bkt.clouddn.com/2016-09-18-QQ20160918-1@2x.png" alt="报错"></p>
<p>刚开始没有意识到改变UIImageView的约束导致的新旧两种约束冲突造成的问题。在一个小时未解决该问题后，放弃了使用Masonry，改为使用代码做布局。今天，再回头看看这个问题，联想到忽略了什么东西，就打开Masonry文档从头开始仔细往下看，结果就看到了这句话，</p>
<blockquote>
<p>Sometimes you need modify existing constraints in order to animate or remove/replace constraints. In Masonry there are a few different approaches to updating constraints.</p>
</blockquote>
<p>文档上列举了三种修改现有约束的方法，</p>
<ol>
<li><p><strong>References</strong><br>你可以引用一个特定约束条件的约束，使表达式的结果分配给一个局部变量或一个类属性。</p>
</li>
<li><p><strong>mas_updateConstraints</strong><br>作为一种选择，如果你只是去更新固有的约束值，你可以使用<strong>mas_updateConstraints</strong>这种便利的方法替换<strong>mas_makeConstraints</strong>。</p>
</li>
<li><p><strong>mas_remakeConstraints</strong><br><strong>mas_updateConstraints</strong>用于更新一组约束，但要做那些费力的超出超出常量值的约束更新。这时就需要选择<strong>mas_remakeConstraints</strong>。<br><strong>mas_remakeConstraints</strong>类似于<strong>mas_updateConstraints</strong>，但它不是更新常量值，当再次为这些已经存在约束的视图设置约束前，它会移除掉该视图上的所有约束。这就让你可以为视图设置新的约束，而不用考虑移除之前已经存在的其他约束。</p>
</li>
</ol>
<p>于是，我使用文档中提到的第三种方法，将所有的<strong>mas_makeConstraints</strong>换成了<strong>mas_remakeConstraints</strong>，就解决了约束错乱的问题。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry使用</a></p>
<p>造成这个问题的主要原因是我没有认真看Masonry的文档，文档上说的已经很清楚了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Masonry的场景&quot;&gt;&lt;a href=&quot;#使用Masonry的场景&quot; class=&quot;headerlink&quot; title=&quot;使用Masonry的场景&quot;&gt;&lt;/a&gt;使用Masonry的场景&lt;/h1&gt;&lt;p&gt;在“我的”界面顶部区域用来展示用户的登录信息，顶部有两种样式
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="Masonry" scheme="http://XibHe.github.io/tags/Masonry/"/>
    
      <category term="iOS适配" scheme="http://XibHe.github.io/tags/iOS%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
</feed>
