<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XibHe&#39;s Blog</title>
  <subtitle>It is never too late，Just do it better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://XibHe.github.io/"/>
  <updated>2017-11-26T09:30:58.000Z</updated>
  <id>http://XibHe.github.io/</id>
  
  <author>
    <name>XibHe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AFNetworking到底做了什么？</title>
    <link href="http://XibHe.github.io/2017/11/26/AF3.x/"/>
    <id>http://XibHe.github.io/2017/11/26/AF3.x/</id>
    <published>2017-11-25T16:00:00.000Z</published>
    <updated>2017-11-26T09:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在对接一个demo，主要是调用一下SDK，实现一些功能。发现这个demo的网络请求部分是基于<strong>NSURLConnection</strong>做的一些简单调用。用起来感觉总是怪怪的，于是就想切换回自己一直在用的<strong>AFNetworking</strong>。结果，和我想的还是不太一致。同时，也暴露出一个严重的问题：对<strong>AFNetworking</strong>实现原理，到底做了什么？可以说是一窍不通。之前一直以为对<strong>AFNetworking</strong>很熟悉了，现在看来，也只是停留在调用<strong>AFHTTPSessionManager</strong>的表明。</p>
<p>之前的调用是做了一层简单的封装，将请求时用到的各种参数在一个继承自NSObject的类中统一配置。如下，</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>postWithUrl<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString<span class="token operator">*</span><span class="token punctuation">)</span>url params<span class="token punctuation">:</span><span class="token punctuation">(</span>NSDictionary<span class="token operator">*</span><span class="token punctuation">)</span>params  success<span class="token punctuation">:</span><span class="token punctuation">(</span>HttpSuccessBlock<span class="token punctuation">)</span>success failure<span class="token punctuation">:</span><span class="token punctuation">(</span>HttpFailureBlock<span class="token punctuation">)</span>failure
<span class="token punctuation">{</span>
    AFHTTPSessionManager <span class="token operator">*</span>manager <span class="token operator">=</span> <span class="token punctuation">[</span>AFHTTPSessionManager manager<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setValue<span class="token punctuation">:</span><span class="token string">@"application/json; charset=UTF-8"</span> forHTTPHeaderField<span class="token punctuation">:</span><span class="token string">@"Content-Type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setValue<span class="token punctuation">:</span><span class="token string">@"gzip"</span> forHTTPHeaderField<span class="token punctuation">:</span><span class="token string">@"Accept-Encoding"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    manager<span class="token punctuation">.</span>requestSerializer<span class="token punctuation">.</span>timeoutInterval <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置请求超时时间</span>
    manager<span class="token punctuation">.</span>responseSerializer <span class="token operator">=</span> <span class="token punctuation">[</span>AFJSONResponseSerializer serializer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    manager<span class="token punctuation">.</span>responseSerializer<span class="token punctuation">.</span>acceptableContentTypes <span class="token operator">=</span> <span class="token punctuation">[</span>NSSet setWithObject<span class="token punctuation">:</span><span class="token string">@"text/html"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>manager POST<span class="token punctuation">:</span>url parameters<span class="token punctuation">:</span>params progress<span class="token punctuation">:</span>nil success<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURLSessionDataTask <span class="token operator">*</span> _Nonnull task<span class="token punctuation">,</span> id  _Nullable responseObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        NSDictionary <span class="token operator">*</span>bodyObjDic <span class="token operator">=</span> <span class="token punctuation">[</span>responseObject objectForKey<span class="token punctuation">:</span><span class="token string">@"body"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"bodyObjDic = %@"</span><span class="token punctuation">,</span>bodyObjDic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        NSString <span class="token operator">*</span>code <span class="token operator">=</span> <span class="token punctuation">[</span>bodyObjDic objectForKey<span class="token punctuation">:</span><span class="token string">@"code"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"url = %@,code = %@"</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>code isEqualToString<span class="token punctuation">:</span><span class="token string">@"200"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span>
                <span class="token function">success</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>responseObject objectForKey<span class="token punctuation">:</span><span class="token string">@"body"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> nil<span class="token punctuation">)</span><span class="token punctuation">{</span>
            NSError <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token punctuation">[</span>NSError errorWithDomain<span class="token punctuation">:</span><span class="token string">@"请求错误"</span> code<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> userInfo<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span>
                <span class="token function">failure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> failure<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURLSessionDataTask <span class="token operator">*</span> _Nullable task<span class="token punctuation">,</span> NSError <span class="token operator">*</span> _Nonnull error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">@"NSURLErrorDomain"</span> isEqualToString<span class="token punctuation">:</span>error<span class="token punctuation">.</span>domain<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            error <span class="token operator">=</span> <span class="token punctuation">[</span>NSError errorWithDomain<span class="token punctuation">:</span><span class="token string">@"请监测您的网络环境"</span> code<span class="token punctuation">:</span>error<span class="token punctuation">.</span>code  userInfo<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">@"NSCocoaErrorDomain"</span> isEqualToString<span class="token punctuation">:</span>error<span class="token punctuation">.</span>domain<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            error <span class="token operator">=</span> <span class="token punctuation">[</span>NSError errorWithDomain<span class="token punctuation">:</span><span class="token string">@"服务器繁忙，请稍候重试"</span> code<span class="token punctuation">:</span>error<span class="token punctuation">.</span>code userInfo<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span>
            <span class="token function">failure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再将所有用于请求的url都放在这个类的类别中，统一管理。如下，</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">/**
 注册接口
 */</span>
<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>getRegistedWithParams<span class="token punctuation">:</span><span class="token punctuation">(</span>NSDictionary<span class="token operator">*</span><span class="token punctuation">)</span>params success<span class="token punctuation">:</span><span class="token punctuation">(</span>HttpSuccessBlock<span class="token punctuation">)</span>success failure<span class="token punctuation">:</span><span class="token punctuation">(</span>HttpFailureBlock<span class="token punctuation">)</span>failure
 <span class="token punctuation">{</span>
     <span class="token punctuation">[</span><span class="token keyword">self</span> postWithUrl<span class="token punctuation">:</span><span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@"%@"</span><span class="token punctuation">,</span>kILVBHost<span class="token punctuation">]</span> params<span class="token punctuation">:</span>params success<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>id JSON<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">success</span><span class="token punctuation">(</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> failure<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSError <span class="token operator">*</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">failure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>demo在网络请求时，会将参数转换并设置到<strong>HTTPBody</strong>中，上面那种直接使用AFHTTPSessionManager进行POST请求的方式就不行，其无法在请求时将请求的参数设置到request的HTTPBody中。于是，尝试通过新建一个<strong>NSMutableURLRequest</strong>请求，通过设置它的<strong>HTTPBody</strong>到达目的。如下，</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>postWithUrl<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString<span class="token operator">*</span><span class="token punctuation">)</span>url params<span class="token punctuation">:</span><span class="token punctuation">(</span>NSDictionary<span class="token operator">*</span><span class="token punctuation">)</span>params  success<span class="token punctuation">:</span><span class="token punctuation">(</span>HttpSuccessBlock<span class="token punctuation">)</span>success failure<span class="token punctuation">:</span><span class="token punctuation">(</span>HttpFailureBlock<span class="token punctuation">)</span>failure
<span class="token punctuation">{</span>
    AFHTTPSessionManager <span class="token operator">*</span>manager <span class="token operator">=</span> <span class="token punctuation">[</span>AFHTTPSessionManager manager<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setValue<span class="token punctuation">:</span><span class="token string">@"application/json; charset=UTF-8"</span> forHTTPHeaderField<span class="token punctuation">:</span><span class="token string">@"Content-Type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setValue<span class="token punctuation">:</span><span class="token string">@"gzip"</span> forHTTPHeaderField<span class="token punctuation">:</span><span class="token string">@"Accept-Encoding"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    manager<span class="token punctuation">.</span>requestSerializer<span class="token punctuation">.</span>timeoutInterval <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置请求超时时间</span>
    manager<span class="token punctuation">.</span>responseSerializer <span class="token operator">=</span> <span class="token punctuation">[</span>AFJSONResponseSerializer serializer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSError <span class="token operator">*</span>requestError <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    NSMutableURLRequest <span class="token operator">*</span>request <span class="token operator">=</span> <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer requestWithMethod<span class="token punctuation">:</span><span class="token string">@"POST"</span> URLString<span class="token punctuation">:</span>url parameters<span class="token punctuation">:</span>params error<span class="token punctuation">:</span><span class="token operator">&amp;</span>requestError<span class="token punctuation">]</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>HTTPBody <span class="token operator">=</span> <span class="token punctuation">[</span>NSData data<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>session dataTaskWithRequest<span class="token punctuation">:</span>request completionHandler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSData <span class="token operator">*</span> _Nullable data<span class="token punctuation">,</span> NSURLResponse <span class="token operator">*</span> _Nullable response<span class="token punctuation">,</span> NSError <span class="token operator">*</span> _Nullable error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"data = %@,response = %@"</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但请求时会报500的错误。看来还需要接着往深了抛，看看<strong>AFNetworking</strong>到底做了什么？</p>
<font color="19ee">待续……</font>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在对接一个demo，主要是调用一下SDK，实现一些功能。发现这个demo的网络请求部分是基于&lt;strong&gt;NSURLConnection&lt;/strong&gt;做的一些简单调用。用起来感觉总是怪怪的，于是就想切换回自己一直在用的&lt;strong&gt;AFNetworking&lt;/s
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="AFNetworking" scheme="http://XibHe.github.io/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>(译)软件开发这份工作到了35岁之后就是尽头了吗</title>
    <link href="http://XibHe.github.io/2017/11/19/dead-end%20job%20/"/>
    <id>http://XibHe.github.io/2017/11/19/dead-end job /</id>
    <published>2017-11-18T16:00:00.000Z</published>
    <updated>2017-11-19T08:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>我想你会问3个不同的问题，也许应该修改一下这个问题。我们来分解一下吧：</p>
<ol>
<li>年龄歧视是软件开发行业中的问题吗？</li>
<li>你应该把自己的职业转向管理角色，而不是个人开发者角色吗？</li>
<li>软件开发个人开发者是一个死胡同吗？</li>
</ol>
<p>在Quora上关于这些问题的提问，每个问题都有详细的回答，其中细节如上所述，所以我将简要地讨论每个问题。</p>
<p>对于年龄歧视，我不认为有人会否认这个行业有一定的年龄歧视。你可以看看几乎所有硅谷公司的新员工的平均年龄。我怀疑，大多数中等雇佣年龄远低于30。然而，这并不一定意味着官方的公司政策不会雇用超过一定年龄，种族，性别，性别偏好或其他特征的候选人。</p>
<p>为什么在高科技产业中存在年龄歧视，原因是多方面的，并非是所有公司一起商量好不雇用年长员工。一方面，许多公司发现，使用新的大学毕业生（麻省理工学院和斯坦福大学等）作为招聘的主要对象是最容易的。新毕业生便宜。他们有一个稳定的质量。他们不受其他公司经验的束缚。他们是一张白纸，比较容易教他们企业文化，软件方法论，最佳实践，并与参与其他业务的新毕业相互配合工作。</p>
<p>我认为，硅谷的任何人都不会认为，如果你有一个在相关技术方面拥有3年扎实编程经验的候选人（加上也是有名望的毕业生），不是一个好的候选人。事实上，我甚至可以说N年开发经验并不重要，没有确切的说明，有N年相关经验的候选人比N + 1年经验的候选人要好，所有其他因素是平等的，技能 以及与公司正在进行的业务相关的经验。</p>
<p>对于工程师来说，保持相关性的技术变化太快的说法可能是一回事，但是构建网络的核心技术已经存在了几十年了。C语言早在七十年代末就出现了，已近有将近四十多年的历史了。Javascript语言，第一次出现在1997年，大概是20年前。这意味着几十年开发经验的工程师，他们的工作已经接近退休年龄，整个职业生涯一直专注于C和运行Unix服务器。这样的工程师非常少，有这么多的经验，但是我怀疑有谁会试图宣称刚刚毕业的22岁的人肯定比60岁的人好，相比之下，他们的一些人已近专研了40多年技术。当然，这些类型的工程师很少。</p>
<p>因此，对于问题的另一方面，我不认为软件工程是一个死胡同的事业。我想说的是，在薪酬增长方面，在一定的时间之后，它会趋于稳定。部分原因就是工程师本质上是人为的商品。除非你是一个非常特别的工程师，事实上，你总是可以被其他人取代。与其他竞争性行业相比，我认为这有助于保持软件工程工资水平。不过，我几乎可以保证，对软件工程师的需求将超过应聘者中新毕业生或其他人的供应，所以你总能找到工作。不过，你可能不会每年收到那些10％的指数提升，就像你两三年前那样。</p>
<p>最后，关于转为管理者是否是一个更好的选择，我想问为什么只考虑这个选项？当然有许多职业道路可供选择。你可以转换到另一个工程领域。例如，许多不喜欢创造产品的软件工程师会转移到其他角色，有时在同一个公司，例如运营，产品管理，项目管理，质量保证，或者更少的技术，如销售或行政职位。我也有一些完全改变职业的朋友，比如全职教学。</p>
<p>最后让我说，以为自己为例，在和那些具有扎实工程背景的经理人员一起工作时，我很欣赏他们，最好是与公司相关技术的软件工程，所以请不要急于进入工程管理的职业道路。对于我们这些将来可能不得不与你打交道的人，作为开发者，可以获得5年或6年的良好工程实践经验。了解这个行业是如何运作的，作为一个经验丰富的开发者。只有这样，才能考虑把你的职业转向管理方向。就像你不会雇用花店来建造布鲁克林大桥。同样也不会聘请没有任何开发经验的人担任项目经理。</p>
<h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="https://www.quora.com/Is-software-development-really-a-dead-end-job-after-age-35-40/answer/Jeff-Nelson-32?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=website" target="_blank" rel="external">Is software development really a dead-end job after age 35-40?</a></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想你会问3个不同的问题，也许应该修改一下这个问题。我们来分解一下吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;年龄歧视是软件开发行业中的问题吗？&lt;/li&gt;
&lt;li&gt;你应该把自己的职业转向管理角色，而不是个人开发者角色吗？&lt;/li&gt;
&lt;li&gt;软件开发个人开发者是一个死胡同吗？&lt;/li&gt;

    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="职业生涯" scheme="http://XibHe.github.io/tags/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
  <entry>
    <title>凌冬将至</title>
    <link href="http://XibHe.github.io/2017/11/11/introspect/"/>
    <id>http://XibHe.github.io/2017/11/11/introspect/</id>
    <published>2017-11-10T16:00:00.000Z</published>
    <updated>2017-11-26T05:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>至此光棍节来临之际，祝各位光棍们节日快乐，年年无今日，岁岁无今朝，早日脱单。最近一个月不是很忙，之前做的项目在8月中旬停了下来，项目是停了下来，但整个项目组却闲不下来。九月份接手了一个新需求，为公司的另一个项目开发录入药品的小程序。工期算上测试、发布大概是二十天。这中间虽然是第一次接触小程序开发，最后，跌跌撞撞的总算是顺利上线了。</p>
<p>开发小程序的这段时间，总是有些难熬，自己之前并没有HTML、CSS、JavaScript的基础，在w3cschool上看了两天的HTML、CSS基础，就硬着头皮上了。不过还好有一个前端老司机带着，一起踩踩小程序的坑。在前两年前端很火的时候，我就很想跟风学习一下了，但总是给自己找各种理由。最后，学习计划就不了了之了。这次的学习动机来的如此强烈，看来只有<strong>将自己的学习动力与工作中的业务需求捆绑起来，才能迈出这第一步</strong>。</p>
<p>随着开发的深入，不得不惊讶于小程序<strong>“用完即走”</strong>的设计理念。与移动端APP相比，小程序真的很小，开发成本小的多。不得不感慨，移动开发的凌冬将至，或许早已来临了。苹果的光环正在消退，不只是iOS开发，没有哪种技术是长盛不衰的，对所有的与技术相关的开发者而言:</p>
<blockquote>
<p>请勿陷入对技术的狂热之中</p>
</blockquote>
<p>自从今年以来，发现了自己的技术短板。因为崇拜某项特定的技术，只是因为自己熟悉这种技术。我很自然的会相信自己选择的是最好的，然后这会让我经常忽略一些与之相悖的意见。由于不了解其他技术，就倾向于选择自己最熟悉的技术并先入为主的认为它是最好的。因此陷入了对自己熟悉技术的狂热之中而无法自拔。这样只会使我们变得自以为是，固步自封，墨守成规。自以为找到所有答案，却只是裹足不前。</p>
<p>最近两年以来，互联网的发展不再像早期那样粗放了，对各种技术人员的需求趋于稳定。<strong>“一招鲜，吃遍天”</strong>的时代终会落幕，全栈会成为一种趋势。不只贫穷会限制我们的想象力，作为一名开发者，我们因对某项技术的狂热崇拜也会限制我们在业务需求上的想象力。应戒之，慎之。</p>
<p>但无论如何增加知识广度的同时，先扪心自问自己所擅长技术是否全面掌握了。拿我自己来说，也有四年多 iOS 开发经验了，但做的项目都是很普通的那种。这里并不是说普通项目不能提高开发水平，相对于那些业务逻辑复杂的项目，其复杂的关联业务、交互设计会早早的暴露出性能方面的问题，因此，开发者不得不从各方面考虑，最终深入研究这些技术点，并形成最终的优化方案。而普通应用很少遇到性能上的瓶颈，开发者也早已习惯了这种堆代码、堆逻辑的开发流程，渐渐麻木，在技术上不在积极进取。我管这种开发者叫“码农”，“搬砖工”。很不幸，我自己就是这样的“码农”。</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/introspect1.png" alt=""></p>
<p>这也是很多初级中级 iOS 开发者的共性，没有深入某一具体的方向解决对应的问题，没有自己的技术深度。当我们被全栈开发这种趋势追赶着拼命向前奔命，花费时间、精力学习那些新技术时，需要反思自己有没有达到所擅长领域的技术深度，对掌握的知识，是肤浅还是真正的精通。</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/introspect2.jpg" alt=""></p>
<p>互联网发展非常快，每天每个月都有很多的新技术面世。在我们朝着全栈一路狂奔时，需要思考为什么要用这个技术？它能解决什么问题？有什么弊端吗？为了技术而技术，考虑问题的全面性就会差很多。裹足不前不行，盲目追新亦是不行，这里很考验我们对新技术的判断，最终这些技术都要对应业务场景，或许多经历几次因业务需求变化而导致的通宵加班，彻夜上线才会让开发者有所反思，经历几次痛苦的重构才会刻骨铭心吧！</p>
<p>但无论如何，凌冬将至，大家过冬的粮食都储备充足了吗？</p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;至此光棍节来临之际，祝各位光棍们节日快乐，年年无今日，岁岁无今朝，早日脱单。最近一个月不是很忙，之前做的项目在8月中旬停了下来，项目是停了下来，但整个项目组却闲不下来。九月份接手了一个新需求，为公司的另一个项目开发录入药品的小程序。工期算上测试、发布大概是二十天。这中间虽然
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="自省" scheme="http://XibHe.github.io/tags/%E8%87%AA%E7%9C%81/"/>
    
  </entry>
  
  <entry>
    <title>利用JenKins持续集成iOS项目时遇到的问题</title>
    <link href="http://XibHe.github.io/2017/11/06/JenKins-Continuous-Integration/"/>
    <id>http://XibHe.github.io/2017/11/06/JenKins-Continuous-Integration/</id>
    <published>2017-11-05T16:00:00.000Z</published>
    <updated>2017-11-08T02:29:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>持续集成(Continuous Integration，简称CI)是一种软件开发实践：许多团队频繁地集成他们的工作，每位成员通常进行日常集成，进而每天会有多种集成。每个集成会由自动的构建（包括测试）来尽可能快地检测错误。许多团队发现这种方法可以显著的减少集成问题并且可以使团队开发更加快捷。</p>
<p>CI是一种开发实践。实践应该包含3个基本模块，一个可以自动构建的过程，自动编译代码，可以自动分发，部署和测试。一个代码仓库，SVN或者Git。最后一个是一个持续集成的服务器。通过持续集成，可以让我们通过自动化等手段高频率地去获取产品反馈并响应反馈的过程。</p>
<h2 id="持续集成的优点"><a href="#持续集成的优点" class="headerlink" title="持续集成的优点"></a>持续集成的优点</h2><ol>
<li>缩减开发周期，快速迭代版本</li>
<li>自动化流水线操作带来的高效</li>
<li>随时可部署</li>
<li>极大程度避免低级错误</li>
</ol>
<h2 id="持续化集成工具—JenKins"><a href="#持续化集成工具—JenKins" class="headerlink" title="持续化集成工具—JenKins"></a>持续化集成工具—JenKins</h2><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
<p>JenKins的用途:</p>
<ol>
<li>构建项目自动化打包可以省去开发人员好多时间，重要的是，Jenkins为我们维护了一套高质量可用的代码，而且保证了一个纯净的环境。</li>
<li>可以用来自动化测试，在本地生成大批的测试用例，每天利用服务器不断的跑这些用例。</li>
<li>静态代码分析，可以检测出很多代码的问题，比如潜在的内存泄露的问题。</li>
<li>随时部署，Jenkins在打包完成之后可以设定之后的操作，这个时候往往就是提交app到跑测试用例的系统，或者部署到内测平台生成二维码。</li>
</ol>
<h3 id="开始安装JenKins"><a href="#开始安装JenKins" class="headerlink" title="开始安装JenKins"></a>开始安装JenKins</h3><p>方法一: <a href="https://jenkins.io" target="_blank" rel="external">直接下载安装包</a><br>需要注意选择自定义安装，<br><img src="http://7xkqix.com1.z0.glb.clouddn.com/install-2.png?attname=" alt=""></p>
<p>取消”Start at boot as jenKins”的勾选，<br><img src="http://7xkqix.com1.z0.glb.clouddn.com/install-3.png?attname=" alt=""></p>
<p>安装完成后在Terminal中输入,</p>
<blockquote>
<p>open /Applications/Jenkins/jenkins.war</p>
</blockquote>
<p>即可打开Jenkins</p>
<p>方法二: 使用命令行安装<br>安装JenKins，</p>
<blockquote>
<p>$ brew install jenkins</p>
</blockquote>
<p>若brew无效？则需要安装homebrew，</p>
<blockquote>
<p>$ ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="external">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”</p>
</blockquote>
<p>启动JenKins，</p>
<blockquote>
<p>$ jenkins</p>
</blockquote>
<p>启动JenKins后使用浏览器访问JenKins，</p>
<p>地址为: <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p>
<p>使用安装包安装后会自动打开，如果端口冲突那么请修改端口</p>
<blockquote>
<p>defaults write /Library/Preferences/org.jenkins-ci httpPort 7070</p>
</blockquote>
<p><strong>推荐使用方法二安装JenKins，使用命令行可以避免后面构建项目时，报一些莫名其妙的权限错误。</strong></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>若使用git做源码管理，则需要安装</p>
<ul>
<li>GIT plugin</li>
<li>GitHub plugin</li>
</ul>
<p>这两个插件，为了方便管理打包证书，需要安装插件</p>
<ul>
<li>Keychains and Provisioning Profiles Management</li>
</ul>
<p>由于需要使用Xcode编译环境，因此必须要安装插件</p>
<ul>
<li>Xcode integration</li>
</ul>
<p>下面这两个方式都可以找到插件管理<br><img src="http://7xkqix.com1.z0.glb.clouddn.com/plugin-1.png?attname=" alt=""></p>
<h2 id="配置构建环境"><a href="#配置构建环境" class="headerlink" title="配置构建环境"></a>配置构建环境</h2><p>在配置构建环境前，我们先来导入一下打包证书，点击系统管理，找到刚才添加的插件<font color="ff6d55">Keychains and Provisioning Profiles Management</font>，点击选取文件，导入名为<font color="ff6d55">login.keychain</font>的钥匙串文件。</p>
<blockquote>
<p>这个Keychain其实在<strong>/Users/管理员用户名/Library/keychains/login.keychain</strong>,当把这个Keychain设置好了之后，Jenkins会把这个Keychain拷贝到<strong>/Users/管理员用户名/.jenkins/workspace/项目目录名称</strong>，(.jenkins是隐藏文件)。</p>
</blockquote>
<p>如图所示，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration1.png" alt=""></p>
<p>其中，Keychains中的Identities输入项，对应的是刚才点击<font color="ff6d55">Upload</font>后钥匙串中的测试证书名称，发布证书名称(需要输入证书名称)。</p>
<p>Provisioning Profiles中对应的是刚才上传的证书配置文件。这些配置文件的存放路径为:<font color="ff6d55">/Users/管理员用户名/Library/MobileDevice/Provisioning Profiles</font></p>
<p>这样Adhoc证书和签名文件就在Jenkins中配置好了，接下来我们只需要在项目的构建配置中指定相关文件即可。</p>
<p><font color="ff6d55" size="4">注意</font>: 有些升级了最新的Mac OS系统后，<font color="ff6d55">/Users/管理员用户名/Library/keychains</font>目录下没有<strong>login.keychain</strong>文件，有的是一个名为<strong>login.keychain-db</strong>的文件，这是需要将login.keychain-db文件copy到桌面，修改成文件名为<strong>login.keychain</strong>。点击”<strong>选取文件</strong>“，选取并上传这个修改名称后的<strong>login.keychain</strong>文件。</p>
<p>导入证书后需要在”<strong>系统管理</strong>“–&gt;”<strong>系统设置</strong>“里再设置”<strong>Xcode Builder</strong>“时，访问证书的全局路径。如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration6.png" alt=""></p>
<p>“<strong>Keychain path</strong>“为钥匙串的本地路径，”<strong>Keychain password</strong>“为访问钥匙串的密码。设置完成后不要忘记点击”<strong>保存</strong>“。</p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建 -&gt; 输入项目名称 -&gt; 选择“<strong>构建一个自由风格的软件项目</strong>” -&gt; 点击ok就行了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1194012-b52d3d102c21f004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p>如图所示，<br><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration2.png" alt=""></p>
<p>其中，Repository URL对应的是svn的路径，Credentials为登录svn时的用户账号密码，点击”Add”按钮添加即可。Check-out Strategy最好选择每次update最新代码前都revert下，而不是“Use ‘svn update’ as much as possible” ，因为我使用的是CocoaPods管理的第三方，每次打包运行pod install会修改了工程配置文件，如果下次自动打包前不先revert再update的话会出现冲突。</p>
<h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p>这里就是告诉jenkins什么时候自动构建,这里我同时设置了每周一到周五在每天的8点到9点之间执行一次,当然也可以不设置。</p>
<p><img src="http://7xkqix.com1.z0.glb.clouddn.com/triggerinfo.png?attname=" alt=""></p>
<h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p>勾选“<strong>Keychains andProvisioning Profiles Management</strong>”和“<strong>Mobile Provisioning Profiles</strong>”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2367707-b8668d49ff828810.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2367707-e86675d8dc8c675e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里Code Signing Identity和Provisioning Profile选项中对应上文<font color="ff6d55">Keychains and Provisioning Profiles Management</font>插件中导入的钥匙串文件中的证书及证书的配置文件。当然也可以不勾选Mobile Provisioning Profiles。</p>
<h3 id="构建-构建步骤"><a href="#构建-构建步骤" class="headerlink" title="构建(构建步骤)"></a>构建(构建步骤)</h3><p>点击”增加构建步骤”选项，因为我使用的是CocoaPods管理的第三方，打包前先运行<br><strong>pod install –verbose –no-repo-update</strong>安装下第三方库。</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration3.png" alt=""></p>
<p><font color="ff6d55" size="5">注意:</font>执行pod install命令时，需要cd到pod文件所在的目录，<font color="ff6d55">${WORKSPACE}</font>是项目在JenKins中的工作目录，而我的项目由于多套了一层目录BusinessMall，因此需要加上这层目录<font color="ff6d55">${WORKSPACE}/BusinessMall</font>，否则，在构建时就会报:</p>
<blockquote>
<p>[!] No `Podfile’ found in the project directory.</p>
<p>Build step ‘Execute shell’ marked build as failure</p>
</blockquote>
<p>的错误。在执行完<strong>pod install</strong>后，就可以使用Xcode构建项目打包环境了。</p>
<p><strong>添加构建步骤</strong>-&gt; <strong>Xcode</strong></p>
<p>在”<strong>General build settings</strong>“中，点击”<strong>Settings</strong>“按钮设置相关参数。</p>
<blockquote>
<p>Target要与Xcode项目中Target的名字对应</p>
<p>Clean before build设置为YES</p>
</blockquote>
<p>勾选”<strong>Pack application，build and sign .ipa？</strong>“的复选框，会弹出设置生成ipa包的几个参数项。如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration7.png" alt=""></p>
<blockquote>
<p>Export method，ipa的类型(‘development’, ‘ad-hoc’, ‘enterprise’ or ‘app-store’) </p>
<p>.ipa filename pattern，ipa的名称。</p>
<p>Output directory，输出ipa的文件路径。</p>
</blockquote>
<p><font color="ff6d55">注意:</font>这里如果<strong>Xcode的版本低于9.0</strong>，就可以正常输出ipa包。如果<strong>Xcode版本不低于9.0</strong>，就会由于<font color="ff6d55">Xcode 9.0不在允许你访问钥匙串里的内容</font>，而输出ipa失败。具体的解决方法请参照后面”<strong>构建项目时遇到的几个问题</strong>“中具体的解决方法。</p>
<p>继续设置”<strong>Code signing &amp; OS X keychain options</strong>“证书信息，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration4.png" alt=""></p>
<p>其中，Development Team ID为开发团队ID,可以在钥匙串中的证书详情里查看。勾选Unlock Keychain，显示为之前上传的login.keychain文件。</p>
<p>如果项目使用了<strong>cocoaPods</strong>,需要配置<strong>Advanced Xcode build options</strong>,设置</p>
<ol>
<li>Xcode Schema File，设为Xcode项目中的schema</li>
<li>Xcode Workspace File，这里设置绝对路径，不需要带上.xcworkspace后缀。如果项目中没有workspace后缀，那就在“Xcode Project File”上填.xcodeproj文件的路径。</li>
<li>Build output directory，设为<strong>${WORKSPACE}/build/</strong></li>
</ol>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration5.png" alt=""></p>
<p><font color="ff6d55">注意:</font>Xcode Workspace File为绝对路径，也就是Jenkins用于构建项目的workspace目录中，.xcworkspace文件所在目录的路径。</p>
<p>如果路径不正确，则在构建项目时，会报:</p>
<blockquote>
<p>open BusinessMall.xcworkspace</p>
<p>The file /Users/zyjk_imac-penghe/.jenkins/workspace/BusinessMall/BusinessMall.xcworkspace does not exist.</p>
<p>Build step ‘Execute shell’ marked build as failure</p>
</blockquote>
<p>的错误。</p>
<h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p>添加构建后操作步骤，使用脚本将生成的ipa包上传到fir或者蒲公英等三方平台，扫码下载安装。参考<a href="http://blog.fir.im/jenkins/" target="_blank" rel="external">http://blog.fir.im/jenkins/</a>使用官方工具<a href="http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin-1.9.5.hpi" target="_blank" rel="external">fir-plugin-1.9.5.hpi</a>插件上传ipa包到fir。</p>
<h2 id="构建项目时遇到的几个问题"><a href="#构建项目时遇到的几个问题" class="headerlink" title="构建项目时遇到的几个问题"></a>构建项目时遇到的几个问题</h2><h3 id="1-pod-command-not-found"><a href="#1-pod-command-not-found" class="headerlink" title="1. pod: command not found"></a>1. pod: command not found</h3><blockquote>
<p>pod install<br>/var/folders/gn/rqsybgtn7f50w67111kj1hhw0000gn/T/hudson3821369083140563198.sh: line 2: pod: command not found<br>Build step ‘Execute shell’ marked build as failure</p>
</blockquote>
<p>解决方法: 在系统管理–&gt;系统设置，增加”全局属性”，勾选Environment variables，增加键值对列表。如图，</p>
<p><img src="http://img.blog.csdn.net/20160816160405862?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>其中，PATH是固定的，值是在终端输入:</p>
<blockquote>
<p>$echo $PATH</p>
</blockquote>
<p>命令获取，将输入命令后得到的值粘贴过来就可以了。</p>
<h3 id="2-ruby-executable-hooks-No-such-file-or-directory"><a href="#2-ruby-executable-hooks-No-such-file-or-directory" class="headerlink" title="2. ruby_executable_hooks: No such file or directory"></a>2. ruby_executable_hooks: No such file or directory</h3><blockquote>
<p>Pod: env: ruby_executable_hooks: No such file or directory<br>Build step ‘Execute shell’ marked build as failure</p>
</blockquote>
<p>从jekyll有时也会报这个错误得到启示，可能是由于执行pod命令的路径粗存在问题。在终端使用命令:</p>
<blockquote>
<p>$ which pod</p>
</blockquote>
<p>查看pod的安装路径为: <font color="ff6d55">/Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/pod</font>，而执行pod install的shell的环境变量中可能没有该路径。于是使用命令:</p>
<blockquote>
<p>$ gem env</p>
</blockquote>
<p>查看SHELL PATH:，发现列表中没有<font color="ff6d55">/Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/pod</font>这条路径。查阅了一些资料(<a href="https://coolestguidesontheplanet.com/add-shell-path-osx/" target="_blank" rel="external">What it is and How to Modify the Shell Path in macOS Sierra and OSX using Terminal</a>)后，发现可以在根目录的.bash_profile中增加永久的路径。在终端输入命令:</p>
<blockquote>
<p>$ sudo vi ~/.bash_profile</p>
</blockquote>
<p>打开根目录下的.bash_profile文件，将路径<font color="ff6d55">/Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/pod</font>插入:</p>
<blockquote>
<p>export PATH:”/Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/pod:$PATH”<br>结束编辑esc后，输入:wq保存。在终端输入命令:</p>
<p>$ source ～/.bash_profile </p>
</blockquote>
<p>让这个配置文件在修改后立即生效。此时，再查看gem env发现SHELL PATH:列表中，增加了<font color="ff6d55">/Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/pod</font>这条路径。</p>
<h3 id="3-find-spec-for-exe’-can’t-find-gem-cocoapods-gt-0-a-Gem-GemNotFoundException"><a href="#3-find-spec-for-exe’-can’t-find-gem-cocoapods-gt-0-a-Gem-GemNotFoundException" class="headerlink" title="3. `find_spec_for_exe’: can’t find gem cocoapods (&gt;= 0.a) (Gem::GemNotFoundException)"></a>3. `find_spec_for_exe’: can’t find gem cocoapods (&gt;= 0.a) (Gem::GemNotFoundException)</h3><blockquote>
<p> /Users/zyjk_imac-penghe/.rvm/rubies/ruby-2.2.0/lib/ruby/         site_ruby/2.2.0/rubygems.rb:271:in <code>find_spec_for_exe&#39;: can&#39;t  find gem cocoapods (&gt;= 0.a) (Gem::GemNotFoundException)
    from /Users/zyjk_imac-penghe/.rvm/rubies/ruby-2.2.0/lib/  ruby/site_ruby/2.2.0/rubygems.rb:299:in</code>activate_bin_path’<br>    from /Users/zyjk_imac-penghe/.rvm/rubies/ruby-2.2.0/bin/pod:  23:in <code>&lt;main&gt;&#39;
    from /Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/ruby_executable_hooks:15:in</code>eval’<br>    from /Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/ruby_executable_hooks:15:in `<main>‘<br> Build step ‘Execute shell’ marked build as failure</main></p>
</blockquote>
<p>子所以在构建项目时出现这个错误，是因为看到一篇文章(<a href="http://www.jianshu.com/p/d64f12577be8" target="_blank" rel="external">cocoapods插件GEM_PATH的配置</a>)，说是修改Xcode中CocoaPods插件的GEM_PATH:中的路径与SHELL PATH:中路径一致就能解决:</p>
<blockquote>
<p>env: ruby_executable_hooks: No such file or directory</p>
</blockquote>
<p>这个错误。于是就在~/.bash_profile文件中增加了一条GEM路径</p>
<blockquote>
<p>export GEM_PATH=”/Users/zyjk_imac-penghe/.rvm/gems/ruby-2.2.0/bin/pod”</p>
</blockquote>
<p>构建项目后就会报上面的错误，仔细看看，觉得是多了一条无效的执行路径导致的。于是，就删除了那条新添的GEM_PATH，再次构建就不报这个错误了。</p>
<h3 id="4-in-find-spec-for-exe’-can’t-find-gem-cocoapods-gt-0-a"><a href="#4-in-find-spec-for-exe’-can’t-find-gem-cocoapods-gt-0-a" class="headerlink" title="4. in `find_spec_for_exe’: can’t find gem cocoapods (&gt;= 0.a)"></a>4. in `find_spec_for_exe’: can’t find gem cocoapods (&gt;= 0.a)</h3><blockquote>
<p>in `find_spec_for_exe’: can’t find gem cocoapods (&gt;= 0.a) </p>
</blockquote>
<p>更新一下gem版本，终端命令如下；</p>
<blockquote>
<p>$ sudo gem update –system</p>
</blockquote>
<p>有时在输入命令后会出现ssh相关的网络错误提示，可以在终端输入命令:</p>
<blockquote>
<p>gem sources -a <a href="http://gems.ruby-china.org/" target="_blank" rel="external">http://gems.ruby-china.org/</a></p>
</blockquote>
<p>将源地址换为ruby-china。</p>
<h3 id="5-报xcodebuild-error-The-workspace-‘Project’-does-not-contain-a-scheme-named-‘Project’-的错误"><a href="#5-报xcodebuild-error-The-workspace-‘Project’-does-not-contain-a-scheme-named-‘Project’-的错误" class="headerlink" title="5. 报xcodebuild: error: The workspace ‘Project’ does not contain a scheme named ‘Project’.的错误"></a>5. 报xcodebuild: error: The workspace ‘Project’ does not contain a scheme named ‘Project’.的错误</h3><blockquote>
<p>Going to invoke xcodebuild:, scheme: Project, sdk: DEFAULT, workspace: Project, configuration: Debug, clean: YES, archive:NO, symRoot: DEFAULT, configurationBuildDir: /Users/ignat/.jenkins/workspace/Project/build, codeSignIdentity: DEFAULT<br>[Project] $ /usr/bin/xcodebuild -scheme Project -workspace Project.xcworkspace -configuration Debug clean build CONFIGURATION_BUILD_DIR=/Users/ignat/.jenkins/workspace/Project/build<br>Build settings from command line:<br>    CONFIGURATION_BUILD_DIR = /Users/ignat/.jenkins/workspace/Project/build</p>
<p>xcodebuild: error: The workspace ‘Project’ does not contain a scheme named ‘Project’.<br>FATAL: Build directory does not exist at /Users/ignat/.jenkins/workspace/Project/build. Potential configuration issue.<br>Build step ‘Xcode’ marked build as failure<br>Finished: FAILURE</p>
</blockquote>
<p>在Xcode中，选择Manage Scheme，勾选对应的<font color="ff6d55">Shared</font>。</p>
<h3 id="6-构建时报-NSLocalizedRecoverySuggestion-Add-a-profile-to-the-“provisioningProfiles”-dictionary-in-your-Export-Options-property-list"><a href="#6-构建时报-NSLocalizedRecoverySuggestion-Add-a-profile-to-the-“provisioningProfiles”-dictionary-in-your-Export-Options-property-list" class="headerlink" title="6. 构建时报 NSLocalizedRecoverySuggestion=Add a profile to the “provisioningProfiles” dictionary in your Export Options property list."></a>6. 构建时报 NSLocalizedRecoverySuggestion=Add a profile to the “provisioningProfiles” dictionary in your Export Options property list.</h3><blockquote>
<p>Error Domain=IDEProvisioningErrorDomain Code=9 “”BusinessMall.app” requires a provisioning profile with the Push Notifications feature.” UserInfo={NSLocalizedDescription=”BusinessMall.app” requires a provisioning profile with the Push Notifications feature., NSLocalizedRecoverySuggestion=Add a profile to the “provisioningProfiles” dictionary in your Export Options property list.}</p>
<p><strong> EXPORT FAILED </strong></p>
</blockquote>
<p>最后错误提示，<strong>EXPORT FAILED</strong>，可知是导出ipa包时出的错。根据提示”<strong>provisioningProfiles” dictionary in your Export Options property list.</strong>在网上搜了一下这个plist文件的用处，发现原来新版的<strong>Xcode 9</strong>将不会允许你访问钥匙串里的内容，除非设置<strong>allowProvisioningUpdates</strong>。</p>
<p>具体的<a href="http://www.jianshu.com/p/b3f883b51be3" target="_blank" rel="external">解决方式</a>是: 自己动手写脚本替代插件（插件本质是帮助我们生成打包脚本代码）。于是，在JenKins里，点击项目的”<strong>配置</strong>“选项，在”<strong>构建</strong>“中，添加xcodebuild -archivePath，<br>xcodebuild -exportArchive -archivePath的脚本命令，输出ipa包。如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration8.png" alt=""></p>
<p>具体的脚本命令如下:</p>
<pre><code>xcodebuild -archivePath &quot;/Users/zyjk_imac-penghe/.jenkins/workspace/BusinessMall/BusinessMall/output/debug/BusinessMall.xcarchive&quot; -workspace BusinessMall.xcworkspace -sdk iphoneos -scheme &quot;BusinessMall&quot; -configuration &quot;Release&quot; archive
xcodebuild -exportArchive -archivePath &quot;/Users/zyjk_imac-penghe/.jenkins/workspace/BusinessMall/BusinessMall/output/debug/BusinessMall.xcarchive&quot; -exportPath &quot;/Users/zyjk_imac-penghe/.jenkins/workspace/BusinessMall/BusinessMall/ipa/debug/&quot; -exportOptionsPlist &#39;/Users/zyjk_imac-penghe/.jenkins/workspace/BusinessMall/BusinessMall/ipa/debug/ExportOptions.plist&#39; -allowProvisioningUpdates
</code></pre><p>脚本中的构建路径为JenKins下对应的archivePath，ipa包的输出路径。其中，需要特别注意的是<font color="ff6d55">ExportOptions.plist</font>的存放路径。手写ExportOptions.plist文件过于麻烦，不如让XCode帮我们生成。使用XCode 9打包并导出后的文件夹里就有这样一份文件可以直接拿过来用。修改后的plist文件，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/JenKins-Continuous-Integration9.png" alt=""></p>
<p>之后就在项目所在的目录下，新建一个名为ipa/debug/的目录，将修改后的<strong>ExportOptions.plist</strong>文件放在这个目录下。在Jenkins中使用SVN管理源码，因此，我需要将这个新增的文件上传SVN，这样在我每次构建项目，输出ipa时就能直接从SVN上拉取这个plist文件，通过设置<strong>ExportOptions.plist’ -allowProvisioningUpdates</strong>就能访问钥匙串中的打包证书，输出ipa包了。</p>
<p><font color="ff6d55">注意:</font>设置了<strong>allowProvisioningUpdates</strong>字段后，在打包过程中会弹出是否允许访问钥匙串内容的弹窗，这时需要多次点击“<strong>始终允许</strong>”按钮。</p>
<h3 id="7-构建时报error-exportArchive-The-data-couldn’t-be-read-because-it-isn’t-in-the-correct-format"><a href="#7-构建时报error-exportArchive-The-data-couldn’t-be-read-because-it-isn’t-in-the-correct-format" class="headerlink" title="7. 构建时报error: exportArchive: The data couldn’t be read because it isn’t in the correct format."></a>7. 构建时报error: exportArchive: The data couldn’t be read because it isn’t in the correct format.</h3><blockquote>
<p>error: exportArchive: The data couldn’t be read because it isn’t in the correct format.<br><strong> EXPORT FAILED </strong></p>
</blockquote>
<p>关掉bitcode重新打包就可以了……</p>
<p>参考<a href="https://forums.developer.apple.com/thread/21193" target="_blank" rel="external">https://forums.developer.apple.com/thread/21193</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>中间使用过命令:</p>
<blockquote>
<p>sudo gem install -n /usr/local/bin cocoapods –pre</p>
</blockquote>
<p>重装过CocoaPods，目前CocoaPods的版本为: <font color="ff6d55">1.4.0.beta.2</font>。也可以输入命令:</p>
<blockquote>
<p>$ sudo gem install cocoapods -v 0.39.0</p>
</blockquote>
<p>安装特定版本的CocoaPods。</p>
<p>由于给iOS项目构建版本时必须依赖于xcodebuild环境。现在是在一台Windows上部署Jenkins环境，可以配置节点，在另一台Mac电脑上打包。具体操作，可以参考这篇文章—<a href="http://blog.csdn.net/syg90178aw/article/details/52221765" target="_blank" rel="external">Jenkins自动打包 配置mac slave节点</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.w3cschool.cn/jenkins/" target="_blank" rel="external">w3cschool Jenkins</a></p>
<p><a href="https://stackoverflow.com/questions/26247926/how-to-solve-usr-bin-env-ruby-executable-hooks-no-such-file-or-directory" target="_blank" rel="external">How to solve “/usr/bin/env: ruby_executable_hooks: No such file or directory”?
</a></p>
<p><a href="https://github.com/openbakery/gradle-xcodePlugin/issues/308" target="_blank" rel="external">/usr/local/bin/pod No such file or directory</a></p>
<p><a href="https://stackoverflow.com/questions/2975206/how-to-delete-a-gem-path" target="_blank" rel="external">How to delete a gem path?</a></p>
<p><a href="https://coolestguidesontheplanet.com/add-shell-path-osx/" target="_blank" rel="external">What it is and How to Modify the Shell Path in macOS Sierra and OSX using Terminal</a></p>
<p><a href="http://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="external">手把手教你利用Jenkins持续集成iOS项目</a></p>
<p><a href="http://www.jianshu.com/p/d64f12577be8" target="_blank" rel="external">cocoapods插件GEM_PATH的配置</a></p>
<p><a href="http://blog.csdn.net/hong1595/article/details/74010620" target="_blank" rel="external">cocoaPods安装2017 以及遇到的坑</a></p>
<p><a href="https://stackoverflow.com/questions/25689967/xcodebuild-fails-in-jenkins-with-cocoapods" target="_blank" rel="external">Xcodebuild fails in jenkins with cocoapods
</a></p>
<p><a href="https://stackoverflow.com/questions/13500793/xcodebuild-commands-give-different-results-when-run-from-the-command-line-than-w" target="_blank" rel="external">xcodebuild commands give different results when run from the command line than when run from within Jenkins</a></p>
<p><a href="http://blog.csdn.net/syg90178aw/article/details/52221765" target="_blank" rel="external">Jenkins自动打包 配置mac slave节点</a></p>
<p><a href="http://www.jianshu.com/p/b3f883b51be3" target="_blank" rel="external">Jenkins+XCode9自动打包错误处理</a></p>
<p><a href="https://github.com/fastlane/fastlane/issues/9589" target="_blank" rel="external">xcode 9 beta export options not working #9589</a></p>
<p><a href="https://forums.developer.apple.com/thread/21193" target="_blank" rel="external">Xcode 7 Enterprise Distribution not working</a></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续集成(Continuous Integration，简称CI)是一种软件开发实践：许多团队频繁地集成他们的工作，每位成员通常进行日常集成，进而每天会有多种集成。每个集成会由自动的构建（包括测试）来尽可能快地检测错误。许多团队发现这种方法可以显著的减少集成问题并且可以使团
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="持续化集成" scheme="http://XibHe.github.io/tags/%E6%8C%81%E7%BB%AD%E5%8C%96%E9%9B%86%E6%88%90/"/>
    
      <category term="JenKins" scheme="http://XibHe.github.io/tags/JenKins/"/>
    
  </entry>
  
  <entry>
    <title>直播那些事</title>
    <link href="http://XibHe.github.io/2017/10/31/live/"/>
    <id>http://XibHe.github.io/2017/10/31/live/</id>
    <published>2017-10-30T16:00:00.000Z</published>
    <updated>2017-11-13T08:45:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>直播技术经过近两年的迅速发展，已经很成熟了。从十月份开始接触与直播相关的技术，中间花了一周左右的时间，对市面上几种流行的三方直播SDK做了调研和对比。今天是月末最后一天，就做一个阶段性的总结吧！</p>
<h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><p>更新记录:</p>
<ul>
<li>2017 年 10 月，第一版。</li>
<li>2017 年 11 月 11 日，增加相关说明。</li>
<li>2017 年 11 月 13 日，增加直播原理。</li>
</ul>
<h2 id="直播原理"><a href="#直播原理" class="headerlink" title="直播原理"></a>直播原理</h2><h3 id="1-一个完整直播app实现流程"><a href="#1-一个完整直播app实现流程" class="headerlink" title="1. 一个完整直播app实现流程"></a>1. 一个完整直播app实现流程</h3><p>1.采集、2.滤镜处理、3.编码、4.推流、5.CDN分发、6.拉流、7.解码、8.播放、9.聊天互动</p>
<p><img src="http://upload-images.jianshu.io/upload_images/304825-5481594e6e2a9d56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="2-一个完整直播app架构"><a href="#2-一个完整直播app架构" class="headerlink" title="2. 一个完整直播app架构"></a>2. 一个完整直播app架构</h3><p><img src="http://upload-images.jianshu.io/upload_images/304825-54974199408c0cc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="3-一个完整直播app技术点"><a href="#3-一个完整直播app技术点" class="headerlink" title="3. 一个完整直播app技术点"></a>3. 一个完整直播app技术点</h3><p><img src="http://upload-images.jianshu.io/upload_images/304825-9b64e9596f3ccdce.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="4-流媒体相关参数"><a href="#4-流媒体相关参数" class="headerlink" title="4. 流媒体相关参数"></a>4. 流媒体相关参数</h3><p><strong>帧:</strong> 每帧代表一副静止的图像。</p>
<p><strong>帧率:</strong> 每秒显示的图片数。影响画面流畅度，与画面流畅度成正比:帧率越大，画面越流畅；帧率越小，画面越有跳动感。</p>
<p>由于人类眼睛的特殊生理结构，如果所看画面之帧率高于16的时候，就会认为是连贯的，此现象称之为视觉暂留。并且当帧速达到一定数值后，再增长的话，人眼也不容易察觉到有明显的流畅度提升了。</p>
<p><strong>码率：</strong>图片进行压缩后每秒显示的数据量。</p>
<p><strong>分辨率：</strong>（矩形）图片的长度和宽度，即图片的尺寸<br>压缩前的每秒数据量: 帧率X分辨率(单位应该是若干个字节)<br>压缩比: 压缩前的每秒数据量/码率 （对于同一个视频源并采用同一种视频编码算法，则：压缩比越高，画面质量越差。）　</p>
<p><strong>视频文件格式：</strong>文件的后缀，比如.wmv,.mov,.mp4,.mp3,.avi,<br>主要用处，根据文件格式，系统会自动判断用什么软件打开,<br>注意: 随意修改文件格式，对文件的本身不会造成太大的影响，比如把avi改成mp4,文件还是avi.</p>
<p><strong>视频封装格式：</strong>一种储存视频信息的容器，流式封装可以有TS、FLV等，索引式的封装有MP4,MOV,AVI等，<br><strong>主要作用：</strong>一个视频文件往往会包含图像和音频，还有一些配置信息(如图像和音频的关联，如何解码它们等)：这些内容需要按照一定的规则组织、封装起来.<br>注意：会发现封装格式跟文件格式一样，因为一般视频文件格式的后缀名即采用相应的视频封装格式的名称,所以视频文件格式就是视频封装格式。</p>
<p><strong>视频封装格式和视频压缩编码标准：</strong>就好像项目工程和编程语言，封装格式就是一个项目的工程，视频编码方式就是编程语言，一个项目工程可以用不同语言开发。</p>
<h2 id="对比几种不同的直播SDK"><a href="#对比几种不同的直播SDK" class="headerlink" title="对比几种不同的直播SDK"></a>对比几种不同的直播SDK</h2><p>对比市面上常用的直播平台，这里分别是：阿里云、zego、七牛云、腾讯云。<br>这里根据业务需求，对比以上四个平台的指标为：支持的最大连麦上限，是否提供实时视频通话的解决方案，是否提供聊天室功能(IM)，可拓展性等。</p>
<h3 id="阿里云直播"><a href="#阿里云直播" class="headerlink" title="阿里云直播"></a><a href="https://www.aliyun.com/product/live?spm=5176.8413026.765261.324.1M5955" target="_blank" rel="external">阿里云直播</a></h3><p>阿里云直播中有提供连麦功能，但连麦上限最终确认4人（不能添加上限），不符合公司功能需求。视同阿里云提供的连麦demo，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/live1.png" alt="1"><br>超过三个连麦观众时会提示：连麦观众不能超过3个。</p>
<p>在阿里云提交工单后，得到了最终的反馈，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/live2.png" alt="2"></p>
<p>最后，联系了技术支持，连麦上限最终为4人。</p>
<h3 id="zego直播"><a href="#zego直播" class="headerlink" title="zego直播"></a><a href="https://www.zego.im" target="_blank" rel="external">zego直播</a></h3><p>zego直播中提供实时视频通话、连麦互动直播和即时通讯功能，实时视频场景的典型使用案例是同一房间内的成员（如微信群视屏），进行实时视频对话同一房间中的用户均可发起视频通话。连麦功能支持20个连麦观众。</p>
<p>提供了实时视频通话的解决方案，如图<br><img src="http://odchyrav4.bkt.clouddn.com/live3.png" alt="3"></p>
<h3 id="七牛云直播"><a href="#七牛云直播" class="headerlink" title="七牛云直播"></a><a href="https://www.qiniu.com/?hmsr=biaoti&amp;hmpl=pinzhuan&amp;hmcu=biaoti&amp;hmkw=&amp;hmci=" target="_blank" rel="external">七牛云直播</a></h3><p>七牛云提供强大的直播以及连麦服务，有提供强大的连麦功能，且无上限，受限于客户端的总体带宽，建议8路以下。</p>
<h3 id="腾讯云直播"><a href="#腾讯云直播" class="headerlink" title="腾讯云直播"></a><a href="https://cloud.tencent.com/product/LVB" target="_blank" rel="external">腾讯云直播</a></h3><p>腾讯云分为直播、互动直播、移动直播多种视频服务，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/live4.png" alt="4"></p>
<p>互动直播(ILVB)多对多连麦，最多支持8人同时连麦。移动直播(MLVB)提供即时通讯等一体化直播的解决方案，但最多同时支持3人连麦(见工单)。这二者都是在直播(LVB)基础之上做的延伸拓展。</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/live5.png" alt="5"></p>
<p>最后，对比以上四种直播，单从技术上考虑，zego以其一体化的解决方案，超出20路的连麦数，做工精良并频繁更新的Demo被重点考虑。从价格上考虑，阿里云和腾讯云的价格比较有优势。最后暂时选择了阿里云，原因可能是公司的云服务器用的是阿里云吧！</p>
<h2 id="关于demo"><a href="#关于demo" class="headerlink" title="关于demo"></a>关于demo</h2><p>该demo为整理后的阿里云直播连麦demo，添加了一些注释，为了突出直播所需的主功能，demo只集成直播所需的基本的API。通过对demo添加Tag，区别不同的功能。其中，Tag为<strong>V0.1</strong>的版本集成最基本的直播推拉流功能，Tag为<strong>V0.2</strong>的版本集成连麦功能。<a href="https://github.com/XibHe/AliyunLiveDemo" target="_blank" rel="external">点击下载链接</a></p>
<p><font color="ff6d55">注意:</font>阿里云的连麦demo中并未集成聊天室功能，在引入的SDK中，有一个名为<strong>AlivcLiveChatRoom.framework</strong>。该SDK暴露的AlivcLiveClient.h文件中，注明了聊天室相关的API，但创建聊天室和发送聊天消息的方法都加了__deprecated_msg的注释：</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>createChatRoomWithName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>chatRoomName success<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>successBlock error<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NSError <span class="token operator">*</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>errorBlock
<span class="token function">__deprecated_msg</span><span class="token punctuation">(</span><span class="token string">"暂未开放,请勿使用,参考Demo与appServer交互"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>AlivcLiveChatMessage <span class="token operator">*</span><span class="token punctuation">)</span>sendMessage<span class="token punctuation">:</span><span class="token punctuation">(</span>AlivcLiveConversationType<span class="token punctuation">)</span>conversationType content<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>content success<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">long</span> messageId<span class="token punctuation">)</span><span class="token punctuation">)</span>successBlock error<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NSError <span class="token operator">*</span>error<span class="token punctuation">,</span> <span class="token keyword">long</span> messageId<span class="token punctuation">)</span><span class="token punctuation">)</span>errorBlock
<span class="token function">__deprecated_msg</span><span class="token punctuation">(</span><span class="token string">"暂未开放,请勿使用,参考Demo与appServer交互"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在阿里云提交工单，工程师回复目前阿里云直播SDK不再提供聊天室功能了。不过通过阿里云DEMO接口文档中所列出的错误码，其中，有返回2040，2050的错误码，</p>
<blockquote>
<p>2040 创建环信聊天室失败</p>
<p>2050 消息发送到环信失败</p>
</blockquote>
<p>可见，阿里云聊天室之前是环信即时通讯方案，只是现在移除了。接口详情见:</p>
<p><a href="https://help.aliyun.com/document_detail/56125.html?spm=5176.doc55703.6.743.2DsJze" target="_blank" rel="external">DEMO接口文档</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这篇关于直播的文章写得很粗浅，只是记录了阿里云直播SDK的使用。没有详细系统的描述直播原理、主要直播技术及其实现。下面几篇文章对直播做了系统的介绍:</p>
<ul>
<li><a href="http://www.jianshu.com/p/ed9eb96afa78" target="_blank" rel="external">如何开发出一款仿映客直播APP项目实践篇 -【服务器搭建+推流】</a></li>
<li><a href="http://www.jianshu.com/p/b2674fc2ac35" target="_blank" rel="external">如何开发出一款仿映客直播APP项目实践篇 -【原理篇】</a></li>
<li><a href="http://www.jianshu.com/p/099c2c875524" target="_blank" rel="external">如何开发出一款仿映客直播APP项目实践篇 -【采集篇 】</a></li>
<li><a href="http://www.jianshu.com/p/f5a41b9ec05f" target="_blank" rel="external">如何开发出一款仿映客直播APP项目实践篇 -【播放篇】</a></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.jianshu.com/p/bd42bacbe4cc" target="_blank" rel="external">【如何快速的开发一个完整的iOS直播app】(原理篇)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直播技术经过近两年的迅速发展，已经很成熟了。从十月份开始接触与直播相关的技术，中间花了一周左右的时间，对市面上几种流行的三方直播SDK做了调研和对比。今天是月末最后一天，就做一个阶段性的总结吧！&lt;/p&gt;
&lt;h2 id=&quot;更新说明&quot;&gt;&lt;a href=&quot;#更新说明&quot; class
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="直播" scheme="http://XibHe.github.io/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>(译)为何许多开发者仍然喜欢用Objective-C，而不是Swift</title>
    <link href="http://XibHe.github.io/2017/10/10/SwiftUsageRate/"/>
    <id>http://XibHe.github.io/2017/10/10/SwiftUsageRate/</id>
    <published>2017-10-09T16:00:00.000Z</published>
    <updated>2017-10-14T02:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS SDK已经发布很多年了，开发人员纷纷涌向Objective-C，他们力图通过开发会大卖应用程序而获得丰厚的回报。但那样的时代如今已不复存在了：Swift已经面世三年多了，与Objective-C相比，大大地获取了大家的关注度。</p>
<p>Objective-C - 从应用程序开发世界冉冉升起的明星 - 沦为苹果生态系统中的二等公民。即使OC仍然会在WWDC的一两个板块中被提及，但世界各地的大部分会议都在谈论Swift，苹果正努力推动Swift在教育领域的应用，使用Swift作为主要的语言。</p>
<p>但是如果你仍然在使用Objective-C，你并不孤单 - 许多开发者仍然喜欢使用Objective-C相对于Swift，并且有很好的理由。我与一些Objective-C开发者联系，询问他们是否感觉继续使用Objective-C开发会受到指责，下面的内容就是他们不得不说的…</p>
<p>注意：这里表达的意见是个人意见，可能不代表雇主的意见; 人们按照他们回应的顺序列出; 一些回答在长度上进行了变更。</p>
<h2 id="阻止你将Swift作为开发语言的主要原因是什么？"><a href="#阻止你将Swift作为开发语言的主要原因是什么？" class="headerlink" title="阻止你将Swift作为开发语言的主要原因是什么？"></a>阻止你将Swift作为开发语言的主要原因是什么？</h2><p><strong>史蒂夫·特劳顿 - 史密斯</strong>：我有几个原因避免了Swift。 首先，我不喜欢使用它 - 我发现这个语言比ObjC更难阅读和解析，尤其是在循环和switch语句中的if-let变量赋值（这在Apple的体例中是混乱的，像ARKit一样)。我不是尝试各种不同语言为各种平台编写东西的新手，而且Swift绝对是我见到的可读性很低的语言。</p>
<p>我还不相信苹果参与设计这个语言的初衷 - 四年之后，Swift并不用于iOS，OS或框架的重要部分（我在Twitter上保留了苹果公司的Swift应用程序，macOS很少采用它的新特性相对于iOS来说)。我明白为什么会这样（ABI的稳定性等），但如果苹果没有使用Swift，我不明白为什么我需要代表他们进行beta测试。在Swift准备好之前，我没有什么期待，而且在此期间我获得了Objective-C所带来的一切好处。</p>
<blockquote>
<p>我完全相信，只是因为苹果建立了一些东西，并说这是前进的道路并不意味着它是正确的选择。</p>
</blockquote>
<p>有趣的是，在最初的几年中，我曾经听说过苹果与Swift的任何人分开，苹果公司当然是大量的ObjC开发人员，而Swift对于许多人来说，对我们来说是一个惊喜。 而且我完全相信，只是因为苹果建立了一些东西，并表示这是前进的道路并不意味着它是正确的选择 - 我们已经看到了一大堆错误（DNS 解析服务 discoveryd，iOS 7，iOS 8）或’mehs ‘（macOS，Touch Bar）在过去几年里，而且看到如何摆脱这些不好因素带来的负面影响。</p>
<p><strong>迈克尔·劳尔</strong>：我看不到激励。我在Objective-C方面非常有成效，我将语言视为非常优雅，简洁，富有表现力。如果Swift有一流的（异步）并发，我会高兴的跳起来。相比之下，我听说缓慢的编译时间，大量的运行时库重复，我还没有看到运行时性能的显着提升。</p>
<p><strong>丹·莱弗斯</strong>：对于技术原型预演Demo或非常小的项目，我将使用Objective-C，纯粹为了在经过相当长的时间（通常可能与这些类型的客户端）之后的易于更新。我还为许多客户保留了Objective-C应用程序，而且没有时间（或将其切换到Swift的理由）。在Swift中构建这样的项目的代码通常会把它当做演示原型的Demo来简单使用。</p>
<p><strong>彼得·莫尔纳尔</strong>：在3.0版本之前，我的主要障碍是缺少源代码兼容性，即使4.0之后，我还在等待ABI的稳定性。我认为这是剩下的唯一一个问题，如果源兼容性有效，我个人觉得这对我来说很重要。</p>
<p><strong>托德·托马斯</strong>：Xcode对Swift的支持似乎很好笑。从大型项目的愚蠢长编译时间到重构和调试。Tweetbot for Mac是一个相当可观的项目，在2012款的Retina MBP上编译它需要44秒。这包括1个框架，1个库和应用程序本身。此外，Swift的ABI仍然不稳定 - 当我不需要使用我的应用程序包含的所有库被全部缓慢的构建为应用时。</p>
<p><strong>伊恩·麦克道尔</strong>：我们有一大堆共享的C++代码，用于我们的业务逻辑，它与Windows和Android共享。我们在Objective-C中的本地UIKit/AppKit中编写我们的UI，并且有很多Objective-C++文件在两种语言之间桥接。至今，除了几个脚本和内部工具之外，我们还没有采用Swift。据使用Swift的其他团队说，编译时间比Objective-C / C ++慢。</p>
<p>我们有数百个Xcode项目，最终编译成一个巨大的静态库，链接到每个应用程序二进制文件。这样做可以减少应用启动时间。我们花费大概6小时流畅的构建我们的应用，不会增加很多时间。</p>
<p><strong>西蒙·沃尔夫</strong>：我的主要编码项目是一个客户端，它是一个已经发展了几年的大型代码库。虽然我也会引入一些Swift进去，因为我做的很多工作涉及到编辑现有的代码，它阻止我使用太多Swift。</p>
<p>我也意识到作为一个开发者，每次有一个新的主要版本的Swift的更新，我都会将那些工作中可以用到拿来用，但这不是我真正需要的。</p>
<p><strong>马科·阿门特</strong>：对我来说，这不是对Swift本身的判断，而是一个务实的决定：我已经是Objective-C的专家，在使用它方面极富生产力，而切换到Swift的好处并不足以说服我。</p>
<p><strong>马塞尔·维赫尔</strong>：我最多的工作包括一些复杂的元编程和 C 进行部分混合的objective - C的动态消息部分。在使用Swift后所有的这些都会变得更加困难，例如，你无法在Swift中编写CoreData。还很纠结：我只是试图找到一些用Swift编写的Apple Pencil示例代码。结果浪费了我一天时间。</p>
<h2 id="你有没有觉得开发人员可能会对使用Objective-C或者在社交媒体上谈论鄙视？"><a href="#你有没有觉得开发人员可能会对使用Objective-C或者在社交媒体上谈论鄙视？" class="headerlink" title="你有没有觉得开发人员可能会对使用Objective-C或者在社交媒体上谈论鄙视？"></a>你有没有觉得开发人员可能会对使用Objective-C或者在社交媒体上谈论鄙视？</h2><p><strong>史蒂夫·特劳顿 - 史密斯</strong>：真的吗？使用ObjC非常不受欢迎，或者说你喜欢ObjC 胜过 Swift。Swift有一个真正大规模的炒作人群，这个是你无法阻止的。</p>
<p>像任何充满激情的球迷一样，没有任何理由参与讨论。 Swift用户与我一样（或更多）了解其缺点，但是由于感知到的好处，他们很乐意做出妥协。我不是，也不觉得同样的好处。</p>
<p><strong>迈克尔·劳尔</strong>： 实际上。我觉得我一直在为自己对Objective-C的认同而保卫自己不受外界的干扰。</p>
<blockquote>
<p>我相信艾米·沃洛尔在iOSDevUK上的关于Objective-C的演讲中，观众中有些动荡似乎是人们不理解造成的。</p>
</blockquote>
<p><strong>丹·莱弗斯</strong>：当然，有一个新的和有光泽的驱动器。这最终有多少的iOS社区呢，所以它不是完全不足为奇，仍然存在很多争议。我相信艾米·沃洛尔在iOSDevUK上的关于Objective-C的演讲中，观众中有些动荡似乎是人们不理解造成的。</p>
<p><strong>彼得·莫尔纳尔</strong>：当我正在阅读职位和职位描述时，这种感觉更多，不一定在社交媒体上。大家现在正在寻找高级Swift开发人员。</p>
<p><strong>托德·托马斯</strong>：我并没有太多的担心。这个应该让应用程序自己来决定。如果它是好的，用户不会在乎它是用什么语言编写的。</p>
<p><strong>伊恩·麦克道尔</strong>：对于仍然使用Objective-C，我感觉到一些耻辱，但并不多。 我使用Swift为我的个人项目，并爱上它，并理解我们在工作中不使用它的原因。</p>
<p><strong>西蒙·沃尔夫</strong>：有一点，因为我不相信Swift是坏的，Objective-C是一个真正的Cocoa语言，我不会避免对Swift的利弊的热烈争论。我也没有看到人们对Objective-C开发人员太粗鲁，但作为Mac开发人员，我倾向于处于iOS社区的边缘，这可能是大多数冲突的地方。我不认为Mac开发人员很乐意使用最新最好的。我们还在争为NSCell争论(NSTableView中的NSCel)。</p>
<p><strong>马科·阿门特</strong>：这已经开始了，但是每个过渡都是这样发生的。Objective-C开发人员为Carbon开发人员开辟了乐趣。这只是一个自然的发展历程，每当你的语言不在当前考虑范围内的，只要你的语言不被视为“进步语言”。但是你仍然以务实的原因使用它。作为网络上的PHP开发人员，我习惯了这一点。</p>
<h2 id="当你看到开发者会议上大多数时间都在讨论Swift的使用时，你的感受是什么？"><a href="#当你看到开发者会议上大多数时间都在讨论Swift的使用时，你的感受是什么？" class="headerlink" title="当你看到开发者会议上大多数时间都在讨论Swift的使用时，你的感受是什么？"></a>当你看到开发者会议上大多数时间都在讨论Swift的使用时，你的感受是什么？</h2><p><strong>史蒂夫·特劳顿 - 史密斯</strong>：毫无感觉，一个只有Swift的会议是对我没有任何影响。在语言还未完善之前，以及苹果尚未大规模使用之前，我并不关心Swift最佳做法或设计模式。我不想整理十几个社区主导的设计模式，我等待苹果对于Swift的进一步完善。</p>
<blockquote>
<p>一个只有Swift的会议是对我没有任何影响。</p>
</blockquote>
<p>知道Swift是苹果发展的一个真正的“未来”，已经做了很多工作来推动我彻底远离应用程序; iOS 7 UI与Swift一对一转换的冲击让我觉得这不是我想要开发的平台。</p>
<p><strong>迈克尔·劳尔</strong>：这是可悲的。当然，我可以翻译我看到的一切，但比以前付出了更多的努力。而且我拒绝在任何要求使用Swift例子的会议上谈论它。幸运的是，还可以参加一些除了Swift之外的会议。</p>
<p><strong>丹·莱弗斯</strong>：至少他们大都一致！</p>
<p><strong>彼得·莫尔纳尔</strong>：我认为这是演变的一部分，但它是真实的 - 在Objective-C周围没有太多的吸引力。Swift是新的，由于它不断变化，有很多话要说，显然这些新的话题也在快速过时。</p>
<p><strong>托德·托马斯</strong>：我想如果你想要向前看，开发者会议应该谈论Swift。我不介意个人使用Swift，但也不要过度重视会议上对Swift的讨论。</p>
<p><strong>伊恩·麦克道尔</strong>：我感觉很好，这是未来！</p>
<p><strong>西蒙·沃尔夫</strong>：我不介意，我意识到Swift是新的闪亮的东西，因为我知道Swift足够好了解它，真的不用担心我。如果我把我的头埋在沙滩上，而不是继续学习Swift，那么我可能会被遗忘，然而我不认为这种做法有利于成为一个好的开发者。</p>
<p><strong>马尔科·阿门特</strong>：它不打扰我。大多数会议组织者和与会者都比我做得更紧密，所以当然应该使用Swift。将Swift代码片段从会议，教程和StackOverflow转换为Objective-C，只是继续使用Objective-C的成本之一，迄今尚未证明特别繁重的。 但随着时间的推移，这种转换负担会增加。</p>
<p><strong>马塞尔·维赫尔</strong>：我不得不承认，我发现很多Swift的讨论非常肤浅，经常因为不知情而被嘲笑，所以我感到失望。我知道这听起来很苛刻，而且有明显的例外，然而很仍然感到吃惊。</p>
<h2 id="你认为Swift的引入有助于或阻碍Objective-C作为一种语言的发展吗？"><a href="#你认为Swift的引入有助于或阻碍Objective-C作为一种语言的发展吗？" class="headerlink" title="你认为Swift的引入有助于或阻碍Objective-C作为一种语言的发展吗？"></a>你认为Swift的引入有助于或阻碍Objective-C作为一种语言的发展吗？</h2><p><strong>史蒂夫·特劳顿 - 史密斯</strong>：Swift对于Objective-C开发绝对是灾难性的; 对于任何新的API或功能，我不再具有示例代码，WWDC幻灯片，教程，GitHub或StackOverflow。无论StackOverflow千禧年的笑话，但是失去了对所有这些上下文和知识的访问是毁灭性的。在这方面，ObjC语言本身已经获得了一堆生活质量/语法糖功能，以帮助它更好地与Swift进行交互，所有这些都是梦幻般的。</p>
<blockquote>
<p>对于Objective-C开发，Swift绝对是灾难性的。</p>
</blockquote>
<p>我非常厌恶为了让Swift存活而使ObjC死去 - 如果两种语言可以彼此独立存在，对于像我这样的开发人员来说是非常好的，他们可以选择最适合手头任务的语言。Swift背后的激情，大规模的推广宣传，苹果停止为开发人员创建ObjC资源。</p>
<p><strong>迈克尔·劳尔</strong>：使用Swift的主要好处，“我们”要感谢轻量级泛型和可空性，但这是关于它的。如果背后有相同的人力投入，我只会希望Objective-C能获得Swift这样的好处。</p>
<p><strong>丹·莱弗斯</strong>：我认为这最初是有帮助的，但我现在强烈感觉到，这样的做法有些舍本逐末了。</p>
<p><strong>托德·托马斯</strong>：我认为这有帮助。他们为Swift的语言添加了许多有用的东西，所以我们不能抱怨。</p>
<p><strong>伊恩·麦克道尔</strong>：Objective-C已经从Swift获得了一些很好的功能，包括<font color="#C52950"><code>@available</code></font>语法和可空性说明符。这是一种稳定的语言，我没有想到它会改变任何事情。</p>
<blockquote>
<p>在Swift中打包可能是一个痛苦，但它帮助我在Objective-C中采用更好的打包方式。</p>
</blockquote>
<p><strong>西蒙·沃尔夫</strong>：对于Swift导致的结果，Objective-C有一些变化和改进，这是有帮助的。另外，写一点Swift也鼓励我去看看我的Objective-C代码是否完美，而且我不太愿意让空对象去操作底层的一些东西。在Swift中打包可能是一个痛苦，但它帮助我在Objective-C中采用更好的打包方式。</p>
<p><strong>马尔科·阿门特</strong>：Swift已经有效地停止了Objective-C作为一种语言的开发。 这并不奇怪或不合理，但幸运的是Objective-C相当成熟。前几年Swift的引入带来了许多改进，应该保持Objective-C可用，直到我们大部分人都转移到Swift。</p>
<p><strong>马塞尔·维赫尔</strong>：显然受到阻碍，即使Objective-C很好，但Swift的出现结束了Objective-C进一步的发展！</p>
<p>更令人惊奇和不安的是，一些首选Swift作为语言编写的三方库中有很多明显的缺陷。<br>一些对Swift的改进被阻止，以使Swift看起来不错，虽然我很确定这不是怎么回事。</p>
<p>然而，最大的负面影响就是那些可能阻止Swift后续发展的一系列做法。我们正在尽我们所能创造一种脱离控制的Swift，而苹果忽略了所有这一切。这是一个犯罪。</p>
<h2 id="你怎么看？"><a href="#你怎么看？" class="headerlink" title="你怎么看？"></a>你怎么看？</h2><p>除了上述所有问题，我还问到人们使用Objective-C已经有多长时间了，因为我认为公平地说，在精通一门语言后，选择继续使用或这彻底放弃时总是很重要。</p>
<p>听到大多数人说他们在iPhone SDK第一次启用或不久之后立即使用Objective-C，几个人已经使用了十多年，其中一个人27了——是的,27岁。我应该补充说，一位回应者表示他们最近开始使用Objective-C，所以也许还存在一些固执的人。</p>
<p>另外还有一件事：去年，我写了一本名为<a href="https://www.hackingwithswift.com/store/objective-c-for-swift-developers" target="_blank" rel="external">Objective-C for Swift Developers</a>的书，在介绍中，我介绍了一个题为“我喜欢Objective-C”的部分，这里是我写的一些话：</p>
<p>当我阅读本书的第一本完整的草稿时，我想到了自己，“哇，这看起来像是Snark的Objective-C指南”，因为几乎每一章都觉得是在抱怨。</p>
<p>结果，我花了一些时间来编辑这本书，让它更加完美 - 不是因为我试图用人造光线向你呈现东西，而是因为我真的很喜欢用Objective-C编码。在Apple发布Swift时，我就开始使用Swift了，并且在早期就发布了一款Swift应用程序到App Store上。因此，在许多方面，和Swift相比Objective-C只是看起来很糟糕，我已经使用Swift很长时间了，再次使用Objective-C感觉有点像从长期生活的大城市回到老家过圣诞节一样。</p>
<p>我不知道我是否喜欢Objective-C，因为我有斯德哥尔摩综合症，或者是因为苹果的API是如此强大。无论如何，我认为重要的是你意识到，一些令人惊奇的软件已经与Objective-C一起构建，许多人始终如一的爱着她。</p>
<p>当你在这本书中发现让你感到沮丧的事情时，你要温柔一点：这是一种古老的语言，经历了坎坷的发展历程。它为我们提供了很好的服务。至少，在它慢慢远离人们视线时应该被尊重!</p>
<p><strong>谢谢Steve 史蒂夫·特劳顿 - 史密斯，迈克尔·劳尔，丹·莱弗斯，彼得·莫尔纳尔，托德·托马斯，伊恩·麦克道尔，西蒙·沃尔夫，马尔科·阿门特，以及马塞尔·维赫尔，花时间对这篇文章发表观点。</strong></p>
<p>现在结束了 - 如果你仍然喜欢在Swift上使用Objective-C，可以在<a href="https://twitter.com/twostraws" target="_blank" rel="external">Twitter</a>上联系我！</p>
<h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=ios" target="_blank" rel="external">Why many developers still prefer Objective-C to Swift</a></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS SDK已经发布很多年了，开发人员纷纷涌向Objective-C，他们力图通过开发会大卖应用程序而获得丰厚的回报。但那样的时代如今已不复存在了：Swift已经面世三年多了，与Objective-C相比，大大地获取了大家的关注度。&lt;/p&gt;
&lt;p&gt;Objective-C 
    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Swift" scheme="http://XibHe.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发总结</title>
    <link href="http://XibHe.github.io/2017/09/25/wx-mini-AppSummary/"/>
    <id>http://XibHe.github.io/2017/09/25/wx-mini-AppSummary/</id>
    <published>2017-09-24T16:00:00.000Z</published>
    <updated>2017-10-14T02:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>小程序开发结束已经两天了，这是第一个我参与的小程序项目。回顾开发过程中踩过的种种坑，剖析项目中的痛点，需要优化的地方。以后如何避免这样的问题？是否从此入坑H5了？自己的知识短板是什么？</p>
<p>之前一直从事iOS开发，对web前端没有过多了解。单凭一腔热血去开发小程序，初识比较迷茫，纠结于html和css的样式，js的数据交互等基础知识。但项目周期短，任务重，需要与pc，平板进行数据同步。就没有太多时间去理会前端基础知识，都是现学现用。</p>
<p>就是产品有些坑，设计的小程序产品原型还是是基于原生App的思维。因此，设计出的UI效果图，页面数据展示效果多数是原生App的效果，有些设计甚至与小程序组件相悖。为了实现与UI设计一致的效果，就需要花费很多时间自定义数据交互组件。</p>
<p>开发时没有完全吃透小程序开发文档，在实现某个功能时一直拿不定主意。以下是踩过的一些坑:</p>
<ul>
<li>小程序页面路径只能是五层，请尽量避免多层级的交互方式。</li>
<li>页面之间传递数据和变量的方式需要统一，不统一传参方式，一旦出现数据展示问题，会增加调试的难度。</li>
<li>一定要将多次调用的功能或样式封装起来，否则，重复相同功能代码会增加.js文件的代码量，使代码不易读。</li>
<li>使用swiper滑块视图容器时，一定要将滑块控制的页面抽离成单独的页面，放在一个页面中，当处理不同页面的数据交互时，会对其他不相干的页面数据造成干扰。</li>
<li>读取页面定义的变量时，不要忘记使用that关键字，把this对象复制到临时变量that，否则会找不到原来的对象。</li>
<li>wx.showToast吐司，当title文字超出限制，不会自适应宽高，需要自定义弹出框。</li>
<li>注意navigator 组件的几种跳转方式的不同之处。</li>
<li>小程序变量不支持下划线命名，若使用下划线命名会造成变量无法赋值。</li>
<li>避免快速点击，多次触发bindtap事件，造成打开多个相同页面。</li>
</ul>
<p>小程序写着还是很纠结的，这是内心的真实想法:</p>
<blockquote>
<p>一定是上辈子缺德事干多了，这辈子才会被安排写小程序！</p>
</blockquote>
<p>通过这次开发小程序的机会，发现了自己的知识短板，正是这些短板让自己裹足不前。以下是短板高发区:</p>
<ul>
<li>在哪些工作上花费时间最多?</li>
<li>可以改进的重复性劳动</li>
<li>自己没有完全理解的东西</li>
<li>你回答不出来的面试题</li>
</ul>
<p>对比以上几点快速找出你的技术短板，然后消除它。你必须要确切知道自己需要学什么，保证焦点正确。不要让这些短板成为你的“痛点”。</p>
<p>我是否陷入了对技术的狂热之中？因为崇拜某项特定的技术，只是因为自己熟悉这种技术。我很自然的会相信自己选择的是最好的，然后这会让我经常忽略一些与之相悖的意见。由于不了解其他技术，就倾向于选择自己最熟悉的技术并先入为主的认为它是最好的。</p>
<blockquote>
<p>人生多艰，无暇他顾。</p>
</blockquote>
<p>于是我局限在自己的世界中，变得自以为是，固步自封，墨守成规。自以为找到所有答案，却只是裹足不前。</p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序开发结束已经两天了，这是第一个我参与的小程序项目。回顾开发过程中踩过的种种坑，剖析项目中的痛点，需要优化的地方。以后如何避免这样的问题？是否从此入坑H5了？自己的知识短板是什么？&lt;/p&gt;
&lt;p&gt;之前一直从事iOS开发，对web前端没有过多了解。单凭一腔热血去开发小程序
    
    </summary>
    
      <category term="JavaScript" scheme="http://XibHe.github.io/categories/JavaScript/"/>
    
    
      <category term="小程序" scheme="http://XibHe.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="总结" scheme="http://XibHe.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>小程序页面跳转</title>
    <link href="http://XibHe.github.io/2017/09/16/wx.navigateTo/"/>
    <id>http://XibHe.github.io/2017/09/16/wx.navigateTo/</id>
    <published>2017-09-15T16:00:00.000Z</published>
    <updated>2017-10-14T02:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信小程序页面跳转API时需要注意，官方文档中强调：“为了不让用户在使用小程序时造成困扰，我们规定页面路径只能是五层，请尽量避免多层级的交互方式。” 也就是说在连续使用navigateTo进行页面跳转时，若当前页面若正好是第5级，则点击该页面任何绑定触发事件的控件，都不会有任何反应。</p>
<h1 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h1><p>更新记录:</p>
<ul>
<li>2017 年 9 月，第一版。</li>
<li>2017 年 10 月，增加页面跳转流程图及跳转说明。</li>
</ul>
<h2 id="小程序中页面导航的API"><a href="#小程序中页面导航的API" class="headerlink" title="小程序中页面导航的API"></a>小程序中页面导航的API</h2><p>为了避免发生超过五级页面而无法跳转的悲剧，首先要了解清楚小程序中页面导航的API。小程序中页面导航API有五个，两个跳转新页面的API分别为wx.navigateTo和wx.redirectTo，一个用来做重置操作的API为wx.reLaunch，一个用于跳转到tabBar的API为wx.switchTab，还有一个API名为wx.navigateBack，用于返回页面。</p>
<p><strong>wx.navigateBack 在小程序的初始版本中只能回到上一个页面，在最新版本的更新中给 navigateBack 添加了一个参数 delta，用于决定需要返回几层页面，返回的页面数，如果delta大于现有页面数，则返回首页。</strong></p>
<h2 id="几种跳转方式的不同之处"><a href="#几种跳转方式的不同之处" class="headerlink" title="几种跳转方式的不同之处"></a>几种跳转方式的不同之处</h2><p>navigator 组件的默认跳转方式与 wx.navigateTo 相同，而如果添加 redirect 属性，则与 wx.redirectTo 的跳转方式相同。</p>
<p>navigateTo 在官方文档中描述如下：</p>
<blockquote>
<p>保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原页面。</p>
</blockquote>
<p>通过 navigateTo 跳转后，可点击左上角的按钮返回上一个页面。而如果多次调用 navigateTo 之后，就需要返回多次才能回到初始页面。因此，官方在此处有一个限制。</p>
<blockquote>
<p>注意：为了不让用户在使用小程序时造成困扰，我们规定页面路径只能是五层，请尽量避免多层级的交互方式。</p>
</blockquote>
<p>不过上述五层的限制只是针对 navigateTo，redirectTo 则无此限制。因为 redirectTo 的行为是：</p>
<blockquote>
<p>关闭当前页面，跳转到应用内的某个页面。</p>
</blockquote>
<p><font color="#FA8072">注意:</font> 使用redirectTo跳转到一个之前加载过的页面，不会再次调用该页面的onLoad方法。</p>
<p>通过 redirectTo 跳转后，则无法返回跳转前的页面。但并不是无法调用 navigateBack，而是调用之后，会回到使用 redirectTo 跳转前的上一个页面。</p>
<p>页面栈可以通过 getCurrentPages 方法获取：</p>
<blockquote>
<p>getCurrentPages() 函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</p>
</blockquote>
<p>上述的「页面路径」可以对应为页面栈中的元素，页面栈中的最后一个元素就是当前显示的页面，页面跳转就是新页面入栈的过程。</p>
<p>上述三种页面 API 的区别在于：</p>
<ul>
<li>navigateTo 不会将旧页面出栈；</li>
<li>redirectTo 会将旧页面出栈，再将需要跳转到的页面入栈；</li>
<li>navigateBack 则是将页面栈最后一个元素出栈，因此倒数第二个元素会成为最后一个元素，即变成「当前页面」。</li>
</ul>
<p>结合下面这个例子，如图，</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/wxnavigateTo_flow.png" alt="跳转流程"></p>
<p>小程序包含 A、B、C、D 四个页面，A 页面为首页。小程序启动后，在 A 页面中，我们通过 navigateTo 跳转到 B 页面，然后在 B 页面中再通过 navigateTo 跳转到 C 页面。</p>
<p>如果通过navigateTo跳转到 D 页面，则在D页面调用navigateBack会返回到C页面；<br>如果通过redirectTo跳转到 D 页面，则在D页面调用navigateBack会发现不是返回C 页面，而是返回到了 B 页面。</p>
<p>因为调用redirectTo 跳转到 D 页面，redirectTo 会将当前页面出栈，即将 C 页面出栈，再将 D 页面入栈，这时候，页面栈中的元素则会变为 A、B、D。</p>
<ul>
<li>navigateTo 不会将旧页面出栈，因此通过 navigateTo 跳转后，页面栈中元素个数会加一，因此在页面栈中元素个数达到 5 之后再调用 navigateTo 会失败，出现无法跳转的错误。</li>
<li>redirectTo 会在将旧页面出栈后，再将新页面入栈，因此通过 redirectTo 跳转，页面栈中元素个数会保持不变，所以即使在页面栈中元素达到 5 个之后再调用 redirectTo 也能成功跳转。</li>
</ul>
<h2 id="实际业务流程"><a href="#实际业务流程" class="headerlink" title="实际业务流程"></a>实际业务流程</h2><p>业务流程:<br>点击主页面的“扫码录入”按钮，页面跳转微信扫一扫页面，通过扫描条形码读取商品信息，若扫码到该商品信息存在数据库中，则获取数据库中的信息并将这些商品信息带至至“商品信息”页面，可以在商品信息页面对商品信息进行编辑。编辑结束后，点击商品信息页面底部的保存按钮，保存该条商品的最新信息。</p>
<p>为了在点击页面底部的“保存”按钮后直接跳转至微信扫一扫页面，达到快速扫码录入商品信息的目的。解决方案:</p>
<blockquote>
<ol>
<li>直接返回主界面，点击“扫码录入”按钮，跳转至微信扫一扫页面；</li>
<li>点击底部“保存”按钮后，立即调用wx.scanCode打开扫一扫页面；</li>
</ol>
</blockquote>
<p>方案1直接被否定了，原因是用户会频繁调用扫一扫进行商品信息的录入。如果在用户录入一天商品信息后，返回到主页面，再一次点击“扫码录入”按钮跳转至扫一扫页面进行商品录入或查询。会使得录入这一操作的连续性被打断，降低录入操作整体流畅度。</p>
<p>方案2在点击保存按钮后直接打开扫一扫固然可以保证操作的连贯性，但此时若在扫一扫页面不做扫码操作，而是点击扫一扫左上角的返回按钮，则返回到上个页面—商品信息保存页面。此时，如果点击“保存”按钮会对商品信息进行重复保存。</p>
<p>那么，能否在微信扫一扫页面做相应处理呢？比如，点击扫一扫左上角的返回按钮时，直接返回到首页。由于扫一扫页面是直接调用wx.scanCode而来的，其并不是以压栈的方式出现在页面控制的层级中。因此，无法通过getCurrentPages()函数获取对应的层级关系。</p>
<p>另外一种方式，针对方案2的问题，需要在点击“商品信息”页的“保存”按钮后做出特别处理，于是在点击保存绑定的事件中设置:</p>
<pre class="line-numbers language-js"><code class="language-js">saveTap<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      url<span class="token punctuation">:</span> requestUrl<span class="token punctuation">.</span>LookForGoodsUrl
      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"userId"</span><span class="token punctuation">:</span> userId<span class="token punctuation">,</span>
        <span class="token string">"goodsId"</span><span class="token punctuation">:</span> numResult<span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
        <span class="token string">"factory"</span><span class="token punctuation">:</span> factory<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      header<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token string">'0000'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 保存成功</span>
           wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              url<span class="token punctuation">:</span> <span class="token string">'../homePage/homePage'</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>  
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将最新商品信息上传至服务器，关闭当前页面，跳转到应用内的某个页面。再调用:</p>
<pre class="line-numbers language-js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">scanCode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> numResult <span class="token operator">=</span> res<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>numResult<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'69'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        url<span class="token punctuation">:</span> requestUrl<span class="token punctuation">.</span>LookForGoodsUrl
        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
           <span class="token string">"userId"</span><span class="token punctuation">:</span> userId<span class="token punctuation">,</span>
           <span class="token string">"goodsId"</span><span class="token punctuation">:</span> numResult<span class="token punctuation">,</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
        header<span class="token punctuation">:</span> <span class="token punctuation">{</span>
           <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token comment" spellcheck="true">// 存在该商品</span>
               wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                   url<span class="token punctuation">:</span> <span class="token string">'../goodsInfo/goodsInfo?goodsChart='</span> <span class="token operator">+</span> goodsChart <span class="token operator">+</span> <span class="token string">'&amp;goodsId='</span> <span class="token operator">+</span> goodsId<span class="token punctuation">,</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用扫一扫，获取商品条码，将获取的条码作为参数上传服务器得到服务器返回的商品信息。再将这些信息传递并跳转至“商品信息”页，展示这些信息。再次扫描商品条码时，重复以上操作。</p>
<p>但是为了在商品信息页面点击“保存”按钮时关闭当前页面，使用了wx.redirectTo，会先返回到首页（homePage），然后再调出扫一扫页面。这期间会出现短暂（大概2~3秒钟）的停顿，停顿期间页面(homePage)仍然可以操作，会误触页面上的其他点击事件。最后，即使在该页面(homePage)加上loading，以防止误触。仍然无法回避短暂停顿后再跳转扫一扫页面的问题。</p>
<p>最后的解决方案是: 点击商品信息页的“保存”按钮后，将该按钮隐藏。这样当从扫一扫页面返回商品信息页时就不会出现重复保存数据的问题了。</p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信小程序页面跳转API时需要注意，官方文档中强调：“为了不让用户在使用小程序时造成困扰，我们规定页面路径只能是五层，请尽量避免多层级的交互方式。” 也就是说在连续使用navigateTo进行页面跳转时，若当前页面若正好是第5级，则点击该页面任何绑定触发事件的控件，都不会有
    
    </summary>
    
      <category term="JavaScript" scheme="http://XibHe.github.io/categories/JavaScript/"/>
    
    
      <category term="小程序" scheme="http://XibHe.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="wx.navigateTo" scheme="http://XibHe.github.io/tags/wx-navigateTo/"/>
    
  </entry>
  
  <entry>
    <title>爱之初体验 - 小程序</title>
    <link href="http://XibHe.github.io/2017/09/01/wx-mini-AppBlindDate/"/>
    <id>http://XibHe.github.io/2017/09/01/wx-mini-AppBlindDate/</id>
    <published>2017-08-31T16:00:00.000Z</published>
    <updated>2017-10-14T02:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发小程序已经有两周了，从最开始踌躇满志到现在喜忧参半。这中间经历了许多波折，好像又回到了第一次初恋时的感觉，迫切，含蓄，喜悦，又苦于不能迅速了解对方的方方面面，而感到沮丧。但随着一步步的接触，由浅入深，终会瓜熟蒂落，水到渠成。</p>
<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>小程序由视图层，逻辑层，渲染层三部分组成的一整套框架。框架使用自己的视图层描述语言WXML(.WXML文件中使用的是view标签构建视图，相当于CSS中的div标签。)和WXSS，逻辑层是基于JavaScript框架。视图层和逻辑层间微信提供了用于数据交互，事件绑定的丰富组件和API。</p>
<p>框架的核心是一个响应的数据绑定系统。整个系统分为两块: 视图层(View) 和逻辑层(App Service)。框架可以让数据与视图非常简单地保持同步。当做数据修改的时候，只需要在逻辑层修改数据，视图层就会发生相应的更新。</p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。什么是组件: </p>
<ul>
<li>组件是视图层的基本组成单元。</li>
<li>组件自带一些功能与微信风格的样式。</li>
<li>一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。</li>
</ul>
<p>但使用起来还是有些不足，很多组件的风格与微信风格类似，不想使用这种风格的组件就需要自定义组件，而自定义需要花费一些额外的时间，就算自定义成功了，仍需要经过仔细的测试，确保该自定义组件在交互上不会与基础组件产生偏差。</p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>框架提供了丰富的微信原生API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。</p>
<p>说明：</p>
<ul>
<li>wx.on 开头的 API 是监听某个事件发生的API接口，接受一个 CALLBACK 函数作 为参数。当该事件触发时，会调用 CALLBACK 函数。</li>
<li>如未特殊约定，其他 API 接口都接受一个OBJECT作为参数。</li>
<li>OBJECT中可以指定success, fail, complete来接收接口调用结果。<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1></li>
</ul>
<p><img src="http://odchyrav4.bkt.clouddn.com/wx-mini-AppPits_IDE.png" alt="IDE"></p>
<p>在原有的公众号网页调试工具的基础上，推出了全新的微信开发者工具，集成了公众号网页调试和小程序调试两种开发模式。</p>
<p>在8月30日和8月31日，对开发工具进行了很大的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html" target="_blank" rel="external">更新</a>。全新的视觉和交互体验，新增了申请<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/monkey-test.html" target="_blank" rel="external">测试报告</a>功能，新增<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxs/" target="_blank" rel="external">WXS</a>功能。</p>
<h1 id="开发中填的坑"><a href="#开发中填的坑" class="headerlink" title="开发中填的坑"></a>开发中填的坑</h1><p><a href="https://github.com/XibHe/WXAppPits" target="_blank" rel="external">微信小程序填坑记录</a><br>希望对你有帮助。</p>
<h1 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h1><blockquote>
<p>多看官方文档，多看几遍，遇到问题时再看，没有问题时继续看；</p>
<p>关注<a href="http://www.wxapp-union.com" target="_blank" rel="external">论坛</a>最新动态； </p>
<p>基础知识一定要过关（小程序的框架，组成部分，运行机制，自身限制）；</p>
<p>不要眼高手低，人家的demo下载下来跑起来，看懂之后一定要自己尝试写一遍；</p>
<p>找一个自己熟悉的逻辑，开始模仿（结合实际的项目需求，一步一步解决遇到的问题）。</p>
</blockquote>
<h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>模态窗体上的textarea多行输入框，当滑动整个页面时，会将textarea里输入的内容一起滑动至输入框外部，随着滑动的方向一起滑动。官方文档中备注了关于textarea的一个tip:</p>
<blockquote>
<p>textarea组件是由客户端创建的原生组件，它的层级是最高的。</p>
</blockquote>
<p>或许正是由于textarea是最高层级导致的滑动问题。</p>
<h1 id="demo下载"><a href="#demo下载" class="headerlink" title="demo下载"></a>demo下载</h1><p><a href="https://github.com/XibHe/wxModeList" target="_blank" rel="external">wxModeList</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="external">微信公众平台 | 小程序</a></p>
<p><a href="http://www.wxapp-union.com/portal.php?mod=view&amp;aid=1509" target="_blank" rel="external">小程序中的循环列表，在点击时改变当前项的背景颜色</a></p>
<p><a href="http://www.mntuku.cn/index.php/article/show/id-7141" target="_blank" rel="external">小程序操作按钮悬浮固定在底部</a></p>
<p><a href="http://www.wxapp-union.com/portal.php?mod=view&amp;aid=1261" target="_blank" rel="external">动态的显示或隐藏控件</a></p>
<p><a href="http://www.jianshu.com/p/aa8254b23847" target="_blank" rel="external">微信小程序从子页面退回父页面时的数据传递</a></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发小程序已经有两周了，从最开始踌躇满志到现在喜忧参半。这中间经历了许多波折，好像又回到了第一次初恋时的感觉，迫切，含蓄，喜悦，又苦于不能迅速了解对方的方方面面，而感到沮丧。但随着一步步的接触，由浅入深，终会瓜熟蒂落，水到渠成。&lt;/p&gt;
&lt;h1 id=&quot;框架&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="JavaScript" scheme="http://XibHe.github.io/categories/JavaScript/"/>
    
    
      <category term="小程序" scheme="http://XibHe.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="初体验" scheme="http://XibHe.github.io/tags/%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>二次筛选功能开发心得</title>
    <link href="http://XibHe.github.io/2017/08/23/FilterError/"/>
    <id>http://XibHe.github.io/2017/08/23/FilterError/</id>
    <published>2017-08-22T16:00:00.000Z</published>
    <updated>2017-10-14T02:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个类似于京东搜索结果页的筛选功能，侧边栏条件筛选器，根据不同的数据类型进行条件筛选及筛选条件的排列展示。</p>
<h1 id="构建原理及使用到的技术点"><a href="#构建原理及使用到的技术点" class="headerlink" title="构建原理及使用到的技术点"></a>构建原理及使用到的技术点</h1><blockquote>
<p>RunTime<br>继承<br>组合</p>
</blockquote>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><blockquote>
<p>筛选列表距离顶部状态栏距离过近<br>筛选列表展示<br>选中数量限制<br>替换二次筛选结果页数据源<br>循环移除数组元素报错<br>在筛选更多，跳转的搜索页面进行搜索调用两次接口请求</p>
</blockquote>
<h1 id="解决的方式"><a href="#解决的方式" class="headerlink" title="解决的方式"></a>解决的方式</h1><h2 id="替换二次筛选结果页数据源"><a href="#替换二次筛选结果页数据源" class="headerlink" title="替换二次筛选结果页数据源"></a>替换二次筛选结果页数据源</h2><p>需求中要求替换筛选条件的数据源,表述如下:</p>
<blockquote>
<p>选中的选项需要在二次筛选条件选择页中显示，选中的选项为默认展开的选项时，无需变更选项的位置，若选中的不是默认展开的选项，需要将选中的选项放到二次筛选条件选择页中，并代替筛选条件选择页中没被选择的默认展开的选项的位置，按照选中的时间顺序正序占据页面中的默认展开的选项的位置（举例说明：筛选条件选择页中的默认展开的选项是1、2、3、4、5，默认展开的选项选中的是2和4,然后用户点击查看更多的选项，先选了11然后又选了9的选项,根据逻辑，筛选条件选择页中显示的选项依次显示的是：11、2、9、4、5），若选中的选项被取消选择，选项的位置按照选中时的位置显示，不更改选项的位置。</p>
</blockquote>
<p>如图，二次筛选结果页和生产厂家搜索列表页</p>
<center><br>    <img src="http://odchyrav4.bkt.clouddn.com/filterError_1.PNG?imageView/4/w/300"><br>    <img src="http://odchyrav4.bkt.clouddn.com/filterError_2.PNG?imageView/4/w/300"><br></center>

<p>当生产厂家筛选数据源大于6项时，只展示5个生产厂家，并显示“更多生产厂家 &gt;”的跳转提示。点击跳转至生产厂家搜索列表页面，在搜索页面会根据搜索关键字展示所有的生产厂家列表信息。该列表会展示上个页面勾选的生产厂家，并将其置于列表最前面。现在需要做的是: <font color="#DC143C">当勾选列表页中一个或多个生产厂家，该生产厂家是二次筛选结果页(上一个页面)中，默认展示5个生产厂家中从未出现的一个，是一个新的生产厂家。则需要替换掉二次筛选结果页，生产厂家一栏中未被勾选的一个或多个生产厂家，直到全部替换完成。</font></p>
<blockquote>
<p>方案一: 进行多层嵌套循环遍历，判断如果对象的selected属性为YES，则跳出当前循环并做一个标记，再从新进行外层循环。这样就需要设置至少两个以上的标记在循环遍历的基础之上再进行循环遍历。增加了逻辑判断的复杂性，也使代码变得不易读。</p>
</blockquote>
<p>针对方案一不足之处，将方案一中的杂糅在一起的逻辑判断抽离成不同的情况，形成方案二。</p>
<blockquote>
<p>方案二: 需要定义两个可变数组，_dataList(二次筛选结果页，生产厂家数据源)，_selectList(生产厂家搜索页，所有勾选的生产厂家数据源)。对二者进行嵌套循环遍历，需要考录到三种不同情况，并对这三种情况进行一一判断。<br>① _dataList全部包含了_selectList中的元素；<br>② _dataList不包含_selectList中的元素；<br>③ _dataList包含部分_selectList中的元素。</p>
</blockquote>
<p>针对以上三种情况对应的具体步骤: </p>
<ul>
<li>① 遍历找到_dataList中的_selectList元素，变更生产厂家Model中selected状态，将这些选中的元素放到_dataList中元素位置的最前面；</li>
<li>② 直接将_selectList插入到_dataList的最前面；</li>
<li>③ 先替换，再插入新元素到_dataList中，最后再将生产厂家Model中selected为YES的元素前置到_dataList的最前面位置。</li>
</ul>
<p>方案二仍需要进行大量的判断，操作起来仍旧复杂。那么，有没有简单粗暴，提刀就干的方案呢？下面就要说说方案三了。</p>
<blockquote>
<p>方案三: 在生产厂家搜索列表页面直接进行操作。在二次筛选结果页点击跳转至生产厂家搜索页时，传入已经选中生产厂家的数组_selectList，生产厂家搜索结果列表页的数据源_datalist(包含当前已选中生产厂家的数组_selectList和所有未选中的生产厂家)。点击”确定“按钮时，去除_datalist中已选中的生产厂家的Model，然后使用block反向将去除后的_datalist和_selectList传给二次筛选结果页。</p>
</blockquote>
<p>这样在二次筛选结果页就能直接操作已经处理过的筛选数据了，不用再进行复杂的逻辑判断了。总的来说，这种替换原有页面数据源的操作，以后还是在可以对数据源进行修改的页面进行处理，避免最后需要进行复杂的逻辑判断。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/liuzhiyi1992/ZYSideSlipFilter" target="_blank" rel="external">ZYSideSlipFilter</a></p>
<p><a href="https://stackoverflow.com/questions/8834031/objective-c-nsmutablearray-mutated-while-being-enumerated" target="_blank" rel="external">Objective-C NSMutableArray mutated while being enumerated?
</a></p>
<p><a href="https://stackoverflow.com/questions/32865704/collection-nsarraym-0x7fa1f2711910-was-mutated-while-being-enumerated" target="_blank" rel="external">Collection <__nsarraym: 0x7fa1f2711910=""> was mutated while being enumerated
</__nsarraym:></a></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个类似于京东搜索结果页的筛选功能，侧边栏条件筛选器，根据不同的数据类型进行条件筛选及筛选条件的排列展示。&lt;/p&gt;
&lt;h1 id=&quot;构建原理及使用到的技术点&quot;&gt;&lt;a href=&quot;#构建原理及使用到的技术点&quot; class=&quot;headerlink&quot; title=&quot;构建原理及使用
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="二次筛选" scheme="http://XibHe.github.io/tags/%E4%BA%8C%E6%AC%A1%E7%AD%9B%E9%80%89/"/>
    
      <category term="NSArray enumerate" scheme="http://XibHe.github.io/tags/NSArray-enumerate/"/>
    
  </entry>
  
  <entry>
    <title>重构webView页面间跳转逻辑</title>
    <link href="http://XibHe.github.io/2017/08/07/reconsiderUrlPush/"/>
    <id>http://XibHe.github.io/2017/08/07/reconsiderUrlPush/</id>
    <published>2017-08-06T16:00:00.000Z</published>
    <updated>2017-10-14T02:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>在处理webView页面内的跳转逻辑时，需要在当前webView中点击某个按钮push到另一个webView页，在这个新的webView页中仍然可以操作页面上的点击事件，跳转到其他webView页面。于是，这些webView页面可以相互跳转，不断跳转新的或者之前的webView页面。</p>
<h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>点击商品进入到“商品详情”页(GoodInforH5WebViewController)，点击店铺进入“店铺详情”页(ShopInfoH5WebViewController)，其中(“商品详情”页和”店铺详情”页均为webView)。其中，店铺详情页和商品详情页可以相互跳转。</p>
<h1 id="当前逻辑"><a href="#当前逻辑" class="headerlink" title="当前逻辑"></a>当前逻辑</h1><p>在继承于UINavigationController的自定义导航控制器MyNavigationController里做判断，重写方法:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>pushViewController<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewController <span class="token operator">*</span><span class="token punctuation">)</span>viewController animated<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span> respondsToSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>interactivePopGestureRecognizer<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>interactivePopGestureRecognizer<span class="token punctuation">.</span>delegate <span class="token operator">=</span> nil<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        viewController<span class="token punctuation">.</span>hidesBottomBarWhenPushed <span class="token operator">=</span> YES<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>viewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span>viewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            viewController<span class="token punctuation">.</span>navigationItem<span class="token punctuation">.</span>leftBarButtonItem <span class="token operator">=</span> <span class="token punctuation">[</span>UIBarButtonItem itemWithTarget<span class="token punctuation">:</span><span class="token keyword">self</span> action<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>backRootViewController<span class="token punctuation">)</span> image<span class="token punctuation">:</span><span class="token string">@"navigation_back"</span> highlightImage<span class="token punctuation">:</span><span class="token string">@"navigation_back"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>     
   <span class="token punctuation">[</span><span class="token keyword">super</span> pushViewController<span class="token punctuation">:</span>viewController animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重写GoodInforH5WebViewController和ShopInfoH5WebViewController的返回事件。即，backRootViewController。在backRootViewController方法里做相应页面的跳转操作。</p>
<p>在GoodInforH5WebViewController页面的viewWillAppear方法里进行页面跳转逻辑的判断。如下:</p>
<font color="#DC143C"> 前方高能预警!!! </font>

<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillAppear<span class="token punctuation">:</span>animated<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController setNavigationBarHidden<span class="token punctuation">:</span>NO animated<span class="token punctuation">:</span>NO<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//[_webView reload];</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.navigationController.viewControllers count = %ld"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.navigationController.viewControllers = %@"</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 若是经首页;分类列表页面;订单中心;商业店铺列表页;我的收藏,且viewControllers&lt;5,则设置pop回上一页的标识;商家促销,且viewControllers&lt;5,则设置pop回上一页的标识</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_bussinessUrl"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"assortment_searchByCate"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"sellOrderCenter_buyOrders"</span><span class="token punctuation">]</span> <span class="token operator">||</span> 
        <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"My_collectionListUrl"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span>
         <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"businessShopSearchList_goodInfo"</span><span class="token punctuation">]</span> <span class="token operator">||</span>  
         <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"ActivityViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> 
         <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"BusinessPromoteViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"1"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"GoodsListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"search_searchByKey"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"business_shopSearch"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"businessShopSearchList_shopInfo"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_productDetailUrl"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"ShopCarListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 从GoodsListViewController跳转至原生商品详情页面;从顶部搜索等页面跳转至原生商品详情页面; 从商业店铺搜索结果列表页跳转,点击返回至self.viewControllers[2]的页面;若是从搜索首页，分类的搜索结果页跳转而来,返回搜索商品列表页;若是从商业店铺列表页跳转而来，则返回到店铺详情的H5页面;从首页商品-->商品详情-->店铺详情-->商品详情，并且viewControllers>=4，则返回店铺详情页;从原生购物车跳转而来,且viewControllers>=4，则返回店铺详情页;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"2"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"shopInfor_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"assortment_searchByCate"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"My_collectionListUrl"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"ActivityViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"GoodsListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 若是从商业店铺详情搜索跳转而来;若是从分类列表页跳转而来;若是从我的收藏跳转而来，且viewControllers>=5，则返回店铺详情页面。</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"3"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"home_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"GoodsListViewController"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 从搜索商品列表-->商品详情-->店铺详情-->商品详情,且viewControllers>=6，则返回店铺详情页；从订单详情页-->商品详情-->店铺详情-->商品详情,且viewControllers>=6，则返回店铺详情页；</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"4"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_fromWebUrl isEqualToString<span class="token punctuation">:</span><span class="token string">@"shopInfor_searchVC"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers count<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 从搜索商品列表-->商品详情-->店铺详情-->商品详情,且viewControllers>=7，则返回店铺详情页。</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"5"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> setObject<span class="token punctuation">:</span><span class="token string">@"0"</span> forKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里是通过设置一个名为KPopHomeIndentify的NSUserDefaults对象用于存储navigationController中，当前页面的层级。通过设置一个名为_fromWebUrl的字符串，用于判断是哪个页面跳转而来的。二者结合起来，设置经过GoodInforH5WebViewController页面的返回逻辑。</p>
<p>当触发商品详情页的跳转链接时，需要在webView的shouldStartLoadWithRequest代理方法里做判断，当request的绝对地址中包含店铺详情的路径时，则push到店铺详情页。如下:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token macro property">#<span class="token directive keyword">pragma</span> mark - UIWebViewDelegate</span>
<span class="token operator">-</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView shouldStartLoadWithRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span><span class="token punctuation">)</span>request navigationType<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebViewNavigationType<span class="token punctuation">)</span>navigationType
<span class="token punctuation">{</span>
    _absoluteUrl <span class="token operator">=</span> <span class="token punctuation">[</span>request<span class="token punctuation">.</span>URL absoluteString<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// push到店铺详情页面</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_absoluteUrl rangeOfString<span class="token punctuation">:</span><span class="token string">@"appLink/showBusyInfo?"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location <span class="token operator">!=</span> NSNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        ShopInfoH5WebViewController <span class="token operator">*</span>shopInforH5WebVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ShopInfoH5WebViewController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
        shopInforH5WebVC<span class="token punctuation">.</span>webUrl <span class="token operator">=</span> _absoluteUrl<span class="token punctuation">;</span>
        shopInforH5WebVC<span class="token punctuation">.</span>fromWebUrl <span class="token operator">=</span> _fromWebUrl<span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController pushViewController<span class="token punctuation">:</span>shopInforH5WebVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> NO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> YES<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再回到自定义导航控制器MyNavigationController重写的返回事件中:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>backRootViewController
<span class="token punctuation">{</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.viewControllers = %@"</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    NSString <span class="token operator">*</span>popIndentify <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSUserDefaults standardUserDefaults<span class="token punctuation">]</span> objectForKey<span class="token punctuation">:</span>KPopHomeIndentify<span class="token punctuation">]</span><span class="token punctuation">;</span>
    UIViewController <span class="token operator">*</span>viewCtl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"4"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>popIndentify isEqualToString<span class="token punctuation">:</span><span class="token string">@"5"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewCtl <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>viewCtl animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样是结合GoodInforH5WebViewController中设置好的KPopHomeIndentify进行判断。根据KPopHomeIndentify存储的导航控制器中的页面层级，在导航控制器中通过这些层级获取到对应的页面viewController，最后popToViewController到这些页面中。</p>
<h1 id="重构原因"><a href="#重构原因" class="headerlink" title="重构原因"></a>重构原因</h1><p>看了上面那一片高能预警的代码逻辑，重构原因就不言而喻了。</p>
<blockquote>
<p>*逻辑判断复杂，每次新增与商品详情，店铺详情相关页面时，都需要新增一系列对应页面层级的判断逻辑；</p>
<p>*给调试造成困难，与商品详情，店铺详情关联的页面很多，需要进行多场景的关联测试；</p>
<p>*最重要的一点:每次从商品详情页跳转到店铺详情都需要重新重新alloc一个新的ShopInfoH5WebViewController对象，耗费了很多资源。</p>
</blockquote>
<h1 id="重构逻辑"><a href="#重构逻辑" class="headerlink" title="重构逻辑"></a>重构逻辑</h1><p>通过设置NSUserDefaults存储页面层级方式进行页面跳转的逻辑，不易操纵，并且非常的不合理，也降低了代码的可读性。设想一下，这里之所以明确不同跳转页面在navigationController中的层级关系，是为了返回操作能回退到指定页面。而导致该冗余代码的罪魁祸首是:每次触发商品详情页或店铺详情页的跳转链接时，都会重新alloc一个新的对象。在进行多次跳转操作后，navigationController中控制的层级就会一直增加，若想在pop操作时跳转到指定页面，就必须明确所要跳转页面在导航控制器中的层级。</p>
<p>那接下来的操作就很明确了，首先移除GoodInforH5WebViewController中viewWillAppear里的一堆判断代码；然后，在webView的代理方法shouldStartLoadWithRequest中增加跳转判断，如下:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token macro property">#<span class="token directive keyword">pragma</span> mark - UIWebViewDelegate</span>
<span class="token operator">-</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView shouldStartLoadWithRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span><span class="token punctuation">)</span>request navigationType<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebViewNavigationType<span class="token punctuation">)</span>navigationType
<span class="token punctuation">{</span>
    _absoluteUrl <span class="token operator">=</span> <span class="token punctuation">[</span>request<span class="token punctuation">.</span>URL absoluteString<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"_absoluteUrl = %@"</span><span class="token punctuation">,</span>_absoluteUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// push到商业店铺详情页面</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_absoluteUrl rangeOfString<span class="token punctuation">:</span><span class="token string">@"appLink/showBusyInfo?"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>location <span class="token operator">!=</span> NSNotFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        UIViewController <span class="token operator">*</span>shopInfoH5WebViewController<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>shopInfoH5WebViewController <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>shopInfoH5WebViewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//                addExtractBankCardVCIndex = [self.navigationController.viewControllers indexOfObject:addExtractBankCardVC];</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController popToViewController<span class="token punctuation">:</span>shopInfoH5WebViewController animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>shopInfoH5WebViewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ShopInfoH5WebViewController <span class="token operator">*</span>shopInforH5WebVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ShopInfoH5WebViewController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
                shopInforH5WebVC<span class="token punctuation">.</span>webUrl <span class="token operator">=</span> _absoluteUrl<span class="token punctuation">;</span>
                shopInforH5WebVC<span class="token punctuation">.</span>fromWebUrl <span class="token operator">=</span> _fromWebUrl<span class="token punctuation">;</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController pushViewController<span class="token punctuation">:</span> shopInforH5WebVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>       
       <span class="token keyword">return</span> NO<span class="token punctuation">;</span>  
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> YES<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里遍历navigationController.viewControllers中所有视图控制器。如果存在店铺详情(ShopInfoH5WebViewController)对象类，则直接popToViewController到该控制器中；如果不存在，则alloc一个新的店铺详情(ShopInfoH5WebViewController)，并pushViewController到该页面。</p>
<p>最后仍然需要在自定义导航控制器MyNavigationController重写的返回事件（backRootViewController）中做跳转的逻辑判断。如下:</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>backRootViewController
<span class="token punctuation">{</span>
    <span class="token function">CLog</span><span class="token punctuation">(</span><span class="token string">@"self.viewControllers = %@"</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 当前视图控制器</span>
    UIViewController <span class="token operator">*</span>currentVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers lastObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 视图控制器的层级</span>
    NSInteger currentVCIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers indexOfObject<span class="token punctuation">:</span>currentVC<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 上一个页面的视图控制器</span>
    UIViewController <span class="token operator">*</span>previousVC <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span>currentVCIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>currentVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previousVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previousVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span> popViewControllerAnimated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>currentVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>ShopInfoH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 其他会跳转到店铺页面视图的跳转逻辑</span>
        UIViewController <span class="token operator">*</span>previoussLastVC<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>currentVCIndex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           previoussLastVC <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span>currentVCIndex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            previoussLastVC <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers firstObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previousVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>GoodInforH5WebViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 我的积分跳转</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>OrderDetailsViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 我的收藏</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>MyCollectionViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 分类</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>LonchH5WebController class<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>AssortmentViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 首页，分类搜索结果页</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>previoussLastVC isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>SearchResultViewController class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToViewController<span class="token punctuation">:</span>previoussLastVC animated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span><span class="token keyword">self</span> popToRootViewControllerAnimated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span> popViewControllerAnimated<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>      
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里通过获取当前页面层级，以及当前页面上一个页面的层级，通过这些层级做相应的跳转操作:</p>
<blockquote>
<p>如果当前页面是商品详情页(GoodInforH5WebViewController)，再进一步判断它的上个页面是否为店铺详情页(ShopInfoH5WebViewController)，若是则popToViewController到上个页面，否则直接popViewControllerAnimated；</p>
<p>如果当前页面是店铺详情页(ShopInfoH5WebViewController)，则需要判断当前视图层级是否越界(当前页面层级currentVCIndex不会超过3级，可能会遇到导航控制器中只有1个视图控制器的情况)，这里与商品详情页不同的是:增加了其它会跳转到店铺页面视图的跳转逻辑。需要对这些页面（积分、我的收藏、分类、搜索结果页）的跳转进行判断。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>事不过三，过则重构!</p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在处理webView页面内的跳转逻辑时，需要在当前webView中点击某个按钮push到另一个webView页，在这个新的webView页中仍然可以操作页面上的点击事件，跳转到其他webView页面。于是，这些webView页面可以相互跳转，不断跳转新的或者之前的webVi
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="重构" scheme="http://XibHe.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>(译)一个给iOS App瘦身的奇怪窍门</title>
    <link href="http://XibHe.github.io/2017/07/23/One%20Weird%20Trick%20to%20Lose%20Size/"/>
    <id>http://XibHe.github.io/2017/07/23/One Weird Trick to Lose Size/</id>
    <published>2017-07-22T16:00:00.000Z</published>
    <updated>2017-10-14T02:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>流行的社交网络应用程序超过400M。每周更新一次，每年你下载的应用总量接近20G。</p>
<p>自从我们推出了<a href="https://halide.cam" target="_blank" rel="external">Halide</a>，我们听到的最令人意想不到的赞美就是它的大小。 在11M，我们将在一年内推出较少数据的更新，而不是社交网络应用进行频繁更新。</p>
<p><img src="http://odchyrav4.bkt.clouddn.com/LoseSizeMajor.png" alt=""><br>一个朋友问道：“所以你没有使用Swift。” 毕竟，Swift将其标准库捆绑到你的应用程序中，使应用大小增大。 Halide几乎完全是使用Swift编写的。</p>
<p>我们是怎么做的？ 我们从技术位开始吧。 <a href="https://developer.apple.com/library/content/qa/qa1795/_index.html" target="_blank" rel="external">这里</a>有很多关于如何减少App大小的重要评论。</p>
<h2 id="测量，不要猜"><a href="#测量，不要猜" class="headerlink" title="测量，不要猜"></a>测量，不要猜</h2><p>从Xcode导出版本构建。 选择“Save for Ad Hoc deployment.”。假设你的应用程序支持<a href="https://developer.apple.com/videos/play/wwdc2015/404/" target="_blank" rel="external">app thinning</a>（此时真的应该这样做），请选择“Export for Specific Devices.”。确保选中“<font size="4" face="黑体"> Rebuild from bitcode </font>”。</p>
<p>你不仅可以获得最终包的大小，还可以获得App Thinning报告。检查你的应用程序包，找到最大存储空间的占用者。</p>
<h2 id="使用-Asset-Catalogs"><a href="#使用-Asset-Catalogs" class="headerlink" title="使用 Asset Catalogs"></a>使用 Asset Catalogs</h2><p>将资源保存在资源目录中。当你上传应用程序时，Apple将其分解为特定设备的版本，因此具有2x屏幕的设备不会获得3x资源，反之亦然。</p>
<h2 id="运行-PNG-crush"><a href="#运行-PNG-crush" class="headerlink" title="运行 PNG-crush"></a>运行 PNG-crush</h2><p>将资源放入目录之前，请运行pngcrush。 根据<a href="https://developer.apple.com/library/content/qa/qa1681/_index.html" target="_blank" rel="external">QA1681</a>，Xcode将自动压缩资源目录之外的PNG资源。</p>
<h2 id="尝试JPEG格式照片"><a href="#尝试JPEG格式照片" class="headerlink" title="尝试JPEG格式照片"></a>尝试JPEG格式照片</h2><p>由于UI资源格式限制以及PNG格式资源更加精细。这可能构成了你应用程序中大部分资源，但如果你有照片，请尝试使用JPEG格式。这样做会有些压力。</p>
<h1 id="现在进入到一个困难步骤的实现"><a href="#现在进入到一个困难步骤的实现" class="headerlink" title="现在进入到一个困难步骤的实现"></a>现在进入到一个困难步骤的实现</h1><p>经过这么辛苦的工作，你只能删掉一个100M项目中几M的文件。我不知道如何告诉你，但你需要更少的代码。</p>
<h2 id="选择正确的方式"><a href="#选择正确的方式" class="headerlink" title="选择正确的方式"></a>选择正确的方式</h2><p>Halide有大概15000行用Swift编写的代码。这包括一个实时视频处理器，一系列自定义控件，以及我们控制AVFoundation的平台。有趣的是我并没有写代码。</p>
<p>通过使用自动布局，我绘制了数千条样板。许多开发人员仍然坚持手工布局。也许他们不明白自动布局，也许他们听到朋友的朋友关于自动布局如何缓慢的言论。（事实并非如此。）</p>
<p>我看到太多的开发人员 - 特别是在大型公司 - 发明内部布局引擎。这简直太疯狂了。当Apple在操作系统上捆绑一个精细的布局引擎时，不要用自己定制的框架来增大应用程序。</p>
<p>我们可以通过删除Interface Builder来减少100k。用户手册和设置几乎完全是具有约束条件的IB。相机UI的高级布置也类似如此。但我们认为短期内开发进度是值得肯定的。</p>
<h2 id="避免Library过大"><a href="#避免Library过大" class="headerlink" title="避免Library过大"></a>避免Library过大</h2><p>检查许多大型应用程序的包，你会发现几十个第三方框架，大小从100k到几兆。</p>
<p>我不使第三方库。这虽然有点极端，但我们有一个独特的情况。</p>
<p>很多第三方库不具备我们所需要的功能。iOS开发社区拥有大量的JSON映射器，但对于DNG文件的低级操作没有任何意义。</p>
<p>但是我之前提到的视频处理呢？我可以听到你大声喊叫，“GPUImage是可扩展的！你的做法太疯狂了!”</p>
<p>从我对Periscope的堆栈的<a href="https://news.realm.io/news/building-periscope-sketches-ios/" target="_blank" rel="external">经验</a>来看，我们看到从GPUImage到内部解决方案的巨大收益。如果实时图像处理不是你业务的一部分，GPUImage就会很好。但是鉴于我们对Halide的长期愿景，以及实时渲染的作用，重要的是能掌控这样的组件。</p>
<p>由于文件太大，我从未引入过GPUImage。但是作为自己疯狂的结果，我避免了在我们的应用程序中捆绑125个未使用的过的滤镜。</p>
<p>PSPDFKit具有相似的<a href="https://pspdfkit.com/blog/2017/pspdfkit-ios-6-8/" target="_blank" rel="external">成功经验</a>，取代了太大的框架：</p>
<blockquote>
<p>我们很高兴地告诉你，使用PSPDFKit 6.8 for iOS，我们重写了数字签名实施的核心，以改进检测，验证和更好的错误报告。因此，我们也设法完全放弃了对OpenSSL的依赖，从而减少了二进制文件的大小。</p>
</blockquote>
<p>不要感染 Not-Invented-Here 综合征，有<a href="https://sandofsky.com/blog/third-party-libraries.html" target="_blank" rel="external">很多理由</a>来避免使用三方库。</p>
<h2 id="不要在分析和A-B测试中浪费资源"><a href="#不要在分析和A-B测试中浪费资源" class="headerlink" title="不要在分析和A / B测试中浪费资源"></a>不要在分析和A / B测试中浪费资源</h2><p>我们不会使用任何第三方分析或崩溃报告服务。首先，我们不是很乐意将用户数据发送给广告公司。让我们暂停这样的想法。</p>
<p>数据不是免费的。在大型应用中，每个动作都会记录一个分析事件。大型应用程序需要日志记录基础设施 - 唯一标识用户，重复数据删除请求，缓存日志，重试失败等。这些操作都会进行叠加。</p>
<p>A / B测试更糟糕。你的典型社交网络应用程序由于没有人使用而死在的A / B测试上。</p>
<p>我们出于代码膨胀的考虑避免了分析和A / B测试。这只是我们的产品理念。知道太多的数据会扭曲你的想法。你发现自己在优化某个不存在的特殊场景，而不是真的去关注用户实际会不会有这样的需求。</p>
<p>所以我们使用苹果分析。它只是简单的记录，没有任何代码更改。并且免费。它尊重用户的隐私，需要选择加入。我们的选择加入率为32％，这对我们的需求是很好的。</p>
<p>有分析的时间和地点。我们不确定我们的最优价格，所以我们可以在那里进行实验。然而，我们在业务驱动的分析和产品开发之间保持隔离。</p>
<h1 id="你需要一致的目标"><a href="#你需要一致的目标" class="headerlink" title="你需要一致的目标"></a>你需要一致的目标</h1><p>我们是一个两个人的开发团队。我们通过销售产品赚钱。我们顺其自然的成长。当用户高兴时，他们会向朋友们推荐我们。小应用让我们开心，我们认为用户也很开心。</p>
<p>我们的建议并不能帮助应用程序包很大的App。社交网络通过广告赚钱，广告客户需要详细的分析广告定位。</p>
<p>大型应用程序拥有数百名开发人员，组成数十个团队，每个团队都有独立的季度目标。 你走的越快，你达成的目标越多，你的晋升越有可能。</p>
<p>想想这是可以理解的，“这个三方库节省了我们一个星期的开发时间，但是在我们的应用程序中增加了1M。那么我们的App已经是几百M了，还有其它办法吗？”</p>
<p>大型组织充满带来意想不到后果的合理想法。</p>
<p>据说工程师想得到提升。输送功能不会让你达到目的。建立一个新的布局引擎。该公司甚至获得了工程博客的招聘诱饵。</p>
<p>唯一的解决方案是高层领导宣布：“我们将减少我们的应用程序大小。”不幸的是，科技CEO们不会使用8G的储存空间的iPhone，他们不会生活在网速受限的地区。</p>
<p>这不是一个毫不费力的努力。自从Halide发布以来，我们收到了来自世界各地的大量消息，感谢我们努力保持App的小巧。</p>
<p>减小App安装包大小真的有一个奇怪的伎俩：专注于你的客户。</p>
<h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="https://blog.halide.cam/one-weird-trick-to-lose-size-c0a4013de331" target="_blank" rel="external">One Weird Trick to Lose Size</a></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流行的社交网络应用程序超过400M。每周更新一次，每年你下载的应用总量接近20G。&lt;/p&gt;
&lt;p&gt;自从我们推出了&lt;a href=&quot;https://halide.cam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Halide&lt;/a&gt;，我们听到的最令人意想
    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="App瘦身" scheme="http://XibHe.github.io/tags/App%E7%98%A6%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>第一个父亲节</title>
    <link href="http://XibHe.github.io/2017/06/18/First-father&#39;s-day/"/>
    <id>http://XibHe.github.io/2017/06/18/First-father&#39;s-day/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2017-10-14T02:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>我和妻子是大学同学，在恋爱长跑五年后结了婚。妻子老家不是我们那边的，但是在同一个省，最开始的地域原因，造成了我家人对她的偏见。我们俩克服了种种阻碍，在15年情人节那天领了证。</p>
<p>我们的小孩比计划来的早，妻子一直很期待在猴年能生一个聪明伶俐的猴宝宝。当得知自己要作父亲的那一天，内心感受是复杂的，有期待，也有忐忑。觉得自己没有做好成为一个父亲的准备。伴随着孩子快要出生，我的这种焦虑感越发的明显了。在妻子待产期间，没有全身心的去照顾她，总是把工作中的压力和不快带到家里。终于，在一个周三的早上爆发了…… 最后，还是妻子在妻子的安慰下，我才渐渐平复了自己的心情。</p>
<p>由于老家人和妻子之间的矛盾，再加上我父母都不在老家，不能照顾快要临产的妻子。最终选择在我妻子老家待产。孩子出生那天的凌晨十二点多，那时我并不在妻子身边，电话那头当妻子告诉我小家伙出生了，是个男孩时，我就再也控制不住自己的激动，惊喜，幸福的感情了。当得知妻子由于羊水不足而剖腹产时，听着电话一头，妻子有气无力的声音。当时真想给自己一巴掌，我没有尽到作丈夫的责任，在妻子临盆时不能陪在她身边，给她鼓励，让她安心。还让我岳母，一个50多岁，腿脚不便利的老人家为我妻子跑前跑后，楼上楼下的张罗妻子生产的一切事宜。</p>
<p>像我这样的渣男竟然还有女人给我生孩子，把自己的终身幸福托付给我。我上辈子一定是积了什么大功德了！无法忘记第一次见到小家伙的场景，他紧握着一双小手，眼睛半闭半睁，好奇的打量着周围的一切。虽然我嘴上一直在埋怨小家伙让他妈妈挨了一刀，但心里还是对他充满了怜爱。唯一遗憾的是，陪在她们母子身边的时间太短，不等小家伙满月我就不得不离开她们母子俩，带着不舍与留恋重新投入到工作中。</p>
<p>这次端午节回家，小家伙给了我一个大大的惊喜。刚一见面，盯着看了我半天，然后就用一双小手抚摸我的脸，最后，嘿嘿一笑，扑到我的怀里。那一刻，时间仿佛静止，而我又找到了初恋的感觉[害羞]。这不禁又让我感慨了一番：不能时刻陪在你身边，经历你的成长，听到你第一次喊爸爸。终究是我无法弥补的遗憾。这里不奢望能得到你的原谅，只希望将来的某一天你能理解。成年人的生活里没有容易二字。爱❤你我的小宝贝！            </p>
<p>再过一个多月我们家宝宝就一岁了，这一年来我经历了很多，也成长了很多。感谢妻子的宽容和奉献，她总是迁就我的时不时就发作的小情绪，安慰我，鼓励我，支持我。尽她最大的力量来爱我和儿子。爱❤你我的大宝贝！你和儿子就是我的一切，我的天下无双。</p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我和妻子是大学同学，在恋爱长跑五年后结了婚。妻子老家不是我们那边的，但是在同一个省，最开始的地域原因，造成了我家人对她的偏见。我们俩克服了种种阻碍，在15年情人节那天领了证。&lt;/p&gt;
&lt;p&gt;我们的小孩比计划来的早，妻子一直很期待在猴年能生一个聪明伶俐的猴宝宝。当得知自己要作
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="父亲节" scheme="http://XibHe.github.io/tags/%E7%88%B6%E4%BA%B2%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>《黑客与画家》小记</title>
    <link href="http://XibHe.github.io/2017/05/31/hacker-and-artist/"/>
    <id>http://XibHe.github.io/2017/05/31/hacker-and-artist/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2017-10-14T02:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imciel.com" target="_blank" rel="external">郭一刀</a>推荐的一本书，一本关于创业经历，软件开发，个人品味的书。也许是书中的章节相互独立，给我的感觉像是集合了众多的tips。而这些闪光点，或是忠告，或是建议，或者结合了很多事实而形成的结论。读后给我一种醍醐灌顶的感觉，Paul结合自己的创业和开发经历，将计算机编程的本质娓娓道来。全书大致分成三个部分:</p>
<ul>
<li>解释了什么是黑客，黑客是如何看待这个世界的。</li>
<li>黑客去的成果，这些成果对世界的影响，如何创造财富？用黑客的方法防止垃圾邮件。</li>
<li>黑客心目中完美的编程语言是什么样的，为什么黑客如此执着于设计新的编程语言。</li>
</ul>
<p>Paul是世界上首个互联网应用程序Viaweb的开发者之一。创建的Viaweb公司后来被雅虎收购，改名为Yahoo!Store。后来Paul成为一名资深的投资人，作为一名成功的创业者同时也是一名熟练使用Lisp语言的专家。他的经历很生动，完美诠释黑客文化的基础和核心。其中是我印象深刻的是一段关于如何促成潜在的买方掏钱收购自己创业公司的论述:</p>
<blockquote>
<font size="3" face="黑体"> 大多数时候，促成买方掏钱的最好办法不是让买方看到有获利的可能，二手让他们感到失去机会的恐惧。对于买家来说，最强的收购动机就是看到竞争对手可能收购你。我们发现这会使得CEO们连夜行动。次强的动机则是让他们担心如果现在不买你，你的高速成长将使得未来的收购耗资巨大，甚至你本身可能变成一个他们的竞争对手。 </font>

</blockquote>
<p>Paul曾经学习过绘画，绘画是一门艺术性很强，同时需要欣赏者有着相应的鉴赏和审美能力的创作方式。Paul总是能将自己的编程和创业经历与之结合起来，切中要害的指出二者之间的联系。</p>
<p>关于设计者的品味，只要你开始思考这个问题，你就会发现不同的领域对于“美”的理解有着惊人的相似度。优秀设计的原则是许多学科的共同原则，一再反复地出现。</p>
<blockquote>
<ul>
<li>好设计是简单的设计</li>
<li>好设计是永不过时的设计</li>
<li>好设计是解决主要问题的设计</li>
<li>好设计是启发性的设计</li>
<li>好设计通常是有点趣味性的设计</li>
<li>好设计是艰苦的设计</li>
<li>好设计是看似容易的设计</li>
<li>好设计是对称的设计</li>
<li>好设计是模仿大自然的设计</li>
<li>好设计是一种再设计</li>
<li>好设计是能够复制的设计</li>
<li>好设计常常是奇特的设计</li>
<li>好设计是成批出现的</li>
<li>好设计常常是大胆的设计</li>
</ul>
</blockquote>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://imciel.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;郭一刀&lt;/a&gt;推荐的一本书，一本关于创业经历，软件开发，个人品味的书。也许是书中的章节相互独立，给我的感觉像是集合了众多的tips。而这些闪光点，或是忠告
    
    </summary>
    
      <category term="阅读" scheme="http://XibHe.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="《黑客与画家》" scheme="http://XibHe.github.io/tags/%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用JSExport进行JS交互时遇到的一个问题</title>
    <link href="http://XibHe.github.io/2017/05/04/%E4%BD%BF%E7%94%A8JSExport%E8%BF%9B%E8%A1%8CJS%E4%BA%A4%E4%BA%92%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://XibHe.github.io/2017/05/04/使用JSExport进行JS交互时遇到的一个问题/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-10-14T02:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用JSExport与OC和JS进行通信，遇到一个问题，无法调用JS传递的最新购物车商品数量的交互方法。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将之前的放在VC里的JS交互方法抽离到单独的一个类中，这个类继承NSObject。不做任何特别的处理，将  </p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec">JSContext <span class="token operator">*</span>context <span class="token operator">=</span> <span class="token punctuation">[</span>webView valueForKeyPath<span class="token punctuation">:</span><span class="token string">@"documentView.webView.mainFrame.javaScriptContext"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
context<span class="token punctuation">[</span><span class="token string">@"jsObject"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这句代码，从</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>webViewDidFinishLoad<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>移到，</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView shouldStartLoadWithRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span><span class="token punctuation">)</span>request navigationType<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebViewNavigationType<span class="token punctuation">)</span>navigationType
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>该代理方法中，就能每次都调用JS与OC的交互方法。</p>
<h2 id="JavaScriptCore使用注意"><a href="#JavaScriptCore使用注意" class="headerlink" title="JavaScriptCore使用注意"></a>JavaScriptCore使用注意</h2><p>JavaStript调用本地方法是在子线程中执行的，这里要根据实际情况考虑线程之间的切换，而在回调JavaScript方法的时候最好是<font color="#FA8072">在刚开始调用此方法的线程中去执行那段JavaStript方法的代码。</font></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.csdn.net/lwjok2007/article/details/47058795" target="_blank" rel="external">iOS js oc相互调用（JavaScriptCore）（二）</a><br><a href="http://blog.csdn.net/si392950818/article/details/51646996" target="_blank" rel="external">ios 与 js交互一点心得</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/XibHe/JSExportTest" target="_blank" rel="external">点击下载</a></p>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>这里只有获取购物车最新商品数量时，无法调用JS交互方法，其他的JS交互方法仍然可以调用。那么<font color="#FA8072">获取JSContext的时机是什么</font></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用JSExport与OC和JS进行通信，遇到一个问题，无法调用JS传递的最新购物车商品数量的交互方法。&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;将
    
    </summary>
    
      <category term="解惑" scheme="http://XibHe.github.io/categories/%E8%A7%A3%E6%83%91/"/>
    
    
      <category term="JSExport" scheme="http://XibHe.github.io/tags/JSExport/"/>
    
      <category term="JS里通过对象调用方法" scheme="http://XibHe.github.io/tags/JS%E9%87%8C%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>(译)HTTPS的工作原理</title>
    <link href="http://XibHe.github.io/2017/04/27/HTTPS/"/>
    <id>http://XibHe.github.io/2017/04/27/HTTPS/</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-10-14T02:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS只是标准HTTP协议涂上一层美味的SSL/TLS加密信息。 除非出现严重错误,它可以防止人们因<a href="https://en.wikipedia.org/wiki/Alice_and_Bob" target="_blank" rel="external">infamous Eve</a>查看或修改那些构成你浏览中产生的请求；让你可以安全的在你的电脑和服务器之间发送密码、通信和信用卡信息等数据。当绿色小挂锁和字母“https”出在你的地址栏时，并不意味你所访问的网站仍是之前的，而不是已经被篡改过的，当你打开网页时这些标识至少帮助你安全地访问网页。</p>
<h2 id="1-什么是HTTPS以及它做了什么"><a href="#1-什么是HTTPS以及它做了什么" class="headerlink" title="1.什么是HTTPS以及它做了什么?"></a>1.什么是HTTPS以及它做了什么?</h2><p>HTTPS是著名的HTTP协议，是在SSL / TLS(以下简称为“SSL”)加密层之上。服务器和客户端仍然通过完全相同的HTTP协议进行通信，但二者的通信是建立在一个安全的SSL连接,加密和解密请求和响应体系之上的。SSL有两个主要目的:</p>
<ul>
<li>验证你所访问的服务器的正确性</li>
<li>确保你与服务器之间的数据通信，无论是你发送给服务器的还是服务器返回给你的信息不被篡改</li>
</ul>
<p>真正非常聪明的部分是任何人都可以拦截您与服务器交换的每一个消息，包括您同意使用密钥和加密策略的消息，仍然无法读取任何实际发送的数据。</p>
<h2 id="2-如何建立SSL连接"><a href="#2-如何建立SSL连接" class="headerlink" title="2.如何建立SSL连接"></a>2.如何建立SSL连接</h2><p>通过握手建立客户端和服务器之间的SSL连接，其目的是:</p>
<ul>
<li>为了确实与客户端通信服务器的正确性</li>
<li>双方已经同意一个“密码套件”，其中包括二者将用于交换数据的加密算法</li>
<li>双方已就此算法达成任何必要的密钥</li>
</ul>
<p>一旦连接建立，双方可以使用约定的算法和密钥来安全地发送消息给彼此。我们将把握手分为3个主要阶段 - 发送Client Hello报文，证书交换和密钥交换。</p>
<p>1.客户端发送Client Hello报文 — 握手开始于客户端发送Client Hello报文。这包含服务器通过SSL连接到客户端所需的所有信息，包括各种密码套件及其支持的最大SSL版本。服务器使用Server Hello报文进行响应，报文中包含客户端所需的类似信息，包括根据客户端的偏好决定将使用哪个加密套件和SSL版本。</p>
<p>2.证书交换 — 现在连接已经建立起来了，服务器必须向客户端证明其身份。这是使用SSL证书来实现的，这是一个很小的类似于护照的东西。SSL证书包含各种数据，包括所有者的名称，附加的属性（例如域），证书的公钥，数字签名和有关证书有效期的信息。客户端检查隐式信任该证书，或者它被隐式信任的几个证书颁发机构（CA）之一被验证和信任。更多关于证书的要求。注意服务器还可以要求通过证书证明客户端的身份，但这通常只发生在非常敏感的应用程序中。</p>
<p>3.密钥交换 — 客户端和服务器交换的实际消息数据的加密将使用一种对称算法来完成，该算法在发送Client Hello报文阶段已被认可。对称算法使用单个密钥进行加密和解密，与需要公钥/私钥对的不对称算法相反。双方需要就此单一的对称密钥达成一致，即使用非对称加密和服务器的公钥/私钥可以安全地实现这一过程。</p>
<p>客户端生成用于主对称算法的随机密钥。它使用在发送Client Hello报文阶段中同意的算法和服务器的公钥（在其SSL证书上找到）对其进行加密。它将此加密密钥发送到服务器，使用服务器的私钥对其进行解密，握手会话中有趣部分就这样完成了。双方都充满乐意，如同他们正在和正确的人交谈，并且秘密地同意对对方加密他们即将发送的数据的密钥。HTTP请求和响应现在可以通过对明文消息进行加密后发送。</p>
<h2 id="3-证书"><a href="#3-证书" class="headerlink" title="3.证书"></a>3.证书</h2><h3 id="3-1信任"><a href="#3-1信任" class="headerlink" title="3.1信任"></a>3.1信任</h3><p>在最基本的层次上，SSL证书只是一个文本文件，任何具有文本编辑器的人都可以创建一个。实际上，您可以创建一个证书，声称您是Google Inc.，并且你掌握域名gmail.com。如果这是事实，SSL就是一个笑话;身份验证基本上是客户端询问服务器“你是Google吗？”，服务器回复“呃，是的，这是一张纸，’我是Google’写的”，客户说“好，这是我所有的数据”。阻止这场闹剧的魔法是在数字签名中，允许一方验证另一方的纸张是否合法。<br>为什么你可能信任证书有两个明智的原因：</p>
<ul>
<li>如果它在你隐含信任证书的列表上</li>
<li>如果能够证明它是被上述列表中的一个证书的控制器所信任</li>
</ul>
<p>第一个标准很容易检查。您的浏览器具有可从其中查看，添加和删除证书颁发机构(CA)可信SSL证书预先安装的列表。这些证书由一个集中的（在理论上，一般在实践中）组织来控制，这些组织非常安全，可靠和值得信赖，如Symantec，Comodo和GoDaddy。如果服务器从该列表中提供证书，那么您可以信任它。</p>
<p>第二个标准很难。服务器很容易说：“er，我的名字是er，来自微软，你信任Symantec和er，他们完全相信我，所以很酷。”一个有点聪明的客户端可能会去问Symantec“我有一个来自微软的服务请求，说你相信他们，这是真的吗？”但即使Symantec说“是的，我们知道他们，微软是合法的”，您仍然不知道声称是Microsoft的服务器实际上真的是微软还是某些入侵者。这时候数字签名该登场了。</p>
<h3 id="3-2数字签名"><a href="#3-2数字签名" class="headerlink" title="3.2数字签名"></a>3.2数字签名</h3><p>如前所述，SSL证书具有关联的公钥/私钥对。公钥作为证书的一部分分发，私钥被保密。这对非对称密钥用于SSL握手，以交换另一个密钥，供双方对数据加密和解密。客户端使用服务器的公钥加密对称密钥，并将其安全地发送到服务器，服务器使用其私钥对其进行解密。任何人都可以使用公钥加密，但只有服务器可以使用私钥进行解密。</p>
<p>数字签名的情况恰恰相反。证书可以由另一个机构“签署”，从而有效地记录在案，“我们已经证实该证书的控制人也控制证书上列出的属性（域名）”。在这种情况下，权限使用其私钥（广义地说）加密证书的内容，并且该密文作为数字签名附加到证书中。任何人都拥有权限使用公钥对该签名进行解密，并验证其是否为预期的解密值。但只有证书的所有者才能使用私钥加密内容，所以只有所有者才能实际创建一个有效的签名。</p>
<p>因此，如果服务器声称拥有由Symantec（或其他CA）签署的Microsoft.com的证书，那么您的浏览器不需要为此签名。如果是合法的，Symantec将使用（超秘密）私钥来生成服务器的SSL证书的数字签名，因此您的浏览器使用可以使用（超公共）公钥来检查该签名是否有效。Symantec将采取措施确保他们正在签署的组织真正拥有Microsoft.com，因此，鉴于您的客户信任Symantec，可以确定它真的在与微软公司对话。</p>
<h3 id="3-3自签名"><a href="#3-3自签名" class="headerlink" title="3.3自签名"></a>3.3自签名</h3><p>请注意，所有根CA证书都是“自签名”，这意味着使用自己的私钥生成数字签名的证书。根CA证书没有什么特别之处 — 你可以生成自己的自签名证书，并使用它来签署其他证书。 但是，由于您的随机证书不会作为CA预先加载到任何浏览器的任何地方，所以他们都不会相信你所签署的自己的或他人的证书。你是有效地说“呃，我真的是微软，这里是我自己签发并签署的身份证件”，所有正常运行的浏览器都会弹出一个非常严重的错误信息，以回应你的诡计。</p>
<p>这给所有浏览器和操作系统发行商带来了巨大的负担，只能信任干净的根CAs，因为他们的用户最终信任vet网站并保持证书安全的组织。<a href="http://security.stackexchange.com/questions/11464/getting-a-root-ca-accepted-in-systems-and-browsers" target="_blank" rel="external">这不是一件容易的事</a>。</p>
<h3 id="3-4你相信什么？"><a href="#3-4你相信什么？" class="headerlink" title="3.4你相信什么？"></a>3.4你相信什么？</h3><p>有趣的是，你的客户在技术上并不试图验证是否应该信任发送证书的一方，而是应该信任证书中包含的公开密钥。SSL证书是完全公开和公共的，因此任何攻击者都可以获取Microsoft的证书，拦截客户端对Microsoft.com的请求，并向其提供合法的证书。客户端会接受这一点，并开始愉快地握手。 但是，当客户端加密将用于实际数据加密的密钥时，它将使用该真实证书中的真实的Microsoft公钥进行此操作。由于攻击者没有Microsoft私钥来解密，所以他们现在被终止了。即使握手完成，它们仍然无法解密密钥，因此无法解密客户端向其发送的任何数据。只要攻击者不控制受信任的证书的私钥，正常的秩序就会顺利进行下去。如果客户骗取了受信任的证书，攻击者控制了证书和公钥，那么麻烦就开始了。</p>
<h2 id="4-真的很有趣的事实"><a href="#4-真的很有趣的事实" class="headerlink" title="4.真的很有趣的事实"></a>4.真的很有趣的事实</h2><h3 id="4-1咖啡店可以通过网络监控我的HTTPS流量吗"><a href="#4-1咖啡店可以通过网络监控我的HTTPS流量吗" class="headerlink" title="4.1咖啡店可以通过网络监控我的HTTPS流量吗?"></a>4.1咖啡店可以通过网络监控我的HTTPS流量吗?</h3><p>不。公钥密码使用方法的魔力意味着攻击者可以观察客户端和服务器之间交换的每一个字节数据，并且仍然不知道你们之间所说的话大致等于多少交换的数据量。然而，你的正常HTTP流量在不安全的Wi-Fi网络上仍然非常脆弱，而且脆弱的网站可能会成为任何数量的解决方案的受害者，这些方法可能会欺骗您通过纯HTTP或在完全错误的地方发送HTTPS流量。例如，即使登录表单通过HTTPS提交用户名/密码组合，如果表单本身通过HTTP安全地加载，那么攻击者可能会在到达您的计算机的途中拦截表单的HTML，在修改后将登录详细信息发送到他们自己的服务器。</p>
<h3 id="4-2我的公司可以通过网络监控我的HTTPS流量吗？"><a href="#4-2我的公司可以通过网络监控我的HTTPS流量吗？" class="headerlink" title="4.2我的公司可以通过网络监控我的HTTPS流量吗？"></a>4.2我的公司可以通过网络监控我的HTTPS流量吗？</h3><p>如果使用由自己公司控制的机器，那么是可以监控的。请记住，在每个信任链的根源都是一个隐含信任的CA，并且这些权限的列表存储在您的浏览器中。您的公司可以使用他们的机器访问权限，将自己的自签名证书添加到这个CA列表中。然后他们可以拦截您的所有HTTPS请求，提供声称代表相应网站的证书，由他们的假CA签名，因此毫无疑问，您的浏览器信任这些CA签名。由于使用其狡猾的证书的公钥对所有HTTPS请求进行加密，所以可以使用相应的私钥来解密和检查（甚至修改）您的请求，然后将其发送到其预期位置。他们可能不会这样做。但他们可以。<br>顺便提一句，这也是你如何使用代理来检查和修改<a href="http://nickfishman.com/post/50557873036/reverse-engineering-native-apps-by-intercepting-network" target="_blank" rel="external">iPhone应用程序所提供的</a>其他无法访问的HTTPS请求。</p>
<h3 id="4-3那么Lavabit和联邦调查局怎么了？"><a href="#4-3那么Lavabit和联邦调查局怎么了？" class="headerlink" title="4.3那么Lavabit和联邦调查局怎么了？"></a>4.3那么Lavabit和联邦调查局怎么了？</h3><p>Lavabit是2013年NSA泄漏疯狂期间爱德华·斯诺登（Edward Snowden）的超级安全的电子邮件提供商。正如我们所看到的，无数标准黑客可以允许联邦调查局看到Lavabit和其客户之间的任何数据。没有Lavabit SSL证书的私人密钥，黑客们是不可能监听到这些数据的。然而，一位有益的美国法官告诉Lavaff创始人Ladar Levison，他不得不交出这个钥匙，有效地让联邦调查局自由地监视核心的内容。Levison通过在4点类型的11个硬拷贝页面上交出2,560个字符的键，试图停下来，但是被要求执行一个命令，必须以有用的格式交出私钥，否则将会面对每天5000美元的罚款。<br>一旦他遵守了这个命令，Lavad的CA证书颁发机构GoDaddy就会认为证书被破坏了，就撤销了证书。这将Lavabit证书添加到证书吊销列表（CRL）中，该证书撤销列表（CRL）是客户端不再信任以提供安全连接的可信证书的列表。妥协的结果，自签名或其他不可信任的证书导致浏览器显示一个大的红色错误消息，并且阻止或彻底禁止用户进一步的操作。不幸的是，浏览器将继续信任破坏的证书，直到它们将最新的更新提交给CRL，这个过程在实践中显然是<a href="https://news.netcraft.com/archives/2013/05/13/how-certificate-revocation-doesnt-work-in-practice.html" target="_blank" rel="external">不完美的</a>。</p>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5.结论"></a>5.结论</h2><p>HTTPS不是不可破解的，SSL协议必须不断发展，因为对其的新攻击一直在快速的<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Attacks_against_TLS.2FSSL" target="_blank" rel="external">发展演化</a>。但是，如果看不到您的消息，那么传输秘密数据的方式仍然是令人印象深刻的方式。当然，这里没有提及许多实现细节，例如握手消息的确切格式和顺序，缩短的握手来接收最近的会话而不必重新协商密钥和密码套件，以及每个阶段可用的许多不同的加密选项。要记住的关键是，尽管HTTPS将数据安全地保护到目的地，但绝对不会对您（作为用户或开发人员），保护您免受XSS或数据库泄漏或任何其他事情造成的严重影响。时刻保持警惕。 在威尔·史密斯的不朽言辞中，“在黑暗中行走，要时刻注意，防止突发的暴力。”。<br>如果你喜欢这片文章，你可能会喜欢我的另一篇文章<a href="http://robertheaton.com/2015/04/06/the-ssl-freak-vulnerability/" target="_blank" rel="external">解释SSL2015年FREAK漏洞的细节</a>。</p>
<h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="http://robertheaton.com/2014/03/27/how-does-https-actually-work/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=ios" target="_blank" rel="external">How does HTTPS actually work?</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><font size="4" face="黑体"> 《图解HTTP》 </font>

<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS只是标准HTTP协议涂上一层美味的SSL/TLS加密信息。 除非出现严重错误,它可以防止人们因&lt;a href=&quot;https://en.wikipedia.org/wiki/Alice_and_Bob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
      <category term="译文" scheme="http://XibHe.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="译文" scheme="http://XibHe.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="HTTPS" scheme="http://XibHe.github.io/tags/HTTPS/"/>
    
      <category term="HTTPS的工作原理" scheme="http://XibHe.github.io/tags/HTTPS%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>iOS下的图形绘制</title>
    <link href="http://XibHe.github.io/2017/04/24/Graphics-rendering/"/>
    <id>http://XibHe.github.io/2017/04/24/Graphics-rendering/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2017-10-14T02:46:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h2><p>iOS系统本身提供了两套绘图的框架，即<font color="#FA8072">UIBezierPath</font> 和<font color="#FA8072"> Core Graphics</font>。而前者所属UIKit，其实是对Core Graphics框架关于path的进一步封装，所以使用起来比较简单。但是毕竟Core Graphics更接近底层，所以它更加强大。</p>
<h3 id="UIBezierPath"><a href="#UIBezierPath" class="headerlink" title="UIBezierPath"></a>UIBezierPath</h3><p>UIKit中的UIBezierPath是Core Graphics框架关于path的一个封装。可以创建基于矢量的路径，例如椭圆或者矩形，或者有多个直线和曲线段组成的形状。我们可以用moveToPoint: 和 addLineToPoint:方法去构建。moveToPoint:设置我们想要创建形状的起点。从这点开始，我们可以用方法addLineToPoint:去创建一个形状的线段。我们可以连续的创建line，每一个line的起点都是先前的终点，终点就是指定的点。closePath可以在最后一个点和第一个点之间画一条线段。</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>rect
<span class="token punctuation">{</span>
    UIColor <span class="token operator">*</span>color <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor colorWithRed<span class="token punctuation">:</span><span class="token number">0</span> green<span class="token punctuation">:</span><span class="token number">0.7</span> blue<span class="token punctuation">:</span><span class="token number">0</span> alpha<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>color set<span class="token punctuation">]</span><span class="token punctuation">;</span>

    UIBezierPath<span class="token operator">*</span> aPath <span class="token operator">=</span> <span class="token punctuation">[</span>UIBezierPath bezierPath<span class="token punctuation">]</span><span class="token punctuation">;</span>
    aPath<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>

    aPath<span class="token punctuation">.</span>lineCapStyle <span class="token operator">=</span> kCGLineCapRound<span class="token punctuation">;</span>
    aPath<span class="token punctuation">.</span>lineJoinStyle <span class="token operator">=</span> kCGLineCapRound<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 起点</span>
    <span class="token punctuation">[</span>aPath moveToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 绘制线条</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">40.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">40.0</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">40.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath closePath<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第五条线通过调用closePath方法得到的</span>

    <span class="token comment" spellcheck="true">//根据坐标点连线</span>
    <span class="token punctuation">[</span>aPath stroke<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>aPath fill<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="UIBezierPath-CAShapeLayer"><a href="#UIBezierPath-CAShapeLayer" class="headerlink" title="UIBezierPath+CAShapeLayer"></a>UIBezierPath+CAShapeLayer</h3><p>CAShapeLayer 继承自 CALayer ，因此，可使用 CALayer 的所有属性。但是， CAShapeLayer 需要和贝塞尔曲线配合使用才有意义。<br>查看官网说明:</p>
<blockquote>
<p>/* The shape layer draws a cubic Bezier spline in its coordinate space.</p>
<ul>
<li>The spline is described using a CGPath object and may have both fill</li>
<li>and stroke components (in which case the stroke is composited over</li>
<li>the fill). The shape as a whole is composited between the layer’s</li>
<li>contents and its first sublayer.<br>*/</li>
</ul>
</blockquote>
<p>这里是说 CAShapeLayer 是在其坐标系统内绘制贝塞尔曲线的。因此，使用 CAShapeLayer 需要与 UIBezierPath 一起使用。它有一个 path 属性，而 UIBezierPath 就是对 CGPathRef 类型的封装，因此这两者要配合起来用。</p>
<h3 id="CAShapeLayer与drawRect的关系"><a href="#CAShapeLayer与drawRect的关系" class="headerlink" title="CAShapeLayer与drawRect的关系"></a>CAShapeLayer与drawRect的关系</h3><ul>
<li>drawRect ：属于 CoreGraphics 框架，占用 CPU ，性能消耗大，不建议重写</li>
<li>CAShapeLayer ：属于 CoreAnimation 框架，通过 GPU 来渲染图形，节省性能。动画渲染直接提交给手机 GPU ，不消耗内存<br>这两者各有各的用途，而不是说有了 CAShapeLayer 就不需要 drawRect。<br>温馨提示：drawRect只是一个方法而已，是 UIView 的方法，重写此方法可以完成我们的绘制图形功能。</li>
</ul>
<h3 id="CAShapeLayer与UIBezierPath的关系"><a href="#CAShapeLayer与UIBezierPath的关系" class="headerlink" title="CAShapeLayer与UIBezierPath的关系"></a>CAShapeLayer与UIBezierPath的关系</h3><ul>
<li>CAShapeLayer中shape代表形状的意思，所以需要形状才能生效</li>
<li>贝塞尔曲线可以创建基于矢量的路径，而UIBezierPath类是对CGPathRef的封装</li>
<li>贝塞尔曲线给CAShapeLayer提供路径,CAShapeLayer在提供的路径中进行渲染。路径会闭环,所以绘制出了Shape</li>
<li>用于CAShapeLayer的贝塞尔曲线作为path，其path是一个首尾相接的闭环的曲线，即使该贝塞尔曲线不是一个闭环的曲线</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    _triangleView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIView alloc<span class="token punctuation">]</span> initWithFrame<span class="token punctuation">:</span><span class="token function">CGRectMake</span><span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> screenWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> screenHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    _triangleView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor orangeColor<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>_triangleView<span class="token punctuation">]</span><span class="token punctuation">;</span>
    _triangleView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span> createMaskLayerWithView<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>CALayer <span class="token operator">*</span><span class="token punctuation">)</span>createMaskLayerWithView
<span class="token punctuation">{</span>
    CGFloat viewWidth <span class="token operator">=</span> <span class="token function">CGRectGetWidth</span><span class="token punctuation">(</span>_triangleView<span class="token punctuation">.</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGFloat viewHeight <span class="token operator">=</span> <span class="token function">CGRectGetHeight</span><span class="token punctuation">(</span>_triangleView<span class="token punctuation">.</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>

    CGFloat rightSpace <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    CGFloat topSpace <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 起点</span>
    CGPoint point1 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 绘制线条</span>
    CGPoint point2 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point3 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> topSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point4 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token punctuation">,</span> topSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point5 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> topSpace<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point6 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>viewWidth<span class="token operator">-</span>rightSpace<span class="token punctuation">,</span> viewHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGPoint point7 <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> viewHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>

    UIBezierPath <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span>UIBezierPath bezierPath<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path moveToPoint<span class="token punctuation">:</span>point1<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point3<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point4<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point5<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point6<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>point7<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>path closePath<span class="token punctuation">]</span><span class="token punctuation">;</span>

    CAShapeLayer <span class="token operator">*</span>layer <span class="token operator">=</span> <span class="token punctuation">[</span>CAShapeLayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    layer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span>CGPath<span class="token punctuation">;</span>
    <span class="token keyword">return</span> layer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CoreGraphics"><a href="#CoreGraphics" class="headerlink" title="CoreGraphics"></a>CoreGraphics</h2><p>这是一个绘图专用的API族，它经常被称为QuartZ或QuartZ 2D。Core Graphics是iOS上所有绘图功能的基石，包括UIKit，Core Graphics是高度集成于UIView和其他UIKit部分，Core Graphics数据结构和函数可以通过前缀CG来识别。</p>
<p>步骤:</p>
<ul>
<li>1.先在drawRect方法中获得上下文context；</li>
<li>2.绘制图形（线，图形，图片等）；</li>
<li>3.设置一些修饰属性；</li>
<li>4.渲染到上下文，完成绘图。</li>
</ul>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>rect
<span class="token punctuation">{</span>
    CGContextRef c <span class="token operator">=</span> <span class="token function">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CGContextSetRGBStrokeColor</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// black</span>
    <span class="token function">CGContextSetLineWidth</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGMutablePathRef bubblePath <span class="token operator">=</span> <span class="token function">CGPathCreateMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 这里的点是三角形的尖尖</span>
    <span class="token function">CGPathMoveToPoint</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 其中的一条边的终点</span>
    <span class="token function">CGPathAddLineToPoint</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 另一条边的终点</span>
    <span class="token function">CGPathAddLineToPoint</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CGPathCloseSubpath</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextSaveGState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextAddPath</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> bubblePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextClip</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CGContextSetFillColorWithColor</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor blueColor<span class="token punctuation">]</span> CGColor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGContextFillRect</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CGPathRelease</span><span class="token punctuation">(</span>bubblePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意事项:</p>
<ul>
<li>1.绘图需要 CGContextRef,CGContextRef即图形上下文。可以这么理解，我们绘图是需要一个载体或者说输出目标，它用来显示绘图信息，并且决定绘制的东西输出到哪个地方。可以形象的比喻context就像一个“画板”，我们得把图形绘制到这个画板上。所以，绘图必须要先有context;</li>
<li>2.并不是说一提到绘图，就一定得重写drawRect方法，只是因为通常情况下我们一般采用在drawRect方法里获取context这种方式。</li>
<li>drawRect方法什么时候触发?当view第一次显示到屏幕上时;当调用view的setNeedsDisplay或者setNeedsDisplayInRect:方法时。</li>
</ul>
<h3 id="CGContextAddArcToPoint-amp-amp-CGPathAddArcToPoint"><a href="#CGContextAddArcToPoint-amp-amp-CGPathAddArcToPoint" class="headerlink" title="CGContextAddArcToPoint &amp;&amp; CGPathAddArcToPoint"></a>CGContextAddArcToPoint &amp;&amp; CGPathAddArcToPoint</h3><p>CGContextAddArcToPoint与CGPathAddArcToPoint这两函数是根据两切线及角度来画弧度,设置弧度CGFloat radius。</p>
<p>画一个四个角都是圆角的矩形,</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Do any additional setup after loading the view.</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> drawArcToPoint2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawArcToPoint2
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//创建CGContextRef</span>
    <span class="token function">UIGraphicsBeginImageContext</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CGContextRef gc <span class="token operator">=</span> <span class="token function">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//===绘画逻辑 ===</span>
    <span class="token comment" spellcheck="true">//创建用于转移坐标的Transform,如许我们不消遵守实际显示做坐标策画</span>
    CGAffineTransform transform <span class="token operator">=</span> <span class="token function">CGAffineTransformMakeTranslation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//创建CGMutablePathRef</span>
    CGMutablePathRef path <span class="token operator">=</span> <span class="token function">CGPathCreateMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//半径为10</span>
    CGFloat radius <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//初始点为(10, 0),起点要从10开始，否则，在左上角会出现线条</span>
    <span class="token function">CGPathMoveToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//右上角和右下角两个点,画出半个圆角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//右下角,画出别的半个圆角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//左下角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//左上角</span>
    <span class="token function">CGPathAddArcToPoint</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>transform<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//将CGMutablePathRef添加到当前Context内</span>
    <span class="token function">CGContextAddPath</span><span class="token punctuation">(</span>gc<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor grayColor<span class="token punctuation">]</span> setFill<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor blueColor<span class="token punctuation">]</span> setStroke<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">CGContextSetLineWidth</span><span class="token punctuation">(</span>gc<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//履行绘画</span>
    <span class="token function">CGContextDrawPath</span><span class="token punctuation">(</span>gc<span class="token punctuation">,</span>kCGPathFillStroke<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//从Context中获取图像,并显示在界面上</span>
    UIImage <span class="token operator">*</span>img <span class="token operator">=</span> <span class="token function">UIGraphicsGetImageFromCurrentImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    UIImageView <span class="token operator">*</span>imgView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIImageView alloc<span class="token punctuation">]</span> initWithImage<span class="token punctuation">:</span>img<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>imgView<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CAShapedLayer处理"><a href="#CAShapedLayer处理" class="headerlink" title="CAShapedLayer处理"></a>CAShapedLayer处理</h3><p>理论上我们可以构造出任意想要的形状，但是有些形状如果你不熟悉几何知识的话是构造不出正确path的，从代码上我们可以看到我们可以通过设置CALayer的contents属性来设置显示的内容，那我们是不是可以通过设置CAShapedLayer的contents来设maskLayer呢？答案是肯定的，代码如下：</p>
<pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setup4
<span class="token punctuation">{</span>
    CAShapeLayer <span class="token operator">*</span>maskLayer <span class="token operator">=</span> <span class="token punctuation">[</span>CAShapeLayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>fillColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor blackColor<span class="token punctuation">]</span><span class="token punctuation">.</span>CGColor<span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor clearColor<span class="token punctuation">]</span><span class="token punctuation">.</span>CGColor<span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>contentsCenter <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    maskLayer<span class="token punctuation">.</span>contentsScale <span class="token operator">=</span> <span class="token punctuation">[</span>UIScreen mainScreen<span class="token punctuation">]</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//非常关键设置自动拉伸的效果且不变形</span>
    maskLayer<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">[</span>UIImage imageNamed<span class="token punctuation">:</span><span class="token string">@"gray_bubble_right@2x.png"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>CGImage<span class="token punctuation">;</span>

    CALayer <span class="token operator">*</span>contentLayer <span class="token operator">=</span> <span class="token punctuation">[</span>CALayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    contentLayer<span class="token punctuation">.</span>mask <span class="token operator">=</span> _maskLayer<span class="token punctuation">;</span>
    contentLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>layer addSublayer<span class="token punctuation">:</span>_contentLayer<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>使用CGPathAddArcToPoint绘制带有箭头的弹窗菜单,如图，<br><img src="http://odchyrav4.bkt.clouddn.com/814765ED-432C-4614-87DF-4A275E136BF8.png" alt="弹窗菜单"></p>
<p>在绘制四个边的圆角时，无法对应到特定的四个角的位置，导致绘制不出该效果的图片。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.jianshu.com/p/bbb2cc485a45" target="_blank" rel="external">绘图</a></li>
<li><a href="http://www.tuicool.com/articles/ZrimEnA" target="_blank" rel="external">iOS CAShapeLayer精讲</a></li>
<li><a href="http://www.jianshu.com/p/8e6e960eea7d" target="_blank" rel="external">iOS绘图—— UIBezierPath 和 Core Graphics</a></li>
<li><a href="http://blog.csdn.net/leochang130731/article/details/25566329" target="_blank" rel="external">CGPathAddArc vs CGPathAddArcToPoint</a></li>
<li><a href="http://blog.csdn.net/u012160319/article/details/44835353" target="_blank" rel="external">CGContextAddArcToPoint与CGPathAddArcToPoint</a></li>
<li><a href="http://www.tuicool.com/articles/32mU7fj" target="_blank" rel="external">iOS 不规则的ImageView</a></li>
<li><a href="http://stackoverflow.com/questions/78127/cgpathaddarc-vs-cgpathaddarctopoint" target="_blank" rel="external">CGPathAddArc vs CGPathAddArcToPoint
</a></li>
</ul>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图形绘制&quot;&gt;&lt;a href=&quot;#图形绘制&quot; class=&quot;headerlink&quot; title=&quot;图形绘制&quot;&gt;&lt;/a&gt;图形绘制&lt;/h2&gt;&lt;p&gt;iOS系统本身提供了两套绘图的框架，即&lt;font color=&quot;#FA8072&quot;&gt;UIBezierPath&lt;/font&gt; 和
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="图形绘制" scheme="http://XibHe.github.io/tags/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    
      <category term="UIBezierPath" scheme="http://XibHe.github.io/tags/UIBezierPath/"/>
    
      <category term="CGPathAddLineToPoint" scheme="http://XibHe.github.io/tags/CGPathAddLineToPoint/"/>
    
      <category term="CGPathAddArcToPoint" scheme="http://XibHe.github.io/tags/CGPathAddArcToPoint/"/>
    
  </entry>
  
  <entry>
    <title>Harden your mind</title>
    <link href="http://XibHe.github.io/2017/03/31/Harden-your-mind/"/>
    <id>http://XibHe.github.io/2017/03/31/Harden-your-mind/</id>
    <published>2017-03-30T16:00:00.000Z</published>
    <updated>2017-10-14T02:47:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间看了casa的直播《闲话iOS架构》，收看直播时，很多人在聊天里发言询问<font color="#FA8072">迅速提高技术有什么捷径</font>?而casa的回答是<font color="#FA8072">多想多练</font>。casa直播背景是一个书架，书架上摆满了书，中途一直有人发消息询问大神背后的书架都有什么书？给我最直观的感觉是大家很浮躁，总是想通过一种事半功倍的方式快速摘取成功果实，却忽略了平时的积累，正是这些小的积累，造就大的爆发。</p>
<p>《闲话iOS架构》提到的内容如下:</p>
<blockquote>
<ul>
<li>1.《批判性思维》</li>
<li>2.高效烧脑，低效伤身.</li>
<li>3.protocol,categary</li>
<li>4.注释一般写在垃圾代码那里。剩下的都是代码自注释</li>
<li>5.极致了，怎么保证扩展性?并不矛盾</li>
<li>6.框架ctmater?</li>
<li>7.reactive cocoa</li>
<li>8.APImanager</li>
<li>9.组件化</li>
<li>10.class template</li>
<li>12.OCLink 可以部分review</li>
<li>13.有if就要有else,逻辑上的，思维考虑的对称，不是强制代码必须要这样做</li>
<li>14.以前一直用shell  现在用swift REPL </li>
<li>15.架构的限制是指规范</li>
<li>16.组件化和模块化到底怎么区分，一个东东的不同叫法，实际上应该叫模块化</li>
<li>17.《Cocoa设计模式》</li>
<li>18.如何看待新技术, mvvm，Reactive cocoa，rac</li>
<li>19.没有最全面的技术，只有最合适的技术。</li>
<li>20.CTMediator组件化方案</li>
<li>21.CTNetwokring和YTKNetworking，离散型，集约型</li>
<li>22.codeReview</li>
<li>23.继承的缺点，破坏了代码结构</li>
<li>24.RN,weex</li>
<li>25.复用的东西拆成组件</li>
<li>26.《The Art of Capacity Planning》</li>
<li>27.腾讯开源的Mars,引出大一统和多元化，</li>
<li>28.网易，无埋点打log，网易乐得无埋点数据收集sdk</li>
</ul>
</blockquote>
<p>casa所讲的内容多是通过平时代码积累得来的方法论，如果没有一定的代码积累和长期的项目实践是很难彻底理解这些内容的。iOS应用架构看着很高大上，但需要在牢固的基础之上一层层堆砌成高楼。忽视这些必要的步骤，一味粉饰自己，到头来也只是黄粱一梦一场空。再回过头来看目前国内知识付费现象，觉得是一个泡沫。正如知乎上所说，<font color="#FA8072">知识付费，抓的不是人的求知欲，抓的是人的焦虑感</font>。人们焦虑，希望有人告诉他们捷径，如何更快的获得成功。<font color="#FA8072">这里莫名的想到成功学，成功的永远是成功学的讲师。当代知识产品最大的痛点就是:不看书。</font></p>
<p>我们急切的接受别人输出的价值观，却选择性的忽略掉自己的内心真正的诉求。书上得来总觉浅，听人道出方觉深，互补的只是不愿意努力看书或是去实践的懒惰。知识经济本质上就是粉丝经济的另一种表现形式。最后，还是想强调一下，作为一名攻城狮通过解决日常遇到的问题，或由浅而深，或发散思维都可以一步步引导至问题的核心。切忌自以为是，舍本逐末。</p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间看了casa的直播《闲话iOS架构》，收看直播时，很多人在聊天里发言询问&lt;font color=&quot;#FA8072&quot;&gt;迅速提高技术有什么捷径&lt;/font&gt;?而casa的回答是&lt;font color=&quot;#FA8072&quot;&gt;多想多练&lt;/font&gt;。casa直播背景是一个书架
    
    </summary>
    
      <category term="随笔" scheme="http://XibHe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Harden your mind" scheme="http://XibHe.github.io/tags/Harden-your-mind/"/>
    
      <category term="知识付费" scheme="http://XibHe.github.io/tags/%E7%9F%A5%E8%AF%86%E4%BB%98%E8%B4%B9/"/>
    
  </entry>
  
  <entry>
    <title>待办事项提醒功能开发(二)</title>
    <link href="http://XibHe.github.io/2017/03/15/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91(%E4%BA%8C)/"/>
    <id>http://XibHe.github.io/2017/03/15/待办事项提醒功能开发(二)/</id>
    <published>2017-03-15T09:01:00.000Z</published>
    <updated>2017-10-14T02:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><h2 id="入库操作"><a href="#入库操作" class="headerlink" title="入库操作"></a>入库操作</h2><h2 id="界面绘制"><a href="#界面绘制" class="headerlink" title="界面绘制"></a>界面绘制</h2><h2 id="通知log表"><a href="#通知log表" class="headerlink" title="通知log表"></a>通知log表</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>时间转化的时区设置</li>
<li>最近的本地通知最多只能有64个(待测试)</li>
<li>过期通知的移除(不做移除，通过通知的自有机制去处理的可行性)</li>
<li>生产日期，到期日，保质期天数的交互</li>
<li>奇妙清单的到期提醒只与提醒时间和频率有关，与是否到期无关</li>
<li>iOS 10之后的推送</li>
</ul>
<h1 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h1><p><a href="https://github.com/XibHe/ToDoList" target="_blank" rel="external">点击下载</a></p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建数据库&quot;&gt;&lt;a href=&quot;#新建数据库&quot; class=&quot;headerlink&quot; title=&quot;新建数据库&quot;&gt;&lt;/a&gt;新建数据库&lt;/h2&gt;&lt;h2 id=&quot;入库操作&quot;&gt;&lt;a href=&quot;#入库操作&quot; class=&quot;headerlink&quot; title=&quot;入库操作&quot;
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="开源" scheme="http://XibHe.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="待办事项提醒" scheme="http://XibHe.github.io/tags/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92/"/>
    
  </entry>
  
  <entry>
    <title>待办事项提醒功能开发(一)</title>
    <link href="http://XibHe.github.io/2017/03/13/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%8F%90%E9%86%92%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91(%E4%B8%80)/"/>
    <id>http://XibHe.github.io/2017/03/13/待办事项提醒功能开发(一)/</id>
    <published>2017-03-13T14:50:06.000Z</published>
    <updated>2017-10-14T02:46:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><p>根据用户所添加某件商品的生产日期和保质期天数计算商品的过期日期，在过期前的时间内，用户可以设置提醒的具体时间点和提醒频次，系统根据用户设置的提醒时间和提醒频次通知用户某某商品该使用了。具体操作步骤如下:</p>
<ul>
<li>新增一个提醒事项的名称，这个名称将作为待完成事项显示在任务列表中，可以快速勾选完成；</li>
<li>在保质期限一栏，点击生产日期一栏，弹出年月日的日期选择器用于日期的选择；</li>
<li>点击保质期天数一栏，弹出用于输入保质期天数的输入控件，保质期单位可以是天，月，年；</li>
<li>如果保质期为30天以内，默认开启智能保质期提醒；如果超过30天，则关闭智能提醒，需要有手动设置结束提醒的具体时间及提醒频率；</li>
<li>在提醒设置一栏，根据生产日期和保质期天数自动计算出到期的具体日期，用户点击时间一栏，弹出时间的选择控件用于选择触发提醒的时间点，用户也可以设置提醒频次；</li>
</ul>
<h1 id="需要考虑的技术点"><a href="#需要考虑的技术点" class="headerlink" title="需要考虑的技术点"></a>需要考虑的技术点</h1><p>结合需求需要考虑如下几个问题:</p>
<ul>
<li>本地通知的运行机制是什么？</li>
<li>如何自定义通知的频率？</li>
<li>如何移除到期的通知提醒？</li>
<li>当用户编辑一个已经存在的提醒任务时，如何根据用户修改后的日期，频率等参数，更新现有的通知提醒频次，触发时间，日期等属性？</li>
<li>当切换用户或者用户退出登录后，如何操作之前已经添加的通知提醒？</li>
<li>通知提醒数据的持久化？</li>
</ul>
<h1 id="本地通知相关点"><a href="#本地通知相关点" class="headerlink" title="本地通知相关点"></a>本地通知相关点</h1><p>使用本地通知提醒用户，而本地通知有些地方在使用时需要注意,如下:</p>
<blockquote>
<p>1.本地通知是有操作系统统一调度的，只有在应用退出到后台或者关闭才能收到通知；<br>2.本地通知的数量是有限制的，最近的本地通知最多只能有64个，超过这个数量将被系统忽略；<br>3.如果想要移除本地通知可以调用UIApplication的cancelLocalNotification:或cancelAllLocalNotifications移除指定通知或所有通知；<br>4.通知对应的NScalendarunit属性，可以通过该属性操作提醒的频率；</p>
</blockquote>
<p>NScalendarunit的具体属性如下：</p>
<pre><code>typedef NS_OPTIONS(NSUInteger, NSCalendarUnit) {
        NSCalendarUnitEra                = kCFCalendarUnitEra,
        NSCalendarUnitYear               = kCFCalendarUnitYear,
        NSCalendarUnitMonth              = kCFCalendarUnitMonth,
        NSCalendarUnitDay                = kCFCalendarUnitDay,
        NSCalendarUnitHour               = kCFCalendarUnitHour,
        NSCalendarUnitMinute             = kCFCalendarUnitMinute,
        NSCalendarUnitSecond             = kCFCalendarUnitSecond,
        NSCalendarUnitWeekday            = kCFCalendarUnitWeekday,
        NSCalendarUnitWeekdayOrdinal     = kCFCalendarUnitWeekdayOrdinal,
        NSCalendarUnitQuarter            NS_ENUM_AVAILABLE(10_6, 4_0) = kCFCalendarUnitQuarter,
        NSCalendarUnitWeekOfMonth        NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitWeekOfMonth,
        NSCalendarUnitWeekOfYear         NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitWeekOfYear,
        NSCalendarUnitYearForWeekOfYear  NS_ENUM_AVAILABLE(10_7, 5_0) = kCFCalendarUnitYearForWeekOfYear,
        NSCalendarUnitNanosecond         NS_ENUM_AVAILABLE(10_7, 5_0) = (1 &lt;&lt; 15),
        NSCalendarUnitCalendar           NS_ENUM_AVAILABLE(10_7, 4_0) = (1 &lt;&lt; 20),
        NSCalendarUnitTimeZone           NS_ENUM_AVAILABLE(10_7, 4_0) = (1 &lt;&lt; 21),

    NSEraCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitEra instead&quot;) = NSCalendarUnitEra,
    NSYearCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitYear instead&quot;) = NSCalendarUnitYear,
    NSMonthCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitMonth instead&quot;) = NSCalendarUnitMonth,
    NSDayCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitDay instead&quot;) = NSCalendarUnitDay,
    NSHourCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitHour instead&quot;) = NSCalendarUnitHour,
    NSMinuteCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitMinute instead&quot;) = NSCalendarUnitMinute,
    NSSecondCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitSecond instead&quot;) = NSCalendarUnitSecond,
    NSWeekCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitWeekOfMonth or NSCalendarUnitWeekOfYear, depending on which you mean&quot;) = kCFCalendarUnitWeek,
    NSWeekdayCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitWeekday instead&quot;) = NSCalendarUnitWeekday,
    NSWeekdayOrdinalCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_4, 10_10, 2_0, 8_0, &quot;Use NSCalendarUnitWeekdayOrdinal instead&quot;) = NSCalendarUnitWeekdayOrdinal,
    NSQuarterCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_6, 10_10, 4_0, 8_0, &quot;Use NSCalendarUnitQuarter instead&quot;) = NSCalendarUnitQuarter,
    NSWeekOfMonthCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 5_0, 8_0, &quot;Use NSCalendarUnitWeekOfMonth instead&quot;) = NSCalendarUnitWeekOfMonth,
    NSWeekOfYearCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 5_0, 8_0, &quot;Use NSCalendarUnitWeekOfYear instead&quot;) = NSCalendarUnitWeekOfYear,
    NSYearForWeekOfYearCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 5_0, 8_0, &quot;Use NSCalendarUnitYearForWeekOfYear instead&quot;) = NSCalendarUnitYearForWeekOfYear,
    NSCalendarCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 4_0, 8_0, &quot;Use NSCalendarUnitCalendar instead&quot;) = NSCalendarUnitCalendar,
    NSTimeZoneCalendarUnit NS_CALENDAR_ENUM_DEPRECATED(10_7, 10_10, 4_0, 8_0, &quot;Use NSCalendarUnitTimeZone instead&quot;) = NSCalendarUnitTimeZone,
};
</code></pre><h1 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h1><p>使用sqlite3进行通知提醒相关数据的持久化。大概的思路如下：</p>
<p>新增提醒任务:</p>
<blockquote>
<p>1.插入保质期提醒任务表<br>2.插入通知表<br>3.插入通知log表<br>4.上传服务器通知提醒数据</p>
</blockquote>
<p>编辑提醒任务：</p>
<blockquote>
<p>1.更新保质期提醒任务表<br>2.更新通知表<br>3.更新通知log表<br>4.上传服务器编辑后的通知提醒数据</p>
</blockquote>
<p><font color="#FA8072"> 需要注意本地通知的官方文档是否有最近的跟新 </font>，待续……</p>
<p>–EOF–</p>
<p>若无特别说明，本站文章均为原创，转载请保留链接，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;业务需求&quot;&gt;&lt;a href=&quot;#业务需求&quot; class=&quot;headerlink&quot; title=&quot;业务需求&quot;&gt;&lt;/a&gt;业务需求&lt;/h1&gt;&lt;p&gt;根据用户所添加某件商品的生产日期和保质期天数计算商品的过期日期，在过期前的时间内，用户可以设置提醒的具体时间点和提醒频次，系
    
    </summary>
    
      <category term="Objective-C" scheme="http://XibHe.github.io/categories/Objective-C/"/>
    
    
      <category term="待办事项" scheme="http://XibHe.github.io/tags/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9/"/>
    
      <category term="开源" scheme="http://XibHe.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
</feed>
